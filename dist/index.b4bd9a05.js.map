{"mappings":"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","sources":["<anon>","src/js/physics.js","node_modules/matter-js/build/matter.js"],"sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\nvar $parcel$global =\ntypeof globalThis !== 'undefined'\n  ? globalThis\n  : typeof self !== 'undefined'\n  ? self\n  : typeof window !== 'undefined'\n  ? window\n  : typeof global !== 'undefined'\n  ? global\n  : {};\n// <!-- DISCLAIMER!!!!\n// - If you're looking through my portfolio to check out my code standard, please check out my most recent projects as this code is now very old and messy. -->\n// --- MATTER JS\n// Runs the physics engine\n// generates cursor hitbox, background boxes, and deals with interactions.\nvar $5cd67e1a674bf254$exports = {};\n/*!\n * matter-js 0.18.0 by @liabru\n * http://brm.io/matter-js/\n * License MIT\n * \n * The MIT License (MIT)\n * \n * Copyright (c) Liam Brummitt and contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */ (function webpackUniversalModuleDefinition(root, factory) {\n    $5cd67e1a674bf254$exports = factory();\n})($5cd67e1a674bf254$exports, function() {\n    return /******/ function(modules) {\n        /******/ // The module cache\n        /******/ var installedModules = {};\n        /******/ /******/ // The require function\n        /******/ function __webpack_require__(moduleId) {\n            /******/ /******/ // Check if module is in cache\n            /******/ if (installedModules[moduleId]) /******/ return installedModules[moduleId].exports;\n            /******/ // Create a new module (and put it into the cache)\n            /******/ var module1 = installedModules[moduleId] = {\n                /******/ i: moduleId,\n                /******/ l: false,\n                /******/ exports: {}\n            };\n            /******/ /******/ // Execute the module function\n            /******/ modules[moduleId].call(module1.exports, module1, module1.exports, __webpack_require__);\n            /******/ /******/ // Flag the module as loaded\n            /******/ module1.l = true;\n            /******/ /******/ // Return the exports of the module\n            /******/ return module1.exports;\n        /******/ }\n        /******/ /******/ /******/ // expose the modules object (__webpack_modules__)\n        /******/ __webpack_require__.m = modules;\n        /******/ /******/ // expose the module cache\n        /******/ __webpack_require__.c = installedModules;\n        /******/ /******/ // define getter function for harmony exports\n        /******/ __webpack_require__.d = function(exports, name, getter) {\n            /******/ if (!__webpack_require__.o(exports, name)) /******/ Object.defineProperty(exports, name, {\n                enumerable: true,\n                get: getter\n            });\n        /******/ };\n        /******/ /******/ // define __esModule on exports\n        /******/ __webpack_require__.r = function(exports) {\n            /******/ if (typeof Symbol !== \"undefined\" && Symbol.toStringTag) /******/ Object.defineProperty(exports, Symbol.toStringTag, {\n                value: \"Module\"\n            });\n            /******/ Object.defineProperty(exports, \"__esModule\", {\n                value: true\n            });\n        /******/ };\n        /******/ /******/ // create a fake namespace object\n        /******/ // mode & 1: value is a module id, require it\n        /******/ // mode & 2: merge all properties of value into the ns\n        /******/ // mode & 4: return value when already ns object\n        /******/ // mode & 8|1: behave like require\n        /******/ __webpack_require__.t = function(value, mode) {\n            /******/ if (mode & 1) value = __webpack_require__(value);\n            /******/ if (mode & 8) return value;\n            /******/ if (mode & 4 && typeof value === \"object\" && value && value.__esModule) return value;\n            /******/ var ns = Object.create(null);\n            /******/ __webpack_require__.r(ns);\n            /******/ Object.defineProperty(ns, \"default\", {\n                enumerable: true,\n                value: value\n            });\n            /******/ if (mode & 2 && typeof value != \"string\") for(var key in value)__webpack_require__.d(ns, key, (function(key) {\n                return value[key];\n            }).bind(null, key));\n            /******/ return ns;\n        /******/ };\n        /******/ /******/ // getDefaultExport function for compatibility with non-harmony modules\n        /******/ __webpack_require__.n = function(module1) {\n            /******/ var getter = module1 && module1.__esModule ? /******/ function getDefault() {\n                return module1[\"default\"];\n            } : /******/ function getModuleExports() {\n                return module1;\n            };\n            /******/ __webpack_require__.d(getter, \"a\", getter);\n            /******/ return getter;\n        /******/ };\n        /******/ /******/ // Object.prototype.hasOwnProperty.call\n        /******/ __webpack_require__.o = function(object, property) {\n            return Object.prototype.hasOwnProperty.call(object, property);\n        };\n        /******/ /******/ // __webpack_public_path__\n        /******/ __webpack_require__.p = \"\";\n        /******/ /******/ /******/ // Load entry module and return exports\n        /******/ return __webpack_require__(__webpack_require__.s = 21);\n    /******/ }([\n        /* 0 */ /***/ function(module1, exports) {\n            /**\n* The `Matter.Common` module contains utility functions that are common to all modules.\n*\n* @class Common\n*/ var Common = {};\n            module1.exports = Common;\n            (function() {\n                Common._nextId = 0;\n                Common._seed = 0;\n                Common._nowStartTime = +new Date();\n                Common._warnedOnce = {};\n                Common._decomp = null;\n                /**\n     * Extends the object in the first argument using the object in the second argument.\n     * @method extend\n     * @param {} obj\n     * @param {boolean} deep\n     * @return {} obj extended\n     */ Common.extend = function(obj, deep) {\n                    var argsStart, args, deepClone;\n                    if (typeof deep === \"boolean\") {\n                        argsStart = 2;\n                        deepClone = deep;\n                    } else {\n                        argsStart = 1;\n                        deepClone = true;\n                    }\n                    for(var i = argsStart; i < arguments.length; i++){\n                        var source = arguments[i];\n                        if (source) {\n                            for(var prop in source)if (deepClone && source[prop] && source[prop].constructor === Object) {\n                                if (!obj[prop] || obj[prop].constructor === Object) {\n                                    obj[prop] = obj[prop] || {};\n                                    Common.extend(obj[prop], deepClone, source[prop]);\n                                } else obj[prop] = source[prop];\n                            } else obj[prop] = source[prop];\n                        }\n                    }\n                    return obj;\n                };\n                /**\n     * Creates a new clone of the object, if deep is true references will also be cloned.\n     * @method clone\n     * @param {} obj\n     * @param {bool} deep\n     * @return {} obj cloned\n     */ Common.clone = function(obj, deep) {\n                    return Common.extend({}, deep, obj);\n                };\n                /**\n     * Returns the list of keys for the given object.\n     * @method keys\n     * @param {} obj\n     * @return {string[]} keys\n     */ Common.keys = function(obj) {\n                    if (Object.keys) return Object.keys(obj);\n                    // avoid hasOwnProperty for performance\n                    var keys = [];\n                    for(var key in obj)keys.push(key);\n                    return keys;\n                };\n                /**\n     * Returns the list of values for the given object.\n     * @method values\n     * @param {} obj\n     * @return {array} Array of the objects property values\n     */ Common.values = function(obj) {\n                    var values = [];\n                    if (Object.keys) {\n                        var keys = Object.keys(obj);\n                        for(var i = 0; i < keys.length; i++)values.push(obj[keys[i]]);\n                        return values;\n                    }\n                    // avoid hasOwnProperty for performance\n                    for(var key in obj)values.push(obj[key]);\n                    return values;\n                };\n                /**\n     * Gets a value from `base` relative to the `path` string.\n     * @method get\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} The object at the given path\n     */ Common.get = function(obj, path, begin, end) {\n                    path = path.split(\".\").slice(begin, end);\n                    for(var i = 0; i < path.length; i += 1)obj = obj[path[i]];\n                    return obj;\n                };\n                /**\n     * Sets a value on `base` relative to the given `path` string.\n     * @method set\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {} val The value to set\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} Pass through `val` for chaining\n     */ Common.set = function(obj, path, val, begin, end) {\n                    var parts = path.split(\".\").slice(begin, end);\n                    Common.get(obj, path, 0, -1)[parts[parts.length - 1]] = val;\n                    return val;\n                };\n                /**\n     * Shuffles the given array in-place.\n     * The function uses a seeded random generator.\n     * @method shuffle\n     * @param {array} array\n     * @return {array} array shuffled randomly\n     */ Common.shuffle = function(array) {\n                    for(var i = array.length - 1; i > 0; i--){\n                        var j = Math.floor(Common.random() * (i + 1));\n                        var temp = array[i];\n                        array[i] = array[j];\n                        array[j] = temp;\n                    }\n                    return array;\n                };\n                /**\n     * Randomly chooses a value from a list with equal probability.\n     * The function uses a seeded random generator.\n     * @method choose\n     * @param {array} choices\n     * @return {object} A random choice object from the array\n     */ Common.choose = function(choices) {\n                    return choices[Math.floor(Common.random() * choices.length)];\n                };\n                /**\n     * Returns true if the object is a HTMLElement, otherwise false.\n     * @method isElement\n     * @param {object} obj\n     * @return {boolean} True if the object is a HTMLElement, otherwise false\n     */ Common.isElement = function(obj) {\n                    if (typeof HTMLElement !== \"undefined\") return obj instanceof HTMLElement;\n                    return !!(obj && obj.nodeType && obj.nodeName);\n                };\n                /**\n     * Returns true if the object is an array.\n     * @method isArray\n     * @param {object} obj\n     * @return {boolean} True if the object is an array, otherwise false\n     */ Common.isArray = function(obj) {\n                    return Object.prototype.toString.call(obj) === \"[object Array]\";\n                };\n                /**\n     * Returns true if the object is a function.\n     * @method isFunction\n     * @param {object} obj\n     * @return {boolean} True if the object is a function, otherwise false\n     */ Common.isFunction = function(obj) {\n                    return typeof obj === \"function\";\n                };\n                /**\n     * Returns true if the object is a plain object.\n     * @method isPlainObject\n     * @param {object} obj\n     * @return {boolean} True if the object is a plain object, otherwise false\n     */ Common.isPlainObject = function(obj) {\n                    return typeof obj === \"object\" && obj.constructor === Object;\n                };\n                /**\n     * Returns true if the object is a string.\n     * @method isString\n     * @param {object} obj\n     * @return {boolean} True if the object is a string, otherwise false\n     */ Common.isString = function(obj) {\n                    return toString.call(obj) === \"[object String]\";\n                };\n                /**\n     * Returns the given value clamped between a minimum and maximum value.\n     * @method clamp\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @return {number} The value clamped between min and max inclusive\n     */ Common.clamp = function(value, min, max) {\n                    if (value < min) return min;\n                    if (value > max) return max;\n                    return value;\n                };\n                /**\n     * Returns the sign of the given value.\n     * @method sign\n     * @param {number} value\n     * @return {number} -1 if negative, +1 if 0 or positive\n     */ Common.sign = function(value) {\n                    return value < 0 ? -1 : 1;\n                };\n                /**\n     * Returns the current timestamp since the time origin (e.g. from page load).\n     * The result is in milliseconds and will use high-resolution timing if available.\n     * @method now\n     * @return {number} the current timestamp in milliseconds\n     */ Common.now = function() {\n                    if (typeof window !== \"undefined\" && window.performance) {\n                        if (window.performance.now) return window.performance.now();\n                        else if (window.performance.webkitNow) return window.performance.webkitNow();\n                    }\n                    if (Date.now) return Date.now();\n                    return new Date() - Common._nowStartTime;\n                };\n                /**\n     * Returns a random value between a minimum and a maximum value inclusive.\n     * The function uses a seeded random generator.\n     * @method random\n     * @param {number} min\n     * @param {number} max\n     * @return {number} A random number between min and max inclusive\n     */ Common.random = function(min, max) {\n                    min = typeof min !== \"undefined\" ? min : 0;\n                    max = typeof max !== \"undefined\" ? max : 1;\n                    return min + _seededRandom() * (max - min);\n                };\n                var _seededRandom = function() {\n                    // https://en.wikipedia.org/wiki/Linear_congruential_generator\n                    Common._seed = (Common._seed * 9301 + 49297) % 233280;\n                    return Common._seed / 233280;\n                };\n                /**\n     * Converts a CSS hex colour string into an integer.\n     * @method colorToNumber\n     * @param {string} colorString\n     * @return {number} An integer representing the CSS hex string\n     */ Common.colorToNumber = function(colorString) {\n                    colorString = colorString.replace(\"#\", \"\");\n                    if (colorString.length == 3) colorString = colorString.charAt(0) + colorString.charAt(0) + colorString.charAt(1) + colorString.charAt(1) + colorString.charAt(2) + colorString.charAt(2);\n                    return parseInt(colorString, 16);\n                };\n                /**\n     * The console logging level to use, where each level includes all levels above and excludes the levels below.\n     * The default level is 'debug' which shows all console messages.  \n     *\n     * Possible level values are:\n     * - 0 = None\n     * - 1 = Debug\n     * - 2 = Info\n     * - 3 = Warn\n     * - 4 = Error\n     * @property Common.logLevel\n     * @type {Number}\n     * @default 1\n     */ Common.logLevel = 1;\n                /**\n     * Shows a `console.log` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method log\n     * @param ...objs {} The objects to log.\n     */ Common.log = function() {\n                    if (console && Common.logLevel > 0 && Common.logLevel <= 3) console.log.apply(console, [\n                        \"matter-js:\"\n                    ].concat(Array.prototype.slice.call(arguments)));\n                };\n                /**\n     * Shows a `console.info` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method info\n     * @param ...objs {} The objects to log.\n     */ Common.info = function() {\n                    if (console && Common.logLevel > 0 && Common.logLevel <= 2) console.info.apply(console, [\n                        \"matter-js:\"\n                    ].concat(Array.prototype.slice.call(arguments)));\n                };\n                /**\n     * Shows a `console.warn` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method warn\n     * @param ...objs {} The objects to log.\n     */ Common.warn = function() {\n                    if (console && Common.logLevel > 0 && Common.logLevel <= 3) console.warn.apply(console, [\n                        \"matter-js:\"\n                    ].concat(Array.prototype.slice.call(arguments)));\n                };\n                /**\n     * Uses `Common.warn` to log the given message one time only.\n     * @method warnOnce\n     * @param ...objs {} The objects to log.\n     */ Common.warnOnce = function() {\n                    var message = Array.prototype.slice.call(arguments).join(\" \");\n                    if (!Common._warnedOnce[message]) {\n                        Common.warn(message);\n                        Common._warnedOnce[message] = true;\n                    }\n                };\n                /**\n     * Shows a deprecated console warning when the function on the given object is called.\n     * The target function will be replaced with a new function that first shows the warning\n     * and then calls the original function.\n     * @method deprecated\n     * @param {object} obj The object or module\n     * @param {string} name The property name of the function on obj\n     * @param {string} warning The one-time message to show if the function is called\n     */ Common.deprecated = function(obj, prop, warning) {\n                    obj[prop] = Common.chain(function() {\n                        Common.warnOnce(\"\\uD83D\\uDD05 deprecated \\uD83D\\uDD05\", warning);\n                    }, obj[prop]);\n                };\n                /**\n     * Returns the next unique sequential ID.\n     * @method nextId\n     * @return {Number} Unique sequential ID\n     */ Common.nextId = function() {\n                    return Common._nextId++;\n                };\n                /**\n     * A cross browser compatible indexOf implementation.\n     * @method indexOf\n     * @param {array} haystack\n     * @param {object} needle\n     * @return {number} The position of needle in haystack, otherwise -1.\n     */ Common.indexOf = function(haystack, needle) {\n                    if (haystack.indexOf) return haystack.indexOf(needle);\n                    for(var i = 0; i < haystack.length; i++){\n                        if (haystack[i] === needle) return i;\n                    }\n                    return -1;\n                };\n                /**\n     * A cross browser compatible array map implementation.\n     * @method map\n     * @param {array} list\n     * @param {function} func\n     * @return {array} Values from list transformed by func.\n     */ Common.map = function(list, func) {\n                    if (list.map) return list.map(func);\n                    var mapped = [];\n                    for(var i = 0; i < list.length; i += 1)mapped.push(func(list[i]));\n                    return mapped;\n                };\n                /**\n     * Takes a directed graph and returns the partially ordered set of vertices in topological order.\n     * Circular dependencies are allowed.\n     * @method topologicalSort\n     * @param {object} graph\n     * @return {array} Partially ordered set of vertices in topological order.\n     */ Common.topologicalSort = function(graph) {\n                    // https://github.com/mgechev/javascript-algorithms\n                    // Copyright (c) Minko Gechev (MIT license)\n                    // Modifications: tidy formatting and naming\n                    var result = [], visited = [], temp = [];\n                    for(var node in graph)if (!visited[node] && !temp[node]) Common._topologicalSort(node, visited, temp, graph, result);\n                    return result;\n                };\n                Common._topologicalSort = function(node, visited, temp, graph, result) {\n                    var neighbors = graph[node] || [];\n                    temp[node] = true;\n                    for(var i = 0; i < neighbors.length; i += 1){\n                        var neighbor = neighbors[i];\n                        if (temp[neighbor]) continue;\n                        if (!visited[neighbor]) Common._topologicalSort(neighbor, visited, temp, graph, result);\n                    }\n                    temp[node] = false;\n                    visited[node] = true;\n                    result.push(node);\n                };\n                /**\n     * Takes _n_ functions as arguments and returns a new function that calls them in order.\n     * The arguments applied when calling the new function will also be applied to every function passed.\n     * The value of `this` refers to the last value returned in the chain that was not `undefined`.\n     * Therefore if a passed function does not return a value, the previously returned value is maintained.\n     * After all passed functions have been called the new function returns the last returned value (if any).\n     * If any of the passed functions are a chain, then the chain will be flattened.\n     * @method chain\n     * @param ...funcs {function} The functions to chain.\n     * @return {function} A new function that calls the passed functions in order.\n     */ Common.chain = function() {\n                    var funcs = [];\n                    for(var i = 0; i < arguments.length; i += 1){\n                        var func = arguments[i];\n                        if (func._chained) // flatten already chained functions\n                        funcs.push.apply(funcs, func._chained);\n                        else funcs.push(func);\n                    }\n                    var chain = function() {\n                        // https://github.com/GoogleChrome/devtools-docs/issues/53#issuecomment-51941358\n                        var lastResult, args = new Array(arguments.length);\n                        for(var i = 0, l = arguments.length; i < l; i++)args[i] = arguments[i];\n                        for(i = 0; i < funcs.length; i += 1){\n                            var result = funcs[i].apply(lastResult, args);\n                            if (typeof result !== \"undefined\") lastResult = result;\n                        }\n                        return lastResult;\n                    };\n                    chain._chained = funcs;\n                    return chain;\n                };\n                /**\n     * Chains a function to excute before the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathBefore\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain before the original\n     * @return {function} The chained function that replaced the original\n     */ Common.chainPathBefore = function(base, path, func) {\n                    return Common.set(base, path, Common.chain(func, Common.get(base, path)));\n                };\n                /**\n     * Chains a function to excute after the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathAfter\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain after the original\n     * @return {function} The chained function that replaced the original\n     */ Common.chainPathAfter = function(base, path, func) {\n                    return Common.set(base, path, Common.chain(Common.get(base, path), func));\n                };\n                /**\n     * Provide the [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module to enable\n     * concave vertex decomposition support when using `Bodies.fromVertices` e.g. `Common.setDecomp(require('poly-decomp'))`.\n     * @method setDecomp\n     * @param {} decomp The [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module.\n     */ Common.setDecomp = function(decomp) {\n                    Common._decomp = decomp;\n                };\n                /**\n     * Returns the [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module provided through `Common.setDecomp`,\n     * otherwise returns the global `decomp` if set.\n     * @method getDecomp\n     * @return {} The [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module if provided.\n     */ Common.getDecomp = function() {\n                    // get user provided decomp if set\n                    var decomp = Common._decomp;\n                    try {\n                        // otherwise from window global\n                        if (!decomp && typeof window !== \"undefined\") decomp = window.decomp;\n                        // otherwise from node global\n                        if (!decomp && typeof $parcel$global !== \"undefined\") decomp = $parcel$global.decomp;\n                    } catch (e) {\n                        // decomp not available\n                        decomp = null;\n                    }\n                    return decomp;\n                };\n            })();\n        /***/ },\n        /* 1 */ /***/ function(module1, exports) {\n            /**\n* The `Matter.Bounds` module contains methods for creating and manipulating axis-aligned bounding boxes (AABB).\n*\n* @class Bounds\n*/ var Bounds = {};\n            module1.exports = Bounds;\n            (function() {\n                /**\n     * Creates a new axis-aligned bounding box (AABB) for the given vertices.\n     * @method create\n     * @param {vertices} vertices\n     * @return {bounds} A new bounds object\n     */ Bounds.create = function(vertices) {\n                    var bounds = {\n                        min: {\n                            x: 0,\n                            y: 0\n                        },\n                        max: {\n                            x: 0,\n                            y: 0\n                        }\n                    };\n                    if (vertices) Bounds.update(bounds, vertices);\n                    return bounds;\n                };\n                /**\n     * Updates bounds using the given vertices and extends the bounds given a velocity.\n     * @method update\n     * @param {bounds} bounds\n     * @param {vertices} vertices\n     * @param {vector} velocity\n     */ Bounds.update = function(bounds, vertices, velocity) {\n                    bounds.min.x = Infinity;\n                    bounds.max.x = -Infinity;\n                    bounds.min.y = Infinity;\n                    bounds.max.y = -Infinity;\n                    for(var i = 0; i < vertices.length; i++){\n                        var vertex = vertices[i];\n                        if (vertex.x > bounds.max.x) bounds.max.x = vertex.x;\n                        if (vertex.x < bounds.min.x) bounds.min.x = vertex.x;\n                        if (vertex.y > bounds.max.y) bounds.max.y = vertex.y;\n                        if (vertex.y < bounds.min.y) bounds.min.y = vertex.y;\n                    }\n                    if (velocity) {\n                        if (velocity.x > 0) bounds.max.x += velocity.x;\n                        else bounds.min.x += velocity.x;\n                        if (velocity.y > 0) bounds.max.y += velocity.y;\n                        else bounds.min.y += velocity.y;\n                    }\n                };\n                /**\n     * Returns true if the bounds contains the given point.\n     * @method contains\n     * @param {bounds} bounds\n     * @param {vector} point\n     * @return {boolean} True if the bounds contain the point, otherwise false\n     */ Bounds.contains = function(bounds, point) {\n                    return point.x >= bounds.min.x && point.x <= bounds.max.x && point.y >= bounds.min.y && point.y <= bounds.max.y;\n                };\n                /**\n     * Returns true if the two bounds intersect.\n     * @method overlaps\n     * @param {bounds} boundsA\n     * @param {bounds} boundsB\n     * @return {boolean} True if the bounds overlap, otherwise false\n     */ Bounds.overlaps = function(boundsA, boundsB) {\n                    return boundsA.min.x <= boundsB.max.x && boundsA.max.x >= boundsB.min.x && boundsA.max.y >= boundsB.min.y && boundsA.min.y <= boundsB.max.y;\n                };\n                /**\n     * Translates the bounds by the given vector.\n     * @method translate\n     * @param {bounds} bounds\n     * @param {vector} vector\n     */ Bounds.translate = function(bounds, vector) {\n                    bounds.min.x += vector.x;\n                    bounds.max.x += vector.x;\n                    bounds.min.y += vector.y;\n                    bounds.max.y += vector.y;\n                };\n                /**\n     * Shifts the bounds to the given position.\n     * @method shift\n     * @param {bounds} bounds\n     * @param {vector} position\n     */ Bounds.shift = function(bounds, position) {\n                    var deltaX = bounds.max.x - bounds.min.x, deltaY = bounds.max.y - bounds.min.y;\n                    bounds.min.x = position.x;\n                    bounds.max.x = position.x + deltaX;\n                    bounds.min.y = position.y;\n                    bounds.max.y = position.y + deltaY;\n                };\n            })();\n        /***/ },\n        /* 2 */ /***/ function(module1, exports) {\n            /**\n* The `Matter.Vector` module contains methods for creating and manipulating vectors.\n* Vectors are the basis of all the geometry related operations in the engine.\n* A `Matter.Vector` object is of the form `{ x: 0, y: 0 }`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vector\n*/ // TODO: consider params for reusing vector objects\n            var Vector = {};\n            module1.exports = Vector;\n            (function() {\n                /**\n     * Creates a new vector.\n     * @method create\n     * @param {number} x\n     * @param {number} y\n     * @return {vector} A new vector\n     */ Vector.create = function(x, y) {\n                    return {\n                        x: x || 0,\n                        y: y || 0\n                    };\n                };\n                /**\n     * Returns a new vector with `x` and `y` copied from the given `vector`.\n     * @method clone\n     * @param {vector} vector\n     * @return {vector} A new cloned vector\n     */ Vector.clone = function(vector) {\n                    return {\n                        x: vector.x,\n                        y: vector.y\n                    };\n                };\n                /**\n     * Returns the magnitude (length) of a vector.\n     * @method magnitude\n     * @param {vector} vector\n     * @return {number} The magnitude of the vector\n     */ Vector.magnitude = function(vector) {\n                    return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n                };\n                /**\n     * Returns the magnitude (length) of a vector (therefore saving a `sqrt` operation).\n     * @method magnitudeSquared\n     * @param {vector} vector\n     * @return {number} The squared magnitude of the vector\n     */ Vector.magnitudeSquared = function(vector) {\n                    return vector.x * vector.x + vector.y * vector.y;\n                };\n                /**\n     * Rotates the vector about (0, 0) by specified angle.\n     * @method rotate\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} [output]\n     * @return {vector} The vector rotated about (0, 0)\n     */ Vector.rotate = function(vector, angle, output) {\n                    var cos = Math.cos(angle), sin = Math.sin(angle);\n                    if (!output) output = {};\n                    var x = vector.x * cos - vector.y * sin;\n                    output.y = vector.x * sin + vector.y * cos;\n                    output.x = x;\n                    return output;\n                };\n                /**\n     * Rotates the vector about a specified point by specified angle.\n     * @method rotateAbout\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} point\n     * @param {vector} [output]\n     * @return {vector} A new vector rotated about the point\n     */ Vector.rotateAbout = function(vector, angle, point, output) {\n                    var cos = Math.cos(angle), sin = Math.sin(angle);\n                    if (!output) output = {};\n                    var x = point.x + ((vector.x - point.x) * cos - (vector.y - point.y) * sin);\n                    output.y = point.y + ((vector.x - point.x) * sin + (vector.y - point.y) * cos);\n                    output.x = x;\n                    return output;\n                };\n                /**\n     * Normalises a vector (such that its magnitude is `1`).\n     * @method normalise\n     * @param {vector} vector\n     * @return {vector} A new vector normalised\n     */ Vector.normalise = function(vector) {\n                    var magnitude = Vector.magnitude(vector);\n                    if (magnitude === 0) return {\n                        x: 0,\n                        y: 0\n                    };\n                    return {\n                        x: vector.x / magnitude,\n                        y: vector.y / magnitude\n                    };\n                };\n                /**\n     * Returns the dot-product of two vectors.\n     * @method dot\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The dot product of the two vectors\n     */ Vector.dot = function(vectorA, vectorB) {\n                    return vectorA.x * vectorB.x + vectorA.y * vectorB.y;\n                };\n                /**\n     * Returns the cross-product of two vectors.\n     * @method cross\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The cross product of the two vectors\n     */ Vector.cross = function(vectorA, vectorB) {\n                    return vectorA.x * vectorB.y - vectorA.y * vectorB.x;\n                };\n                /**\n     * Returns the cross-product of three vectors.\n     * @method cross3\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} vectorC\n     * @return {number} The cross product of the three vectors\n     */ Vector.cross3 = function(vectorA, vectorB, vectorC) {\n                    return (vectorB.x - vectorA.x) * (vectorC.y - vectorA.y) - (vectorB.y - vectorA.y) * (vectorC.x - vectorA.x);\n                };\n                /**\n     * Adds the two vectors.\n     * @method add\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB added\n     */ Vector.add = function(vectorA, vectorB, output) {\n                    if (!output) output = {};\n                    output.x = vectorA.x + vectorB.x;\n                    output.y = vectorA.y + vectorB.y;\n                    return output;\n                };\n                /**\n     * Subtracts the two vectors.\n     * @method sub\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB subtracted\n     */ Vector.sub = function(vectorA, vectorB, output) {\n                    if (!output) output = {};\n                    output.x = vectorA.x - vectorB.x;\n                    output.y = vectorA.y - vectorB.y;\n                    return output;\n                };\n                /**\n     * Multiplies a vector and a scalar.\n     * @method mult\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector multiplied by scalar\n     */ Vector.mult = function(vector, scalar) {\n                    return {\n                        x: vector.x * scalar,\n                        y: vector.y * scalar\n                    };\n                };\n                /**\n     * Divides a vector and a scalar.\n     * @method div\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector divided by scalar\n     */ Vector.div = function(vector, scalar) {\n                    return {\n                        x: vector.x / scalar,\n                        y: vector.y / scalar\n                    };\n                };\n                /**\n     * Returns the perpendicular vector. Set `negate` to true for the perpendicular in the opposite direction.\n     * @method perp\n     * @param {vector} vector\n     * @param {bool} [negate=false]\n     * @return {vector} The perpendicular vector\n     */ Vector.perp = function(vector, negate) {\n                    negate = negate === true ? -1 : 1;\n                    return {\n                        x: negate * -vector.y,\n                        y: negate * vector.x\n                    };\n                };\n                /**\n     * Negates both components of a vector such that it points in the opposite direction.\n     * @method neg\n     * @param {vector} vector\n     * @return {vector} The negated vector\n     */ Vector.neg = function(vector) {\n                    return {\n                        x: -vector.x,\n                        y: -vector.y\n                    };\n                };\n                /**\n     * Returns the angle between the vector `vectorB - vectorA` and the x-axis in radians.\n     * @method angle\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The angle in radians\n     */ Vector.angle = function(vectorA, vectorB) {\n                    return Math.atan2(vectorB.y - vectorA.y, vectorB.x - vectorA.x);\n                };\n                /**\n     * Temporary vector pool (not thread-safe).\n     * @property _temp\n     * @type {vector[]}\n     * @private\n     */ Vector._temp = [\n                    Vector.create(),\n                    Vector.create(),\n                    Vector.create(),\n                    Vector.create(),\n                    Vector.create(),\n                    Vector.create()\n                ];\n            })();\n        /***/ },\n        /* 3 */ /***/ function(module1, exports, __webpack_require__) {\n            /**\n* The `Matter.Vertices` module contains methods for creating and manipulating sets of vertices.\n* A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\n* A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vertices\n*/ var Vertices = {};\n            module1.exports = Vertices;\n            var Vector = __webpack_require__(2);\n            var Common = __webpack_require__(0);\n            (function() {\n                /**\n     * Creates a new set of `Matter.Body` compatible vertices.\n     * The `points` argument accepts an array of `Matter.Vector` points orientated around the origin `(0, 0)`, for example:\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * The `Vertices.create` method returns a new array of vertices, which are similar to Matter.Vector objects,\n     * but with some additional references required for efficient collision detection routines.\n     *\n     * Vertices must be specified in clockwise order.\n     *\n     * Note that the `body` argument is not optional, a `Matter.Body` reference must be provided.\n     *\n     * @method create\n     * @param {vector[]} points\n     * @param {body} body\n     */ Vertices.create = function(points, body) {\n                    var vertices = [];\n                    for(var i = 0; i < points.length; i++){\n                        var point = points[i], vertex = {\n                            x: point.x,\n                            y: point.y,\n                            index: i,\n                            body: body,\n                            isInternal: false\n                        };\n                        vertices.push(vertex);\n                    }\n                    return vertices;\n                };\n                /**\n     * Parses a string containing ordered x y pairs separated by spaces (and optionally commas), \n     * into a `Matter.Vertices` object for the given `Matter.Body`.\n     * For parsing SVG paths, see `Svg.pathToVertices`.\n     * @method fromPath\n     * @param {string} path\n     * @param {body} body\n     * @return {vertices} vertices\n     */ Vertices.fromPath = function(path, body) {\n                    var pathPattern = /L?\\s*([-\\d.e]+)[\\s,]*([-\\d.e]+)*/ig, points = [];\n                    path.replace(pathPattern, function(match, x, y) {\n                        points.push({\n                            x: parseFloat(x),\n                            y: parseFloat(y)\n                        });\n                    });\n                    return Vertices.create(points, body);\n                };\n                /**\n     * Returns the centre (centroid) of the set of vertices.\n     * @method centre\n     * @param {vertices} vertices\n     * @return {vector} The centre point\n     */ Vertices.centre = function(vertices) {\n                    var area = Vertices.area(vertices, true), centre = {\n                        x: 0,\n                        y: 0\n                    }, cross, temp, j;\n                    for(var i = 0; i < vertices.length; i++){\n                        j = (i + 1) % vertices.length;\n                        cross = Vector.cross(vertices[i], vertices[j]);\n                        temp = Vector.mult(Vector.add(vertices[i], vertices[j]), cross);\n                        centre = Vector.add(centre, temp);\n                    }\n                    return Vector.div(centre, 6 * area);\n                };\n                /**\n     * Returns the average (mean) of the set of vertices.\n     * @method mean\n     * @param {vertices} vertices\n     * @return {vector} The average point\n     */ Vertices.mean = function(vertices) {\n                    var average = {\n                        x: 0,\n                        y: 0\n                    };\n                    for(var i = 0; i < vertices.length; i++){\n                        average.x += vertices[i].x;\n                        average.y += vertices[i].y;\n                    }\n                    return Vector.div(average, vertices.length);\n                };\n                /**\n     * Returns the area of the set of vertices.\n     * @method area\n     * @param {vertices} vertices\n     * @param {bool} signed\n     * @return {number} The area\n     */ Vertices.area = function(vertices, signed) {\n                    var area = 0, j = vertices.length - 1;\n                    for(var i = 0; i < vertices.length; i++){\n                        area += (vertices[j].x - vertices[i].x) * (vertices[j].y + vertices[i].y);\n                        j = i;\n                    }\n                    if (signed) return area / 2;\n                    return Math.abs(area) / 2;\n                };\n                /**\n     * Returns the moment of inertia (second moment of area) of the set of vertices given the total mass.\n     * @method inertia\n     * @param {vertices} vertices\n     * @param {number} mass\n     * @return {number} The polygon's moment of inertia\n     */ Vertices.inertia = function(vertices, mass) {\n                    var numerator = 0, denominator = 0, v = vertices, cross, j;\n                    // find the polygon's moment of inertia, using second moment of area\n                    // from equations at http://www.physicsforums.com/showthread.php?t=25293\n                    for(var n = 0; n < v.length; n++){\n                        j = (n + 1) % v.length;\n                        cross = Math.abs(Vector.cross(v[j], v[n]));\n                        numerator += cross * (Vector.dot(v[j], v[j]) + Vector.dot(v[j], v[n]) + Vector.dot(v[n], v[n]));\n                        denominator += cross;\n                    }\n                    return mass / 6 * (numerator / denominator);\n                };\n                /**\n     * Translates the set of vertices in-place.\n     * @method translate\n     * @param {vertices} vertices\n     * @param {vector} vector\n     * @param {number} scalar\n     */ Vertices.translate = function(vertices, vector, scalar) {\n                    scalar = typeof scalar !== \"undefined\" ? scalar : 1;\n                    var verticesLength = vertices.length, translateX = vector.x * scalar, translateY = vector.y * scalar, i;\n                    for(i = 0; i < verticesLength; i++){\n                        vertices[i].x += translateX;\n                        vertices[i].y += translateY;\n                    }\n                    return vertices;\n                };\n                /**\n     * Rotates the set of vertices in-place.\n     * @method rotate\n     * @param {vertices} vertices\n     * @param {number} angle\n     * @param {vector} point\n     */ Vertices.rotate = function(vertices, angle, point) {\n                    if (angle === 0) return;\n                    var cos = Math.cos(angle), sin = Math.sin(angle), pointX = point.x, pointY = point.y, verticesLength = vertices.length, vertex, dx, dy, i;\n                    for(i = 0; i < verticesLength; i++){\n                        vertex = vertices[i];\n                        dx = vertex.x - pointX;\n                        dy = vertex.y - pointY;\n                        vertex.x = pointX + (dx * cos - dy * sin);\n                        vertex.y = pointY + (dx * sin + dy * cos);\n                    }\n                    return vertices;\n                };\n                /**\n     * Returns `true` if the `point` is inside the set of `vertices`.\n     * @method contains\n     * @param {vertices} vertices\n     * @param {vector} point\n     * @return {boolean} True if the vertices contains point, otherwise false\n     */ Vertices.contains = function(vertices, point) {\n                    var pointX = point.x, pointY = point.y, verticesLength = vertices.length, vertex = vertices[verticesLength - 1], nextVertex;\n                    for(var i = 0; i < verticesLength; i++){\n                        nextVertex = vertices[i];\n                        if ((pointX - vertex.x) * (nextVertex.y - vertex.y) + (pointY - vertex.y) * (vertex.x - nextVertex.x) > 0) return false;\n                        vertex = nextVertex;\n                    }\n                    return true;\n                };\n                /**\n     * Scales the vertices from a point (default is centre) in-place.\n     * @method scale\n     * @param {vertices} vertices\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     */ Vertices.scale = function(vertices, scaleX, scaleY, point) {\n                    if (scaleX === 1 && scaleY === 1) return vertices;\n                    point = point || Vertices.centre(vertices);\n                    var vertex, delta;\n                    for(var i = 0; i < vertices.length; i++){\n                        vertex = vertices[i];\n                        delta = Vector.sub(vertex, point);\n                        vertices[i].x = point.x + delta.x * scaleX;\n                        vertices[i].y = point.y + delta.y * scaleY;\n                    }\n                    return vertices;\n                };\n                /**\n     * Chamfers a set of vertices by giving them rounded corners, returns a new set of vertices.\n     * The radius parameter is a single number or an array to specify the radius for each vertex.\n     * @method chamfer\n     * @param {vertices} vertices\n     * @param {number[]} radius\n     * @param {number} quality\n     * @param {number} qualityMin\n     * @param {number} qualityMax\n     */ Vertices.chamfer = function(vertices, radius, quality, qualityMin, qualityMax) {\n                    if (typeof radius === \"number\") radius = [\n                        radius\n                    ];\n                    else radius = radius || [\n                        8\n                    ];\n                    // quality defaults to -1, which is auto\n                    quality = typeof quality !== \"undefined\" ? quality : -1;\n                    qualityMin = qualityMin || 2;\n                    qualityMax = qualityMax || 14;\n                    var newVertices = [];\n                    for(var i = 0; i < vertices.length; i++){\n                        var prevVertex = vertices[i - 1 >= 0 ? i - 1 : vertices.length - 1], vertex = vertices[i], nextVertex = vertices[(i + 1) % vertices.length], currentRadius = radius[i < radius.length ? i : radius.length - 1];\n                        if (currentRadius === 0) {\n                            newVertices.push(vertex);\n                            continue;\n                        }\n                        var prevNormal = Vector.normalise({\n                            x: vertex.y - prevVertex.y,\n                            y: prevVertex.x - vertex.x\n                        });\n                        var nextNormal = Vector.normalise({\n                            x: nextVertex.y - vertex.y,\n                            y: vertex.x - nextVertex.x\n                        });\n                        var diagonalRadius = Math.sqrt(2 * Math.pow(currentRadius, 2)), radiusVector = Vector.mult(Common.clone(prevNormal), currentRadius), midNormal = Vector.normalise(Vector.mult(Vector.add(prevNormal, nextNormal), 0.5)), scaledVertex = Vector.sub(vertex, Vector.mult(midNormal, diagonalRadius));\n                        var precision = quality;\n                        if (quality === -1) // automatically decide precision\n                        precision = Math.pow(currentRadius, 0.32) * 1.75;\n                        precision = Common.clamp(precision, qualityMin, qualityMax);\n                        // use an even value for precision, more likely to reduce axes by using symmetry\n                        if (precision % 2 === 1) precision += 1;\n                        var alpha = Math.acos(Vector.dot(prevNormal, nextNormal)), theta = alpha / precision;\n                        for(var j = 0; j < precision; j++)newVertices.push(Vector.add(Vector.rotate(radiusVector, theta * j), scaledVertex));\n                    }\n                    return newVertices;\n                };\n                /**\n     * Sorts the input vertices into clockwise order in place.\n     * @method clockwiseSort\n     * @param {vertices} vertices\n     * @return {vertices} vertices\n     */ Vertices.clockwiseSort = function(vertices) {\n                    var centre = Vertices.mean(vertices);\n                    vertices.sort(function(vertexA, vertexB) {\n                        return Vector.angle(centre, vertexA) - Vector.angle(centre, vertexB);\n                    });\n                    return vertices;\n                };\n                /**\n     * Returns true if the vertices form a convex shape (vertices must be in clockwise order).\n     * @method isConvex\n     * @param {vertices} vertices\n     * @return {bool} `true` if the `vertices` are convex, `false` if not (or `null` if not computable).\n     */ Vertices.isConvex = function(vertices) {\n                    // http://paulbourke.net/geometry/polygonmesh/\n                    // Copyright (c) Paul Bourke (use permitted)\n                    var flag = 0, n = vertices.length, i, j, k, z;\n                    if (n < 3) return null;\n                    for(i = 0; i < n; i++){\n                        j = (i + 1) % n;\n                        k = (i + 2) % n;\n                        z = (vertices[j].x - vertices[i].x) * (vertices[k].y - vertices[j].y);\n                        z -= (vertices[j].y - vertices[i].y) * (vertices[k].x - vertices[j].x);\n                        if (z < 0) flag |= 1;\n                        else if (z > 0) flag |= 2;\n                        if (flag === 3) return false;\n                    }\n                    if (flag !== 0) return true;\n                    else return null;\n                };\n                /**\n     * Returns the convex hull of the input vertices as a new array of points.\n     * @method hull\n     * @param {vertices} vertices\n     * @return [vertex] vertices\n     */ Vertices.hull = function(vertices) {\n                    // http://geomalgorithms.com/a10-_hull-1.html\n                    var upper = [], lower = [], vertex, i;\n                    // sort vertices on x-axis (y-axis for ties)\n                    vertices = vertices.slice(0);\n                    vertices.sort(function(vertexA, vertexB) {\n                        var dx = vertexA.x - vertexB.x;\n                        return dx !== 0 ? dx : vertexA.y - vertexB.y;\n                    });\n                    // build lower hull\n                    for(i = 0; i < vertices.length; i += 1){\n                        vertex = vertices[i];\n                        while(lower.length >= 2 && Vector.cross3(lower[lower.length - 2], lower[lower.length - 1], vertex) <= 0)lower.pop();\n                        lower.push(vertex);\n                    }\n                    // build upper hull\n                    for(i = vertices.length - 1; i >= 0; i -= 1){\n                        vertex = vertices[i];\n                        while(upper.length >= 2 && Vector.cross3(upper[upper.length - 2], upper[upper.length - 1], vertex) <= 0)upper.pop();\n                        upper.push(vertex);\n                    }\n                    // concatenation of the lower and upper hulls gives the convex hull\n                    // omit last points because they are repeated at the beginning of the other list\n                    upper.pop();\n                    lower.pop();\n                    return upper.concat(lower);\n                };\n            })();\n        /***/ },\n        /* 4 */ /***/ function(module1, exports, __webpack_require__) {\n            /**\n* The `Matter.Events` module contains methods to fire and listen to events on other objects.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Events\n*/ var Events = {};\n            module1.exports = Events;\n            var Common = __webpack_require__(0);\n            (function() {\n                /**\n     * Subscribes a callback function to the given object's `eventName`.\n     * @method on\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */ Events.on = function(object, eventNames, callback) {\n                    var names = eventNames.split(\" \"), name;\n                    for(var i = 0; i < names.length; i++){\n                        name = names[i];\n                        object.events = object.events || {};\n                        object.events[name] = object.events[name] || [];\n                        object.events[name].push(callback);\n                    }\n                    return callback;\n                };\n                /**\n     * Removes the given event callback. If no callback, clears all callbacks in `eventNames`. If no `eventNames`, clears all events.\n     * @method off\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */ Events.off = function(object, eventNames, callback) {\n                    if (!eventNames) {\n                        object.events = {};\n                        return;\n                    }\n                    // handle Events.off(object, callback)\n                    if (typeof eventNames === \"function\") {\n                        callback = eventNames;\n                        eventNames = Common.keys(object.events).join(\" \");\n                    }\n                    var names = eventNames.split(\" \");\n                    for(var i = 0; i < names.length; i++){\n                        var callbacks = object.events[names[i]], newCallbacks = [];\n                        if (callback && callbacks) {\n                            for(var j = 0; j < callbacks.length; j++)if (callbacks[j] !== callback) newCallbacks.push(callbacks[j]);\n                        }\n                        object.events[names[i]] = newCallbacks;\n                    }\n                };\n                /**\n     * Fires all the callbacks subscribed to the given object's `eventName`, in the order they subscribed, if any.\n     * @method trigger\n     * @param {} object\n     * @param {string} eventNames\n     * @param {} event\n     */ Events.trigger = function(object, eventNames, event) {\n                    var names, name, callbacks, eventClone;\n                    var events = object.events;\n                    if (events && Common.keys(events).length > 0) {\n                        if (!event) event = {};\n                        names = eventNames.split(\" \");\n                        for(var i = 0; i < names.length; i++){\n                            name = names[i];\n                            callbacks = events[name];\n                            if (callbacks) {\n                                eventClone = Common.clone(event, false);\n                                eventClone.name = name;\n                                eventClone.source = object;\n                                for(var j = 0; j < callbacks.length; j++)callbacks[j].apply(object, [\n                                    eventClone\n                                ]);\n                            }\n                        }\n                    }\n                };\n            })();\n        /***/ },\n        /* 5 */ /***/ function(module1, exports, __webpack_require__) {\n            /**\n* A composite is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite` objects.\n*\n* They are a container that can represent complex objects made of multiple parts, even if they are not physically connected.\n* A composite could contain anything from a single body all the way up to a whole world.\n* \n* When making any changes to composites, use the included functions rather than changing their properties directly.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composite\n*/ var Composite = {};\n            module1.exports = Composite;\n            var Events = __webpack_require__(4);\n            var Common = __webpack_require__(0);\n            var Bounds = __webpack_require__(1);\n            var Body = __webpack_require__(6);\n            (function() {\n                /**\n     * Creates a new composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properites section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} [options]\n     * @return {composite} A new composite\n     */ Composite.create = function(options) {\n                    return Common.extend({\n                        id: Common.nextId(),\n                        type: \"composite\",\n                        parent: null,\n                        isModified: false,\n                        bodies: [],\n                        constraints: [],\n                        composites: [],\n                        label: \"Composite\",\n                        plugin: {},\n                        cache: {\n                            allBodies: null,\n                            allConstraints: null,\n                            allComposites: null\n                        }\n                    }, options);\n                };\n                /**\n     * Sets the composite's `isModified` flag. \n     * If `updateParents` is true, all parents will be set (default: false).\n     * If `updateChildren` is true, all children will be set (default: false).\n     * @private\n     * @method setModified\n     * @param {composite} composite\n     * @param {boolean} isModified\n     * @param {boolean} [updateParents=false]\n     * @param {boolean} [updateChildren=false]\n     */ Composite.setModified = function(composite, isModified, updateParents, updateChildren) {\n                    composite.isModified = isModified;\n                    if (isModified && composite.cache) {\n                        composite.cache.allBodies = null;\n                        composite.cache.allConstraints = null;\n                        composite.cache.allComposites = null;\n                    }\n                    if (updateParents && composite.parent) Composite.setModified(composite.parent, isModified, updateParents, updateChildren);\n                    if (updateChildren) for(var i = 0; i < composite.composites.length; i++){\n                        var childComposite = composite.composites[i];\n                        Composite.setModified(childComposite, isModified, updateParents, updateChildren);\n                    }\n                };\n                /**\n     * Generic single or multi-add function. Adds a single or an array of body(s), constraint(s) or composite(s) to the given composite.\n     * Triggers `beforeAdd` and `afterAdd` events on the `composite`.\n     * @method add\n     * @param {composite} composite\n     * @param {object|array} object A single or an array of body(s), constraint(s) or composite(s)\n     * @return {composite} The original composite with the objects added\n     */ Composite.add = function(composite, object) {\n                    var objects = [].concat(object);\n                    Events.trigger(composite, \"beforeAdd\", {\n                        object: object\n                    });\n                    for(var i = 0; i < objects.length; i++){\n                        var obj = objects[i];\n                        switch(obj.type){\n                            case \"body\":\n                                // skip adding compound parts\n                                if (obj.parent !== obj) {\n                                    Common.warn(\"Composite.add: skipped adding a compound body part (you must add its parent instead)\");\n                                    break;\n                                }\n                                Composite.addBody(composite, obj);\n                                break;\n                            case \"constraint\":\n                                Composite.addConstraint(composite, obj);\n                                break;\n                            case \"composite\":\n                                Composite.addComposite(composite, obj);\n                                break;\n                            case \"mouseConstraint\":\n                                Composite.addConstraint(composite, obj.constraint);\n                                break;\n                        }\n                    }\n                    Events.trigger(composite, \"afterAdd\", {\n                        object: object\n                    });\n                    return composite;\n                };\n                /**\n     * Generic remove function. Removes one or many body(s), constraint(s) or a composite(s) to the given composite.\n     * Optionally searching its children recursively.\n     * Triggers `beforeRemove` and `afterRemove` events on the `composite`.\n     * @method remove\n     * @param {composite} composite\n     * @param {object|array} object\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the objects removed\n     */ Composite.remove = function(composite, object, deep) {\n                    var objects = [].concat(object);\n                    Events.trigger(composite, \"beforeRemove\", {\n                        object: object\n                    });\n                    for(var i = 0; i < objects.length; i++){\n                        var obj = objects[i];\n                        switch(obj.type){\n                            case \"body\":\n                                Composite.removeBody(composite, obj, deep);\n                                break;\n                            case \"constraint\":\n                                Composite.removeConstraint(composite, obj, deep);\n                                break;\n                            case \"composite\":\n                                Composite.removeComposite(composite, obj, deep);\n                                break;\n                            case \"mouseConstraint\":\n                                Composite.removeConstraint(composite, obj.constraint);\n                                break;\n                        }\n                    }\n                    Events.trigger(composite, \"afterRemove\", {\n                        object: object\n                    });\n                    return composite;\n                };\n                /**\n     * Adds a composite to the given composite.\n     * @private\n     * @method addComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @return {composite} The original compositeA with the objects from compositeB added\n     */ Composite.addComposite = function(compositeA, compositeB) {\n                    compositeA.composites.push(compositeB);\n                    compositeB.parent = compositeA;\n                    Composite.setModified(compositeA, true, true, false);\n                    return compositeA;\n                };\n                /**\n     * Removes a composite from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @param {boolean} [deep=false]\n     * @return {composite} The original compositeA with the composite removed\n     */ Composite.removeComposite = function(compositeA, compositeB, deep) {\n                    var position = Common.indexOf(compositeA.composites, compositeB);\n                    if (position !== -1) Composite.removeCompositeAt(compositeA, position);\n                    if (deep) for(var i = 0; i < compositeA.composites.length; i++)Composite.removeComposite(compositeA.composites[i], compositeB, true);\n                    return compositeA;\n                };\n                /**\n     * Removes a composite from the given composite.\n     * @private\n     * @method removeCompositeAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the composite removed\n     */ Composite.removeCompositeAt = function(composite, position) {\n                    composite.composites.splice(position, 1);\n                    Composite.setModified(composite, true, true, false);\n                    return composite;\n                };\n                /**\n     * Adds a body to the given composite.\n     * @private\n     * @method addBody\n     * @param {composite} composite\n     * @param {body} body\n     * @return {composite} The original composite with the body added\n     */ Composite.addBody = function(composite, body) {\n                    composite.bodies.push(body);\n                    Composite.setModified(composite, true, true, false);\n                    return composite;\n                };\n                /**\n     * Removes a body from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeBody\n     * @param {composite} composite\n     * @param {body} body\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the body removed\n     */ Composite.removeBody = function(composite, body, deep) {\n                    var position = Common.indexOf(composite.bodies, body);\n                    if (position !== -1) Composite.removeBodyAt(composite, position);\n                    if (deep) for(var i = 0; i < composite.composites.length; i++)Composite.removeBody(composite.composites[i], body, true);\n                    return composite;\n                };\n                /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeBodyAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the body removed\n     */ Composite.removeBodyAt = function(composite, position) {\n                    composite.bodies.splice(position, 1);\n                    Composite.setModified(composite, true, true, false);\n                    return composite;\n                };\n                /**\n     * Adds a constraint to the given composite.\n     * @private\n     * @method addConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @return {composite} The original composite with the constraint added\n     */ Composite.addConstraint = function(composite, constraint) {\n                    composite.constraints.push(constraint);\n                    Composite.setModified(composite, true, true, false);\n                    return composite;\n                };\n                /**\n     * Removes a constraint from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the constraint removed\n     */ Composite.removeConstraint = function(composite, constraint, deep) {\n                    var position = Common.indexOf(composite.constraints, constraint);\n                    if (position !== -1) Composite.removeConstraintAt(composite, position);\n                    if (deep) for(var i = 0; i < composite.composites.length; i++)Composite.removeConstraint(composite.composites[i], constraint, true);\n                    return composite;\n                };\n                /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeConstraintAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the constraint removed\n     */ Composite.removeConstraintAt = function(composite, position) {\n                    composite.constraints.splice(position, 1);\n                    Composite.setModified(composite, true, true, false);\n                    return composite;\n                };\n                /**\n     * Removes all bodies, constraints and composites from the given composite.\n     * Optionally clearing its children recursively.\n     * @method clear\n     * @param {composite} composite\n     * @param {boolean} keepStatic\n     * @param {boolean} [deep=false]\n     */ Composite.clear = function(composite, keepStatic, deep) {\n                    if (deep) for(var i = 0; i < composite.composites.length; i++)Composite.clear(composite.composites[i], keepStatic, true);\n                    if (keepStatic) composite.bodies = composite.bodies.filter(function(body) {\n                        return body.isStatic;\n                    });\n                    else composite.bodies.length = 0;\n                    composite.constraints.length = 0;\n                    composite.composites.length = 0;\n                    Composite.setModified(composite, true, true, false);\n                    return composite;\n                };\n                /**\n     * Returns all bodies in the given composite, including all bodies in its children, recursively.\n     * @method allBodies\n     * @param {composite} composite\n     * @return {body[]} All the bodies\n     */ Composite.allBodies = function(composite) {\n                    if (composite.cache && composite.cache.allBodies) return composite.cache.allBodies;\n                    var bodies = [].concat(composite.bodies);\n                    for(var i = 0; i < composite.composites.length; i++)bodies = bodies.concat(Composite.allBodies(composite.composites[i]));\n                    if (composite.cache) composite.cache.allBodies = bodies;\n                    return bodies;\n                };\n                /**\n     * Returns all constraints in the given composite, including all constraints in its children, recursively.\n     * @method allConstraints\n     * @param {composite} composite\n     * @return {constraint[]} All the constraints\n     */ Composite.allConstraints = function(composite) {\n                    if (composite.cache && composite.cache.allConstraints) return composite.cache.allConstraints;\n                    var constraints = [].concat(composite.constraints);\n                    for(var i = 0; i < composite.composites.length; i++)constraints = constraints.concat(Composite.allConstraints(composite.composites[i]));\n                    if (composite.cache) composite.cache.allConstraints = constraints;\n                    return constraints;\n                };\n                /**\n     * Returns all composites in the given composite, including all composites in its children, recursively.\n     * @method allComposites\n     * @param {composite} composite\n     * @return {composite[]} All the composites\n     */ Composite.allComposites = function(composite) {\n                    if (composite.cache && composite.cache.allComposites) return composite.cache.allComposites;\n                    var composites = [].concat(composite.composites);\n                    for(var i = 0; i < composite.composites.length; i++)composites = composites.concat(Composite.allComposites(composite.composites[i]));\n                    if (composite.cache) composite.cache.allComposites = composites;\n                    return composites;\n                };\n                /**\n     * Searches the composite recursively for an object matching the type and id supplied, null if not found.\n     * @method get\n     * @param {composite} composite\n     * @param {number} id\n     * @param {string} type\n     * @return {object} The requested object, if found\n     */ Composite.get = function(composite, id, type) {\n                    var objects, object;\n                    switch(type){\n                        case \"body\":\n                            objects = Composite.allBodies(composite);\n                            break;\n                        case \"constraint\":\n                            objects = Composite.allConstraints(composite);\n                            break;\n                        case \"composite\":\n                            objects = Composite.allComposites(composite).concat(composite);\n                            break;\n                    }\n                    if (!objects) return null;\n                    object = objects.filter(function(object) {\n                        return object.id.toString() === id.toString();\n                    });\n                    return object.length === 0 ? null : object[0];\n                };\n                /**\n     * Moves the given object(s) from compositeA to compositeB (equal to a remove followed by an add).\n     * @method move\n     * @param {compositeA} compositeA\n     * @param {object[]} objects\n     * @param {compositeB} compositeB\n     * @return {composite} Returns compositeA\n     */ Composite.move = function(compositeA, objects, compositeB) {\n                    Composite.remove(compositeA, objects);\n                    Composite.add(compositeB, objects);\n                    return compositeA;\n                };\n                /**\n     * Assigns new ids for all objects in the composite, recursively.\n     * @method rebase\n     * @param {composite} composite\n     * @return {composite} Returns composite\n     */ Composite.rebase = function(composite) {\n                    var objects = Composite.allBodies(composite).concat(Composite.allConstraints(composite)).concat(Composite.allComposites(composite));\n                    for(var i = 0; i < objects.length; i++)objects[i].id = Common.nextId();\n                    return composite;\n                };\n                /**\n     * Translates all children in the composite by a given vector relative to their current positions, \n     * without imparting any velocity.\n     * @method translate\n     * @param {composite} composite\n     * @param {vector} translation\n     * @param {bool} [recursive=true]\n     */ Composite.translate = function(composite, translation, recursive) {\n                    var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n                    for(var i = 0; i < bodies.length; i++)Body.translate(bodies[i], translation);\n                    return composite;\n                };\n                /**\n     * Rotates all children in the composite by a given angle about the given point, without imparting any angular velocity.\n     * @method rotate\n     * @param {composite} composite\n     * @param {number} rotation\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */ Composite.rotate = function(composite, rotation, point, recursive) {\n                    var cos = Math.cos(rotation), sin = Math.sin(rotation), bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n                    for(var i = 0; i < bodies.length; i++){\n                        var body = bodies[i], dx = body.position.x - point.x, dy = body.position.y - point.y;\n                        Body.setPosition(body, {\n                            x: point.x + (dx * cos - dy * sin),\n                            y: point.y + (dx * sin + dy * cos)\n                        });\n                        Body.rotate(body, rotation);\n                    }\n                    return composite;\n                };\n                /**\n     * Scales all children in the composite, including updating physical properties (mass, area, axes, inertia), from a world-space point.\n     * @method scale\n     * @param {composite} composite\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */ Composite.scale = function(composite, scaleX, scaleY, point, recursive) {\n                    var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n                    for(var i = 0; i < bodies.length; i++){\n                        var body = bodies[i], dx = body.position.x - point.x, dy = body.position.y - point.y;\n                        Body.setPosition(body, {\n                            x: point.x + dx * scaleX,\n                            y: point.y + dy * scaleY\n                        });\n                        Body.scale(body, scaleX, scaleY);\n                    }\n                    return composite;\n                };\n                /**\n     * Returns the union of the bounds of all of the composite's bodies.\n     * @method bounds\n     * @param {composite} composite The composite.\n     * @returns {bounds} The composite bounds.\n     */ Composite.bounds = function(composite) {\n                    var bodies = Composite.allBodies(composite), vertices = [];\n                    for(var i = 0; i < bodies.length; i += 1){\n                        var body = bodies[i];\n                        vertices.push(body.bounds.min, body.bounds.max);\n                    }\n                    return Bounds.create(vertices);\n                };\n            /*\n    *\n    *  Events Documentation\n    *\n    */ /**\n    * Fired when a call to `Composite.add` is made, before objects have been added.\n    *\n    * @event beforeAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */ /**\n    * Fired when a call to `Composite.add` is made, after objects have been added.\n    *\n    * @event afterAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */ /**\n    * Fired when a call to `Composite.remove` is made, before objects have been removed.\n    *\n    * @event beforeRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */ /**\n    * Fired when a call to `Composite.remove` is made, after objects have been removed.\n    *\n    * @event afterRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */ /*\n    *\n    *  Properties Documentation\n    *\n    */ /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */ /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"composite\"\n     * @readOnly\n     */ /**\n     * An arbitrary `String` name to help the user identify and manage composites.\n     *\n     * @property label\n     * @type string\n     * @default \"Composite\"\n     */ /**\n     * A flag that specifies whether the composite has been modified during the current step.\n     * This is automatically managed when bodies, constraints or composites are added or removed.\n     *\n     * @property isModified\n     * @type boolean\n     * @default false\n     */ /**\n     * The `Composite` that is the parent of this composite. It is automatically managed by the `Matter.Composite` methods.\n     *\n     * @property parent\n     * @type composite\n     * @default null\n     */ /**\n     * An array of `Body` that are _direct_ children of this composite.\n     * To add or remove bodies you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allBodies` method.\n     *\n     * @property bodies\n     * @type body[]\n     * @default []\n     */ /**\n     * An array of `Constraint` that are _direct_ children of this composite.\n     * To add or remove constraints you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allConstraints` method.\n     *\n     * @property constraints\n     * @type constraint[]\n     * @default []\n     */ /**\n     * An array of `Composite` that are _direct_ children of this composite.\n     * To add or remove composites you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allComposites` method.\n     *\n     * @property composites\n     * @type composite[]\n     * @default []\n     */ /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */ /**\n     * An object used for storing cached results for performance reasons.\n     * This is used internally only and is automatically managed.\n     *\n     * @private\n     * @property cache\n     * @type {}\n     */ })();\n        /***/ },\n        /* 6 */ /***/ function(module1, exports, __webpack_require__) {\n            /**\n* The `Matter.Body` module contains methods for creating and manipulating body models.\n* A `Matter.Body` is a rigid body that can be simulated by a `Matter.Engine`.\n* Factories for commonly used body configurations (such as rectangles, circles and other polygons) can be found in the module `Matter.Bodies`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n\n* @class Body\n*/ var Body = {};\n            module1.exports = Body;\n            var Vertices = __webpack_require__(3);\n            var Vector = __webpack_require__(2);\n            var Sleeping = __webpack_require__(7);\n            var Render = __webpack_require__(16);\n            var Common = __webpack_require__(0);\n            var Bounds = __webpack_require__(1);\n            var Axes = __webpack_require__(11);\n            (function() {\n                Body._inertiaScale = 4;\n                Body._nextCollidingGroupId = 1;\n                Body._nextNonCollidingGroupId = -1;\n                Body._nextCategory = 0x0001;\n                /**\n     * Creates a new rigid body model. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * Vertices must be specified in clockwise order.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {body} body\n     */ Body.create = function(options) {\n                    var defaults = {\n                        id: Common.nextId(),\n                        type: \"body\",\n                        label: \"Body\",\n                        parts: [],\n                        plugin: {},\n                        angle: 0,\n                        vertices: Vertices.fromPath(\"L 0 0 L 40 0 L 40 40 L 0 40\"),\n                        position: {\n                            x: 0,\n                            y: 0\n                        },\n                        force: {\n                            x: 0,\n                            y: 0\n                        },\n                        torque: 0,\n                        positionImpulse: {\n                            x: 0,\n                            y: 0\n                        },\n                        constraintImpulse: {\n                            x: 0,\n                            y: 0,\n                            angle: 0\n                        },\n                        totalContacts: 0,\n                        speed: 0,\n                        angularSpeed: 0,\n                        velocity: {\n                            x: 0,\n                            y: 0\n                        },\n                        angularVelocity: 0,\n                        isSensor: false,\n                        isStatic: false,\n                        isSleeping: false,\n                        motion: 0,\n                        sleepThreshold: 60,\n                        density: 0.001,\n                        restitution: 0,\n                        friction: 0.1,\n                        frictionStatic: 0.5,\n                        frictionAir: 0.01,\n                        collisionFilter: {\n                            category: 0x0001,\n                            mask: 0xFFFFFFFF,\n                            group: 0\n                        },\n                        slop: 0.05,\n                        timeScale: 1,\n                        render: {\n                            visible: true,\n                            opacity: 1,\n                            strokeStyle: null,\n                            fillStyle: null,\n                            lineWidth: null,\n                            sprite: {\n                                xScale: 1,\n                                yScale: 1,\n                                xOffset: 0,\n                                yOffset: 0\n                            }\n                        },\n                        events: null,\n                        bounds: null,\n                        chamfer: null,\n                        circleRadius: 0,\n                        positionPrev: null,\n                        anglePrev: 0,\n                        parent: null,\n                        axes: null,\n                        area: 0,\n                        mass: 0,\n                        inertia: 0,\n                        _original: null\n                    };\n                    var body = Common.extend(defaults, options);\n                    _initProperties(body, options);\n                    return body;\n                };\n                /**\n     * Returns the next unique group index for which bodies will collide.\n     * If `isNonColliding` is `true`, returns the next unique group index for which bodies will _not_ collide.\n     * See `body.collisionFilter` for more information.\n     * @method nextGroup\n     * @param {bool} [isNonColliding=false]\n     * @return {Number} Unique group index\n     */ Body.nextGroup = function(isNonColliding) {\n                    if (isNonColliding) return Body._nextNonCollidingGroupId--;\n                    return Body._nextCollidingGroupId++;\n                };\n                /**\n     * Returns the next unique category bitfield (starting after the initial default category `0x0001`).\n     * There are 32 available. See `body.collisionFilter` for more information.\n     * @method nextCategory\n     * @return {Number} Unique category bitfield\n     */ Body.nextCategory = function() {\n                    Body._nextCategory = Body._nextCategory << 1;\n                    return Body._nextCategory;\n                };\n                /**\n     * Initialises body properties.\n     * @method _initProperties\n     * @private\n     * @param {body} body\n     * @param {} [options]\n     */ var _initProperties = function(body, options) {\n                    options = options || {};\n                    // init required properties (order is important)\n                    Body.set(body, {\n                        bounds: body.bounds || Bounds.create(body.vertices),\n                        positionPrev: body.positionPrev || Vector.clone(body.position),\n                        anglePrev: body.anglePrev || body.angle,\n                        vertices: body.vertices,\n                        parts: body.parts || [\n                            body\n                        ],\n                        isStatic: body.isStatic,\n                        isSleeping: body.isSleeping,\n                        parent: body.parent || body\n                    });\n                    Vertices.rotate(body.vertices, body.angle, body.position);\n                    Axes.rotate(body.axes, body.angle);\n                    Bounds.update(body.bounds, body.vertices, body.velocity);\n                    // allow options to override the automatically calculated properties\n                    Body.set(body, {\n                        axes: options.axes || body.axes,\n                        area: options.area || body.area,\n                        mass: options.mass || body.mass,\n                        inertia: options.inertia || body.inertia\n                    });\n                    // render properties\n                    var defaultFillStyle = body.isStatic ? \"#14151f\" : Common.choose([\n                        \"#f19648\",\n                        \"#f5d259\",\n                        \"#f55a3c\",\n                        \"#063e7b\",\n                        \"#ececd1\"\n                    ]), defaultStrokeStyle = body.isStatic ? \"#555\" : \"#ccc\", defaultLineWidth = body.isStatic && body.render.fillStyle === null ? 1 : 0;\n                    body.render.fillStyle = body.render.fillStyle || defaultFillStyle;\n                    body.render.strokeStyle = body.render.strokeStyle || defaultStrokeStyle;\n                    body.render.lineWidth = body.render.lineWidth || defaultLineWidth;\n                    body.render.sprite.xOffset += -(body.bounds.min.x - body.position.x) / (body.bounds.max.x - body.bounds.min.x);\n                    body.render.sprite.yOffset += -(body.bounds.min.y - body.position.y) / (body.bounds.max.y - body.bounds.min.y);\n                };\n                /**\n     * Given a property and a value (or map of), sets the property(s) on the body, using the appropriate setter functions if they exist.\n     * Prefer to use the actual setter functions in performance critical situations.\n     * @method set\n     * @param {body} body\n     * @param {} settings A property name (or map of properties and values) to set on the body.\n     * @param {} value The value to set if `settings` is a single property name.\n     */ Body.set = function(body, settings, value) {\n                    var property;\n                    if (typeof settings === \"string\") {\n                        property = settings;\n                        settings = {};\n                        settings[property] = value;\n                    }\n                    for(property in settings){\n                        if (!Object.prototype.hasOwnProperty.call(settings, property)) continue;\n                        value = settings[property];\n                        switch(property){\n                            case \"isStatic\":\n                                Body.setStatic(body, value);\n                                break;\n                            case \"isSleeping\":\n                                Sleeping.set(body, value);\n                                break;\n                            case \"mass\":\n                                Body.setMass(body, value);\n                                break;\n                            case \"density\":\n                                Body.setDensity(body, value);\n                                break;\n                            case \"inertia\":\n                                Body.setInertia(body, value);\n                                break;\n                            case \"vertices\":\n                                Body.setVertices(body, value);\n                                break;\n                            case \"position\":\n                                Body.setPosition(body, value);\n                                break;\n                            case \"angle\":\n                                Body.setAngle(body, value);\n                                break;\n                            case \"velocity\":\n                                Body.setVelocity(body, value);\n                                break;\n                            case \"angularVelocity\":\n                                Body.setAngularVelocity(body, value);\n                                break;\n                            case \"parts\":\n                                Body.setParts(body, value);\n                                break;\n                            case \"centre\":\n                                Body.setCentre(body, value);\n                                break;\n                            default:\n                                body[property] = value;\n                        }\n                    }\n                };\n                /**\n     * Sets the body as static, including isStatic flag and setting mass and inertia to Infinity.\n     * @method setStatic\n     * @param {body} body\n     * @param {bool} isStatic\n     */ Body.setStatic = function(body, isStatic) {\n                    for(var i = 0; i < body.parts.length; i++){\n                        var part = body.parts[i];\n                        part.isStatic = isStatic;\n                        if (isStatic) {\n                            part._original = {\n                                restitution: part.restitution,\n                                friction: part.friction,\n                                mass: part.mass,\n                                inertia: part.inertia,\n                                density: part.density,\n                                inverseMass: part.inverseMass,\n                                inverseInertia: part.inverseInertia\n                            };\n                            part.restitution = 0;\n                            part.friction = 1;\n                            part.mass = part.inertia = part.density = Infinity;\n                            part.inverseMass = part.inverseInertia = 0;\n                            part.positionPrev.x = part.position.x;\n                            part.positionPrev.y = part.position.y;\n                            part.anglePrev = part.angle;\n                            part.angularVelocity = 0;\n                            part.speed = 0;\n                            part.angularSpeed = 0;\n                            part.motion = 0;\n                        } else if (part._original) {\n                            part.restitution = part._original.restitution;\n                            part.friction = part._original.friction;\n                            part.mass = part._original.mass;\n                            part.inertia = part._original.inertia;\n                            part.density = part._original.density;\n                            part.inverseMass = part._original.inverseMass;\n                            part.inverseInertia = part._original.inverseInertia;\n                            part._original = null;\n                        }\n                    }\n                };\n                /**\n     * Sets the mass of the body. Inverse mass, density and inertia are automatically updated to reflect the change.\n     * @method setMass\n     * @param {body} body\n     * @param {number} mass\n     */ Body.setMass = function(body, mass) {\n                    var moment = body.inertia / (body.mass / 6);\n                    body.inertia = moment * (mass / 6);\n                    body.inverseInertia = 1 / body.inertia;\n                    body.mass = mass;\n                    body.inverseMass = 1 / body.mass;\n                    body.density = body.mass / body.area;\n                };\n                /**\n     * Sets the density of the body. Mass and inertia are automatically updated to reflect the change.\n     * @method setDensity\n     * @param {body} body\n     * @param {number} density\n     */ Body.setDensity = function(body, density) {\n                    Body.setMass(body, density * body.area);\n                    body.density = density;\n                };\n                /**\n     * Sets the moment of inertia (i.e. second moment of area) of the body. \n     * Inverse inertia is automatically updated to reflect the change. Mass is not changed.\n     * @method setInertia\n     * @param {body} body\n     * @param {number} inertia\n     */ Body.setInertia = function(body, inertia) {\n                    body.inertia = inertia;\n                    body.inverseInertia = 1 / body.inertia;\n                };\n                /**\n     * Sets the body's vertices and updates body properties accordingly, including inertia, area and mass (with respect to `body.density`).\n     * Vertices will be automatically transformed to be orientated around their centre of mass as the origin.\n     * They are then automatically translated to world space based on `body.position`.\n     *\n     * The `vertices` argument should be passed as an array of `Matter.Vector` points (or a `Matter.Vertices` array).\n     * Vertices must form a convex hull, concave hulls are not supported.\n     *\n     * @method setVertices\n     * @param {body} body\n     * @param {vector[]} vertices\n     */ Body.setVertices = function(body, vertices) {\n                    // change vertices\n                    if (vertices[0].body === body) body.vertices = vertices;\n                    else body.vertices = Vertices.create(vertices, body);\n                    // update properties\n                    body.axes = Axes.fromVertices(body.vertices);\n                    body.area = Vertices.area(body.vertices);\n                    Body.setMass(body, body.density * body.area);\n                    // orient vertices around the centre of mass at origin (0, 0)\n                    var centre = Vertices.centre(body.vertices);\n                    Vertices.translate(body.vertices, centre, -1);\n                    // update inertia while vertices are at origin (0, 0)\n                    Body.setInertia(body, Body._inertiaScale * Vertices.inertia(body.vertices, body.mass));\n                    // update geometry\n                    Vertices.translate(body.vertices, body.position);\n                    Bounds.update(body.bounds, body.vertices, body.velocity);\n                };\n                /**\n     * Sets the parts of the `body` and updates mass, inertia and centroid.\n     * Each part will have its parent set to `body`.\n     * By default the convex hull will be automatically computed and set on `body`, unless `autoHull` is set to `false.`\n     * Note that this method will ensure that the first part in `body.parts` will always be the `body`.\n     * @method setParts\n     * @param {body} body\n     * @param [body] parts\n     * @param {bool} [autoHull=true]\n     */ Body.setParts = function(body, parts, autoHull) {\n                    var i;\n                    // add all the parts, ensuring that the first part is always the parent body\n                    parts = parts.slice(0);\n                    body.parts.length = 0;\n                    body.parts.push(body);\n                    body.parent = body;\n                    for(i = 0; i < parts.length; i++){\n                        var part = parts[i];\n                        if (part !== body) {\n                            part.parent = body;\n                            body.parts.push(part);\n                        }\n                    }\n                    if (body.parts.length === 1) return;\n                    autoHull = typeof autoHull !== \"undefined\" ? autoHull : true;\n                    // find the convex hull of all parts to set on the parent body\n                    if (autoHull) {\n                        var vertices = [];\n                        for(i = 0; i < parts.length; i++)vertices = vertices.concat(parts[i].vertices);\n                        Vertices.clockwiseSort(vertices);\n                        var hull = Vertices.hull(vertices), hullCentre = Vertices.centre(hull);\n                        Body.setVertices(body, hull);\n                        Vertices.translate(body.vertices, hullCentre);\n                    }\n                    // sum the properties of all compound parts of the parent body\n                    var total = Body._totalProperties(body);\n                    body.area = total.area;\n                    body.parent = body;\n                    body.position.x = total.centre.x;\n                    body.position.y = total.centre.y;\n                    body.positionPrev.x = total.centre.x;\n                    body.positionPrev.y = total.centre.y;\n                    Body.setMass(body, total.mass);\n                    Body.setInertia(body, total.inertia);\n                    Body.setPosition(body, total.centre);\n                };\n                /**\n     * Set the centre of mass of the body. \n     * The `centre` is a vector in world-space unless `relative` is set, in which case it is a translation.\n     * The centre of mass is the point the body rotates about and can be used to simulate non-uniform density.\n     * This is equal to moving `body.position` but not the `body.vertices`.\n     * Invalid if the `centre` falls outside the body's convex hull.\n     * @method setCentre\n     * @param {body} body\n     * @param {vector} centre\n     * @param {bool} relative\n     */ Body.setCentre = function(body, centre, relative) {\n                    if (!relative) {\n                        body.positionPrev.x = centre.x - (body.position.x - body.positionPrev.x);\n                        body.positionPrev.y = centre.y - (body.position.y - body.positionPrev.y);\n                        body.position.x = centre.x;\n                        body.position.y = centre.y;\n                    } else {\n                        body.positionPrev.x += centre.x;\n                        body.positionPrev.y += centre.y;\n                        body.position.x += centre.x;\n                        body.position.y += centre.y;\n                    }\n                };\n                /**\n     * Sets the position of the body instantly. Velocity, angle, force etc. are unchanged.\n     * @method setPosition\n     * @param {body} body\n     * @param {vector} position\n     */ Body.setPosition = function(body, position) {\n                    var delta = Vector.sub(position, body.position);\n                    body.positionPrev.x += delta.x;\n                    body.positionPrev.y += delta.y;\n                    for(var i = 0; i < body.parts.length; i++){\n                        var part = body.parts[i];\n                        part.position.x += delta.x;\n                        part.position.y += delta.y;\n                        Vertices.translate(part.vertices, delta);\n                        Bounds.update(part.bounds, part.vertices, body.velocity);\n                    }\n                };\n                /**\n     * Sets the angle of the body instantly. Angular velocity, position, force etc. are unchanged.\n     * @method setAngle\n     * @param {body} body\n     * @param {number} angle\n     */ Body.setAngle = function(body, angle) {\n                    var delta = angle - body.angle;\n                    body.anglePrev += delta;\n                    for(var i = 0; i < body.parts.length; i++){\n                        var part = body.parts[i];\n                        part.angle += delta;\n                        Vertices.rotate(part.vertices, delta, body.position);\n                        Axes.rotate(part.axes, delta);\n                        Bounds.update(part.bounds, part.vertices, body.velocity);\n                        if (i > 0) Vector.rotateAbout(part.position, delta, body.position, part.position);\n                    }\n                };\n                /**\n     * Sets the linear velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setVelocity\n     * @param {body} body\n     * @param {vector} velocity\n     */ Body.setVelocity = function(body, velocity) {\n                    body.positionPrev.x = body.position.x - velocity.x;\n                    body.positionPrev.y = body.position.y - velocity.y;\n                    body.velocity.x = velocity.x;\n                    body.velocity.y = velocity.y;\n                    body.speed = Vector.magnitude(body.velocity);\n                };\n                /**\n     * Sets the angular velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setAngularVelocity\n     * @param {body} body\n     * @param {number} velocity\n     */ Body.setAngularVelocity = function(body, velocity) {\n                    body.anglePrev = body.angle - velocity;\n                    body.angularVelocity = velocity;\n                    body.angularSpeed = Math.abs(body.angularVelocity);\n                };\n                /**\n     * Moves a body by a given vector relative to its current position, without imparting any velocity.\n     * @method translate\n     * @param {body} body\n     * @param {vector} translation\n     */ Body.translate = function(body, translation) {\n                    Body.setPosition(body, Vector.add(body.position, translation));\n                };\n                /**\n     * Rotates a body by a given angle relative to its current angle, without imparting any angular velocity.\n     * @method rotate\n     * @param {body} body\n     * @param {number} rotation\n     * @param {vector} [point]\n     */ Body.rotate = function(body, rotation, point) {\n                    if (!point) Body.setAngle(body, body.angle + rotation);\n                    else {\n                        var cos = Math.cos(rotation), sin = Math.sin(rotation), dx = body.position.x - point.x, dy = body.position.y - point.y;\n                        Body.setPosition(body, {\n                            x: point.x + (dx * cos - dy * sin),\n                            y: point.y + (dx * sin + dy * cos)\n                        });\n                        Body.setAngle(body, body.angle + rotation);\n                    }\n                };\n                /**\n     * Scales the body, including updating physical properties (mass, area, axes, inertia), from a world-space point (default is body centre).\n     * @method scale\n     * @param {body} body\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} [point]\n     */ Body.scale = function(body, scaleX, scaleY, point) {\n                    var totalArea = 0, totalInertia = 0;\n                    point = point || body.position;\n                    for(var i = 0; i < body.parts.length; i++){\n                        var part = body.parts[i];\n                        // scale vertices\n                        Vertices.scale(part.vertices, scaleX, scaleY, point);\n                        // update properties\n                        part.axes = Axes.fromVertices(part.vertices);\n                        part.area = Vertices.area(part.vertices);\n                        Body.setMass(part, body.density * part.area);\n                        // update inertia (requires vertices to be at origin)\n                        Vertices.translate(part.vertices, {\n                            x: -part.position.x,\n                            y: -part.position.y\n                        });\n                        Body.setInertia(part, Body._inertiaScale * Vertices.inertia(part.vertices, part.mass));\n                        Vertices.translate(part.vertices, {\n                            x: part.position.x,\n                            y: part.position.y\n                        });\n                        if (i > 0) {\n                            totalArea += part.area;\n                            totalInertia += part.inertia;\n                        }\n                        // scale position\n                        part.position.x = point.x + (part.position.x - point.x) * scaleX;\n                        part.position.y = point.y + (part.position.y - point.y) * scaleY;\n                        // update bounds\n                        Bounds.update(part.bounds, part.vertices, body.velocity);\n                    }\n                    // handle parent body\n                    if (body.parts.length > 1) {\n                        body.area = totalArea;\n                        if (!body.isStatic) {\n                            Body.setMass(body, body.density * totalArea);\n                            Body.setInertia(body, totalInertia);\n                        }\n                    }\n                    // handle circles\n                    if (body.circleRadius) {\n                        if (scaleX === scaleY) body.circleRadius *= scaleX;\n                        else // body is no longer a circle\n                        body.circleRadius = null;\n                    }\n                };\n                /**\n     * Performs a simulation step for the given `body`, including updating position and angle using Verlet integration.\n     * @method update\n     * @param {body} body\n     * @param {number} deltaTime\n     * @param {number} timeScale\n     * @param {number} correction\n     */ Body.update = function(body, deltaTime, timeScale, correction) {\n                    var deltaTimeSquared = Math.pow(deltaTime * timeScale * body.timeScale, 2);\n                    // from the previous step\n                    var frictionAir = 1 - body.frictionAir * timeScale * body.timeScale, velocityPrevX = body.position.x - body.positionPrev.x, velocityPrevY = body.position.y - body.positionPrev.y;\n                    // update velocity with Verlet integration\n                    body.velocity.x = velocityPrevX * frictionAir * correction + body.force.x / body.mass * deltaTimeSquared;\n                    body.velocity.y = velocityPrevY * frictionAir * correction + body.force.y / body.mass * deltaTimeSquared;\n                    body.positionPrev.x = body.position.x;\n                    body.positionPrev.y = body.position.y;\n                    body.position.x += body.velocity.x;\n                    body.position.y += body.velocity.y;\n                    // update angular velocity with Verlet integration\n                    body.angularVelocity = (body.angle - body.anglePrev) * frictionAir * correction + body.torque / body.inertia * deltaTimeSquared;\n                    body.anglePrev = body.angle;\n                    body.angle += body.angularVelocity;\n                    // track speed and acceleration\n                    body.speed = Vector.magnitude(body.velocity);\n                    body.angularSpeed = Math.abs(body.angularVelocity);\n                    // transform the body geometry\n                    for(var i = 0; i < body.parts.length; i++){\n                        var part = body.parts[i];\n                        Vertices.translate(part.vertices, body.velocity);\n                        if (i > 0) {\n                            part.position.x += body.velocity.x;\n                            part.position.y += body.velocity.y;\n                        }\n                        if (body.angularVelocity !== 0) {\n                            Vertices.rotate(part.vertices, body.angularVelocity, body.position);\n                            Axes.rotate(part.axes, body.angularVelocity);\n                            if (i > 0) Vector.rotateAbout(part.position, body.angularVelocity, body.position, part.position);\n                        }\n                        Bounds.update(part.bounds, part.vertices, body.velocity);\n                    }\n                };\n                /**\n     * Applies a force to a body from a given world-space position, including resulting torque.\n     * @method applyForce\n     * @param {body} body\n     * @param {vector} position\n     * @param {vector} force\n     */ Body.applyForce = function(body, position, force) {\n                    body.force.x += force.x;\n                    body.force.y += force.y;\n                    var offset = {\n                        x: position.x - body.position.x,\n                        y: position.y - body.position.y\n                    };\n                    body.torque += offset.x * force.y - offset.y * force.x;\n                };\n                /**\n     * Returns the sums of the properties of all compound parts of the parent body.\n     * @method _totalProperties\n     * @private\n     * @param {body} body\n     * @return {}\n     */ Body._totalProperties = function(body) {\n                    // from equations at:\n                    // https://ecourses.ou.edu/cgi-bin/ebook.cgi?doc=&topic=st&chap_sec=07.2&page=theory\n                    // http://output.to/sideway/default.asp?qno=121100087\n                    var properties = {\n                        mass: 0,\n                        area: 0,\n                        inertia: 0,\n                        centre: {\n                            x: 0,\n                            y: 0\n                        }\n                    };\n                    // sum the properties of all compound parts of the parent body\n                    for(var i = body.parts.length === 1 ? 0 : 1; i < body.parts.length; i++){\n                        var part = body.parts[i], mass = part.mass !== Infinity ? part.mass : 1;\n                        properties.mass += mass;\n                        properties.area += part.area;\n                        properties.inertia += part.inertia;\n                        properties.centre = Vector.add(properties.centre, Vector.mult(part.position, mass));\n                    }\n                    properties.centre = Vector.div(properties.centre, properties.mass);\n                    return properties;\n                };\n            /*\n    *\n    *  Events Documentation\n    *\n    */ /**\n    * Fired when a body starts sleeping (where `this` is the body).\n    *\n    * @event sleepStart\n    * @this {body} The body that has started sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */ /**\n    * Fired when a body ends sleeping (where `this` is the body).\n    *\n    * @event sleepEnd\n    * @this {body} The body that has ended sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */ /*\n    *\n    *  Properties Documentation\n    *\n    */ /**\n     * An integer `Number` uniquely identifying number generated in `Body.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */ /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"body\"\n     * @readOnly\n     */ /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Body\"\n     */ /**\n     * An array of bodies that make up this body. \n     * The first body in the array must always be a self reference to the current body instance.\n     * All bodies in the `parts` array together form a single rigid compound body.\n     * Parts are allowed to overlap, have gaps or holes or even form concave bodies.\n     * Parts themselves should never be added to a `World`, only the parent body should be.\n     * Use `Body.setParts` when setting parts to ensure correct updates of all properties.\n     *\n     * @property parts\n     * @type body[]\n     */ /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */ /**\n     * A self reference if the body is _not_ a part of another body.\n     * Otherwise this is a reference to the body that this is a part of.\n     * See `body.parts`.\n     *\n     * @property parent\n     * @type body\n     */ /**\n     * A `Number` specifying the angle of the body, in radians.\n     *\n     * @property angle\n     * @type number\n     * @default 0\n     */ /**\n     * An array of `Vector` objects that specify the convex hull of the rigid body.\n     * These should be provided about the origin `(0, 0)`. E.g.\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * When passed via `Body.create`, the vertices are translated relative to `body.position` (i.e. world-space, and constantly updated by `Body.update` during simulation).\n     * The `Vector` objects are also augmented with additional properties required for efficient collision detection. \n     *\n     * Other properties such as `inertia` and `bounds` are automatically calculated from the passed vertices (unless provided via `options`).\n     * Concave hulls are not currently supported. The module `Matter.Vertices` contains useful methods for working with vertices.\n     *\n     * @property vertices\n     * @type vector[]\n     */ /**\n     * A `Vector` that specifies the current world-space position of the body.\n     *\n     * @property position\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */ /**\n     * A `Vector` that specifies the force to apply in the current step. It is zeroed after every `Body.update`. See also `Body.applyForce`.\n     *\n     * @property force\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */ /**\n     * A `Number` that specifies the torque (turning force) to apply in the current step. It is zeroed after every `Body.update`.\n     *\n     * @property torque\n     * @type number\n     * @default 0\n     */ /**\n     * A `Number` that _measures_ the current speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.velocity`).\n     *\n     * @readOnly\n     * @property speed\n     * @type number\n     * @default 0\n     */ /**\n     * A `Number` that _measures_ the current angular speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.angularVelocity`).\n     *\n     * @readOnly\n     * @property angularSpeed\n     * @type number\n     * @default 0\n     */ /**\n     * A `Vector` that _measures_ the current velocity of the body after the last `Body.update`. It is read-only. \n     * If you need to modify a body's velocity directly, you should either apply a force or simply change the body's `position` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property velocity\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */ /**\n     * A `Number` that _measures_ the current angular velocity of the body after the last `Body.update`. It is read-only. \n     * If you need to modify a body's angular velocity directly, you should apply a torque or simply change the body's `angle` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property angularVelocity\n     * @type number\n     * @default 0\n     */ /**\n     * A flag that indicates whether a body is considered static. A static body can never change position or angle and is completely fixed.\n     * If you need to set a body as static after its creation, you should use `Body.setStatic` as this requires more than just setting this flag.\n     *\n     * @property isStatic\n     * @type boolean\n     * @default false\n     */ /**\n     * A flag that indicates whether a body is a sensor. Sensor triggers collision events, but doesn't react with colliding body physically.\n     *\n     * @property isSensor\n     * @type boolean\n     * @default false\n     */ /**\n     * A flag that indicates whether the body is considered sleeping. A sleeping body acts similar to a static body, except it is only temporary and can be awoken.\n     * If you need to set a body as sleeping, you should use `Sleeping.set` as this requires more than just setting this flag.\n     *\n     * @property isSleeping\n     * @type boolean\n     * @default false\n     */ /**\n     * A `Number` that _measures_ the amount of movement a body currently has (a combination of `speed` and `angularSpeed`). It is read-only and always positive.\n     * It is used and updated by the `Matter.Sleeping` module during simulation to decide if a body has come to rest.\n     *\n     * @readOnly\n     * @property motion\n     * @type number\n     * @default 0\n     */ /**\n     * A `Number` that defines the number of updates in which this body must have near-zero velocity before it is set as sleeping by the `Matter.Sleeping` module (if sleeping is enabled by the engine).\n     *\n     * @property sleepThreshold\n     * @type number\n     * @default 60\n     */ /**\n     * A `Number` that defines the density of the body, that is its mass per unit area.\n     * If you pass the density via `Body.create` the `mass` property is automatically calculated for you based on the size (area) of the object.\n     * This is generally preferable to simply setting mass and allows for more intuitive definition of materials (e.g. rock has a higher density than wood).\n     *\n     * @property density\n     * @type number\n     * @default 0.001\n     */ /**\n     * A `Number` that defines the mass of the body, although it may be more appropriate to specify the `density` property instead.\n     * If you modify this value, you must also modify the `body.inverseMass` property (`1 / mass`).\n     *\n     * @property mass\n     * @type number\n     */ /**\n     * A `Number` that defines the inverse mass of the body (`1 / mass`).\n     * If you modify this value, you must also modify the `body.mass` property.\n     *\n     * @property inverseMass\n     * @type number\n     */ /**\n     * A `Number` that defines the moment of inertia (i.e. second moment of area) of the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) and density in `Body.create`.\n     * If you modify this value, you must also modify the `body.inverseInertia` property (`1 / inertia`).\n     *\n     * @property inertia\n     * @type number\n     */ /**\n     * A `Number` that defines the inverse moment of inertia of the body (`1 / inertia`).\n     * If you modify this value, you must also modify the `body.inertia` property.\n     *\n     * @property inverseInertia\n     * @type number\n     */ /**\n     * A `Number` that defines the restitution (elasticity) of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means collisions may be perfectly inelastic and no bouncing may occur. \n     * A value of `0.8` means the body may bounce back with approximately 80% of its kinetic energy.\n     * Note that collision response is based on _pairs_ of bodies, and that `restitution` values are _combined_ with the following formula:\n     *\n     *     Math.max(bodyA.restitution, bodyB.restitution)\n     *\n     * @property restitution\n     * @type number\n     * @default 0\n     */ /**\n     * A `Number` that defines the friction of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means that the body may slide indefinitely.\n     * A value of `1` means the body may come to a stop almost instantly after a force is applied.\n     *\n     * The effects of the value may be non-linear. \n     * High values may be unstable depending on the body.\n     * The engine uses a Coulomb friction model including static and kinetic friction.\n     * Note that collision response is based on _pairs_ of bodies, and that `friction` values are _combined_ with the following formula:\n     *\n     *     Math.min(bodyA.friction, bodyB.friction)\n     *\n     * @property friction\n     * @type number\n     * @default 0.1\n     */ /**\n     * A `Number` that defines the static friction of the body (in the Coulomb friction model). \n     * A value of `0` means the body will never 'stick' when it is nearly stationary and only dynamic `friction` is used.\n     * The higher the value (e.g. `10`), the more force it will take to initially get the body moving when nearly stationary.\n     * This value is multiplied with the `friction` property to make it easier to change `friction` and maintain an appropriate amount of static friction.\n     *\n     * @property frictionStatic\n     * @type number\n     * @default 0.5\n     */ /**\n     * A `Number` that defines the air friction of the body (air resistance). \n     * A value of `0` means the body will never slow as it moves through space.\n     * The higher the value, the faster a body slows when moving through space.\n     * The effects of the value are non-linear. \n     *\n     * @property frictionAir\n     * @type number\n     * @default 0.01\n     */ /**\n     * An `Object` that specifies the collision filtering properties of this body.\n     *\n     * Collisions between two bodies will obey the following rules:\n     * - If the two bodies have the same non-zero value of `collisionFilter.group`,\n     *   they will always collide if the value is positive, and they will never collide\n     *   if the value is negative.\n     * - If the two bodies have different values of `collisionFilter.group` or if one\n     *   (or both) of the bodies has a value of 0, then the category/mask rules apply as follows:\n     *\n     * Each body belongs to a collision category, given by `collisionFilter.category`. This\n     * value is used as a bit field and the category should have only one bit set, meaning that\n     * the value of this property is a power of two in the range [1, 2^31]. Thus, there are 32\n     * different collision categories available.\n     *\n     * Each body also defines a collision bitmask, given by `collisionFilter.mask` which specifies\n     * the categories it collides with (the value is the bitwise AND value of all these categories).\n     *\n     * Using the category/mask rules, two bodies `A` and `B` collide if each includes the other's\n     * category in its mask, i.e. `(categoryA & maskB) !== 0` and `(categoryB & maskA) !== 0`\n     * are both true.\n     *\n     * @property collisionFilter\n     * @type object\n     */ /**\n     * An Integer `Number`, that specifies the collision group this body belongs to.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.group\n     * @type object\n     * @default 0\n     */ /**\n     * A bit field that specifies the collision category this body belongs to.\n     * The category value should have only one bit set, for example `0x0001`.\n     * This means there are up to 32 unique collision categories available.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.category\n     * @type object\n     * @default 1\n     */ /**\n     * A bit mask that specifies the collision categories this body may collide with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.mask\n     * @type object\n     * @default -1\n     */ /**\n     * A `Number` that specifies a tolerance on how far a body is allowed to 'sink' or rotate into other bodies.\n     * Avoid changing this value unless you understand the purpose of `slop` in physics engines.\n     * The default should generally suffice, although very large bodies may require larger values for stable stacking.\n     *\n     * @property slop\n     * @type number\n     * @default 0.05\n     */ /**\n     * A `Number` that allows per-body time scaling, e.g. a force-field where bodies inside are in slow-motion, while others are at full speed.\n     *\n     * @property timeScale\n     * @type number\n     * @default 1\n     */ /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */ /**\n     * A flag that indicates if the body should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */ /**\n     * Sets the opacity to use when rendering.\n     *\n     * @property render.opacity\n     * @type number\n     * @default 1\n    */ /**\n     * An `Object` that defines the sprite properties to use when rendering, if any.\n     *\n     * @property render.sprite\n     * @type object\n     */ /**\n     * An `String` that defines the path to the image to use as the sprite texture, if any.\n     *\n     * @property render.sprite.texture\n     * @type string\n     */ /**\n     * A `Number` that defines the scaling in the x-axis for the sprite, if any.\n     *\n     * @property render.sprite.xScale\n     * @type number\n     * @default 1\n     */ /**\n     * A `Number` that defines the scaling in the y-axis for the sprite, if any.\n     *\n     * @property render.sprite.yScale\n     * @type number\n     * @default 1\n     */ /**\n      * A `Number` that defines the offset in the x-axis for the sprite (normalised by texture width).\n      *\n      * @property render.sprite.xOffset\n      * @type number\n      * @default 0\n      */ /**\n      * A `Number` that defines the offset in the y-axis for the sprite (normalised by texture height).\n      *\n      * @property render.sprite.yOffset\n      * @type number\n      * @default 0\n      */ /**\n     * A `Number` that defines the line width to use when rendering the body outline (if a sprite is not defined).\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 0\n     */ /**\n     * A `String` that defines the fill style to use when rendering the body (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.fillStyle\n     * @type string\n     * @default a random colour\n     */ /**\n     * A `String` that defines the stroke style to use when rendering the body outline (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */ /**\n     * An array of unique axis vectors (edge normals) used for collision detection.\n     * These are automatically calculated from the given convex hull (`vertices` array) in `Body.create`.\n     * They are constantly updated by `Body.update` during the simulation.\n     *\n     * @property axes\n     * @type vector[]\n     */ /**\n     * A `Number` that _measures_ the area of the body's convex hull, calculated at creation by `Body.create`.\n     *\n     * @property area\n     * @type string\n     * @default \n     */ /**\n     * A `Bounds` object that defines the AABB region for the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) in `Body.create` and constantly updated by `Body.update` during simulation.\n     *\n     * @property bounds\n     * @type bounds\n     */ })();\n        /***/ },\n        /* 7 */ /***/ function(module1, exports, __webpack_require__) {\n            /**\n* The `Matter.Sleeping` module contains methods to manage the sleeping state of bodies.\n*\n* @class Sleeping\n*/ var Sleeping = {};\n            module1.exports = Sleeping;\n            var Events = __webpack_require__(4);\n            (function() {\n                Sleeping._motionWakeThreshold = 0.18;\n                Sleeping._motionSleepThreshold = 0.08;\n                Sleeping._minBias = 0.9;\n                /**\n     * Puts bodies to sleep or wakes them up depending on their motion.\n     * @method update\n     * @param {body[]} bodies\n     * @param {number} timeScale\n     */ Sleeping.update = function(bodies, timeScale) {\n                    var timeFactor = timeScale * timeScale * timeScale;\n                    // update bodies sleeping status\n                    for(var i = 0; i < bodies.length; i++){\n                        var body = bodies[i], motion = body.speed * body.speed + body.angularSpeed * body.angularSpeed;\n                        // wake up bodies if they have a force applied\n                        if (body.force.x !== 0 || body.force.y !== 0) {\n                            Sleeping.set(body, false);\n                            continue;\n                        }\n                        var minMotion = Math.min(body.motion, motion), maxMotion = Math.max(body.motion, motion);\n                        // biased average motion estimation between frames\n                        body.motion = Sleeping._minBias * minMotion + (1 - Sleeping._minBias) * maxMotion;\n                        if (body.sleepThreshold > 0 && body.motion < Sleeping._motionSleepThreshold * timeFactor) {\n                            body.sleepCounter += 1;\n                            if (body.sleepCounter >= body.sleepThreshold) Sleeping.set(body, true);\n                        } else if (body.sleepCounter > 0) body.sleepCounter -= 1;\n                    }\n                };\n                /**\n     * Given a set of colliding pairs, wakes the sleeping bodies involved.\n     * @method afterCollisions\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */ Sleeping.afterCollisions = function(pairs, timeScale) {\n                    var timeFactor = timeScale * timeScale * timeScale;\n                    // wake up bodies involved in collisions\n                    for(var i = 0; i < pairs.length; i++){\n                        var pair = pairs[i];\n                        // don't wake inactive pairs\n                        if (!pair.isActive) continue;\n                        var collision = pair.collision, bodyA = collision.bodyA.parent, bodyB = collision.bodyB.parent;\n                        // don't wake if at least one body is static\n                        if (bodyA.isSleeping && bodyB.isSleeping || bodyA.isStatic || bodyB.isStatic) continue;\n                        if (bodyA.isSleeping || bodyB.isSleeping) {\n                            var sleepingBody = bodyA.isSleeping && !bodyA.isStatic ? bodyA : bodyB, movingBody = sleepingBody === bodyA ? bodyB : bodyA;\n                            if (!sleepingBody.isStatic && movingBody.motion > Sleeping._motionWakeThreshold * timeFactor) Sleeping.set(sleepingBody, false);\n                        }\n                    }\n                };\n                /**\n     * Set a body as sleeping or awake.\n     * @method set\n     * @param {body} body\n     * @param {boolean} isSleeping\n     */ Sleeping.set = function(body, isSleeping) {\n                    var wasSleeping = body.isSleeping;\n                    if (isSleeping) {\n                        body.isSleeping = true;\n                        body.sleepCounter = body.sleepThreshold;\n                        body.positionImpulse.x = 0;\n                        body.positionImpulse.y = 0;\n                        body.positionPrev.x = body.position.x;\n                        body.positionPrev.y = body.position.y;\n                        body.anglePrev = body.angle;\n                        body.speed = 0;\n                        body.angularSpeed = 0;\n                        body.motion = 0;\n                        if (!wasSleeping) Events.trigger(body, \"sleepStart\");\n                    } else {\n                        body.isSleeping = false;\n                        body.sleepCounter = 0;\n                        if (wasSleeping) Events.trigger(body, \"sleepEnd\");\n                    }\n                };\n            })();\n        /***/ },\n        /* 8 */ /***/ function(module1, exports, __webpack_require__) {\n            /**\n* The `Matter.Collision` module contains methods for detecting collisions between a given pair of bodies.\n*\n* For efficient detection between a list of bodies, see `Matter.Detector` and `Matter.Query`.\n*\n* See `Matter.Engine` for collision events.\n*\n* @class Collision\n*/ var Collision = {};\n            module1.exports = Collision;\n            var Vertices = __webpack_require__(3);\n            var Pair = __webpack_require__(9);\n            (function() {\n                var _supports = [];\n                var _overlapAB = {\n                    overlap: 0,\n                    axis: null\n                };\n                var _overlapBA = {\n                    overlap: 0,\n                    axis: null\n                };\n                /**\n     * Creates a new collision record.\n     * @method create\n     * @param {body} bodyA The first body part represented by the collision record\n     * @param {body} bodyB The second body part represented by the collision record\n     * @return {collision} A new collision record\n     */ Collision.create = function(bodyA, bodyB) {\n                    return {\n                        pair: null,\n                        collided: false,\n                        bodyA: bodyA,\n                        bodyB: bodyB,\n                        parentA: bodyA.parent,\n                        parentB: bodyB.parent,\n                        depth: 0,\n                        normal: {\n                            x: 0,\n                            y: 0\n                        },\n                        tangent: {\n                            x: 0,\n                            y: 0\n                        },\n                        penetration: {\n                            x: 0,\n                            y: 0\n                        },\n                        supports: []\n                    };\n                };\n                /**\n     * Detect collision between two bodies.\n     * @method collides\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @param {pairs} [pairs] Optionally reuse collision records from existing pairs.\n     * @return {collision|null} A collision record if detected, otherwise null\n     */ Collision.collides = function(bodyA, bodyB, pairs) {\n                    Collision._overlapAxes(_overlapAB, bodyA.vertices, bodyB.vertices, bodyA.axes);\n                    if (_overlapAB.overlap <= 0) return null;\n                    Collision._overlapAxes(_overlapBA, bodyB.vertices, bodyA.vertices, bodyB.axes);\n                    if (_overlapBA.overlap <= 0) return null;\n                    // reuse collision records for gc efficiency\n                    var pair = pairs && pairs.table[Pair.id(bodyA, bodyB)], collision;\n                    if (!pair) {\n                        collision = Collision.create(bodyA, bodyB);\n                        collision.collided = true;\n                        collision.bodyA = bodyA.id < bodyB.id ? bodyA : bodyB;\n                        collision.bodyB = bodyA.id < bodyB.id ? bodyB : bodyA;\n                        collision.parentA = collision.bodyA.parent;\n                        collision.parentB = collision.bodyB.parent;\n                    } else collision = pair.collision;\n                    bodyA = collision.bodyA;\n                    bodyB = collision.bodyB;\n                    var minOverlap;\n                    if (_overlapAB.overlap < _overlapBA.overlap) minOverlap = _overlapAB;\n                    else minOverlap = _overlapBA;\n                    var normal = collision.normal, supports = collision.supports, minAxis = minOverlap.axis, minAxisX = minAxis.x, minAxisY = minAxis.y;\n                    // ensure normal is facing away from bodyA\n                    if (minAxisX * (bodyB.position.x - bodyA.position.x) + minAxisY * (bodyB.position.y - bodyA.position.y) < 0) {\n                        normal.x = minAxisX;\n                        normal.y = minAxisY;\n                    } else {\n                        normal.x = -minAxisX;\n                        normal.y = -minAxisY;\n                    }\n                    collision.tangent.x = -normal.y;\n                    collision.tangent.y = normal.x;\n                    collision.depth = minOverlap.overlap;\n                    collision.penetration.x = normal.x * collision.depth;\n                    collision.penetration.y = normal.y * collision.depth;\n                    // find support points, there is always either exactly one or two\n                    var supportsB = Collision._findSupports(bodyA, bodyB, normal, 1), supportCount = 0;\n                    // find the supports from bodyB that are inside bodyA\n                    if (Vertices.contains(bodyA.vertices, supportsB[0])) supports[supportCount++] = supportsB[0];\n                    if (Vertices.contains(bodyA.vertices, supportsB[1])) supports[supportCount++] = supportsB[1];\n                    // find the supports from bodyA that are inside bodyB\n                    if (supportCount < 2) {\n                        var supportsA = Collision._findSupports(bodyB, bodyA, normal, -1);\n                        if (Vertices.contains(bodyB.vertices, supportsA[0])) supports[supportCount++] = supportsA[0];\n                        if (supportCount < 2 && Vertices.contains(bodyB.vertices, supportsA[1])) supports[supportCount++] = supportsA[1];\n                    }\n                    // account for the edge case of overlapping but no vertex containment\n                    if (supportCount === 0) supports[supportCount++] = supportsB[0];\n                    // update supports array size\n                    supports.length = supportCount;\n                    return collision;\n                };\n                /**\n     * Find the overlap between two sets of vertices.\n     * @method _overlapAxes\n     * @private\n     * @param {object} result\n     * @param {vertices} verticesA\n     * @param {vertices} verticesB\n     * @param {axes} axes\n     */ Collision._overlapAxes = function(result, verticesA, verticesB, axes) {\n                    var verticesALength = verticesA.length, verticesBLength = verticesB.length, verticesAX = verticesA[0].x, verticesAY = verticesA[0].y, verticesBX = verticesB[0].x, verticesBY = verticesB[0].y, axesLength = axes.length, overlapMin = Number.MAX_VALUE, overlapAxisNumber = 0, overlap, overlapAB, overlapBA, dot, i, j;\n                    for(i = 0; i < axesLength; i++){\n                        var axis = axes[i], axisX = axis.x, axisY = axis.y, minA = verticesAX * axisX + verticesAY * axisY, minB = verticesBX * axisX + verticesBY * axisY, maxA = minA, maxB = minB;\n                        for(j = 1; j < verticesALength; j += 1){\n                            dot = verticesA[j].x * axisX + verticesA[j].y * axisY;\n                            if (dot > maxA) maxA = dot;\n                            else if (dot < minA) minA = dot;\n                        }\n                        for(j = 1; j < verticesBLength; j += 1){\n                            dot = verticesB[j].x * axisX + verticesB[j].y * axisY;\n                            if (dot > maxB) maxB = dot;\n                            else if (dot < minB) minB = dot;\n                        }\n                        overlapAB = maxA - minB;\n                        overlapBA = maxB - minA;\n                        overlap = overlapAB < overlapBA ? overlapAB : overlapBA;\n                        if (overlap < overlapMin) {\n                            overlapMin = overlap;\n                            overlapAxisNumber = i;\n                            if (overlap <= 0) break;\n                        }\n                    }\n                    result.axis = axes[overlapAxisNumber];\n                    result.overlap = overlapMin;\n                };\n                /**\n     * Projects vertices on an axis and returns an interval.\n     * @method _projectToAxis\n     * @private\n     * @param {} projection\n     * @param {} vertices\n     * @param {} axis\n     */ Collision._projectToAxis = function(projection, vertices, axis) {\n                    var min = vertices[0].x * axis.x + vertices[0].y * axis.y, max = min;\n                    for(var i = 1; i < vertices.length; i += 1){\n                        var dot = vertices[i].x * axis.x + vertices[i].y * axis.y;\n                        if (dot > max) max = dot;\n                        else if (dot < min) min = dot;\n                    }\n                    projection.min = min;\n                    projection.max = max;\n                };\n                /**\n     * Finds supporting vertices given two bodies along a given direction using hill-climbing.\n     * @method _findSupports\n     * @private\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @param {vector} normal\n     * @param {number} direction\n     * @return [vector]\n     */ Collision._findSupports = function(bodyA, bodyB, normal, direction) {\n                    var vertices = bodyB.vertices, verticesLength = vertices.length, bodyAPositionX = bodyA.position.x, bodyAPositionY = bodyA.position.y, normalX = normal.x * direction, normalY = normal.y * direction, nearestDistance = Number.MAX_VALUE, vertexA, vertexB, vertexC, distance, j;\n                    // find deepest vertex relative to the axis\n                    for(j = 0; j < verticesLength; j += 1){\n                        vertexB = vertices[j];\n                        distance = normalX * (bodyAPositionX - vertexB.x) + normalY * (bodyAPositionY - vertexB.y);\n                        // convex hill-climbing\n                        if (distance < nearestDistance) {\n                            nearestDistance = distance;\n                            vertexA = vertexB;\n                        }\n                    }\n                    // measure next vertex\n                    vertexC = vertices[(verticesLength + vertexA.index - 1) % verticesLength];\n                    nearestDistance = normalX * (bodyAPositionX - vertexC.x) + normalY * (bodyAPositionY - vertexC.y);\n                    // compare with previous vertex\n                    vertexB = vertices[(vertexA.index + 1) % verticesLength];\n                    if (normalX * (bodyAPositionX - vertexB.x) + normalY * (bodyAPositionY - vertexB.y) < nearestDistance) {\n                        _supports[0] = vertexA;\n                        _supports[1] = vertexB;\n                        return _supports;\n                    }\n                    _supports[0] = vertexA;\n                    _supports[1] = vertexC;\n                    return _supports;\n                };\n            /*\n    *\n    *  Properties Documentation\n    *\n    */ /**\n     * A reference to the pair using this collision record, if there is one.\n     *\n     * @property pair\n     * @type {pair|null}\n     * @default null\n     */ /**\n     * A flag that indicates if the bodies were colliding when the collision was last updated.\n     * \n     * @property collided\n     * @type boolean\n     * @default false\n     */ /**\n     * The first body part represented by the collision (see also `collision.parentA`).\n     * \n     * @property bodyA\n     * @type body\n     */ /**\n     * The second body part represented by the collision (see also `collision.parentB`).\n     * \n     * @property bodyB\n     * @type body\n     */ /**\n     * The first body represented by the collision (i.e. `collision.bodyA.parent`).\n     * \n     * @property parentA\n     * @type body\n     */ /**\n     * The second body represented by the collision (i.e. `collision.bodyB.parent`).\n     * \n     * @property parentB\n     * @type body\n     */ /**\n     * A `Number` that represents the minimum separating distance between the bodies along the collision normal.\n     *\n     * @readOnly\n     * @property depth\n     * @type number\n     * @default 0\n     */ /**\n     * A normalised `Vector` that represents the direction between the bodies that provides the minimum separating distance.\n     *\n     * @property normal\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */ /**\n     * A normalised `Vector` that is the tangent direction to the collision normal.\n     *\n     * @property tangent\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */ /**\n     * A `Vector` that represents the direction and depth of the collision.\n     *\n     * @property penetration\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */ /**\n     * An array of body vertices that represent the support points in the collision.\n     * These are the deepest vertices (along the collision normal) of each body that are contained by the other body's vertices.\n     *\n     * @property supports\n     * @type vector[]\n     * @default []\n     */ })();\n        /***/ },\n        /* 9 */ /***/ function(module1, exports, __webpack_require__) {\n            /**\n* The `Matter.Pair` module contains methods for creating and manipulating collision pairs.\n*\n* @class Pair\n*/ var Pair = {};\n            module1.exports = Pair;\n            var Contact = __webpack_require__(17);\n            (function() {\n                /**\n     * Creates a pair.\n     * @method create\n     * @param {collision} collision\n     * @param {number} timestamp\n     * @return {pair} A new pair\n     */ Pair.create = function(collision, timestamp) {\n                    var bodyA = collision.bodyA, bodyB = collision.bodyB;\n                    var pair = {\n                        id: Pair.id(bodyA, bodyB),\n                        bodyA: bodyA,\n                        bodyB: bodyB,\n                        collision: collision,\n                        contacts: [],\n                        activeContacts: [],\n                        separation: 0,\n                        isActive: true,\n                        confirmedActive: true,\n                        isSensor: bodyA.isSensor || bodyB.isSensor,\n                        timeCreated: timestamp,\n                        timeUpdated: timestamp,\n                        inverseMass: 0,\n                        friction: 0,\n                        frictionStatic: 0,\n                        restitution: 0,\n                        slop: 0\n                    };\n                    Pair.update(pair, collision, timestamp);\n                    return pair;\n                };\n                /**\n     * Updates a pair given a collision.\n     * @method update\n     * @param {pair} pair\n     * @param {collision} collision\n     * @param {number} timestamp\n     */ Pair.update = function(pair, collision, timestamp) {\n                    var contacts = pair.contacts, supports = collision.supports, activeContacts = pair.activeContacts, parentA = collision.parentA, parentB = collision.parentB, parentAVerticesLength = parentA.vertices.length;\n                    pair.isActive = true;\n                    pair.timeUpdated = timestamp;\n                    pair.collision = collision;\n                    pair.separation = collision.depth;\n                    pair.inverseMass = parentA.inverseMass + parentB.inverseMass;\n                    pair.friction = parentA.friction < parentB.friction ? parentA.friction : parentB.friction;\n                    pair.frictionStatic = parentA.frictionStatic > parentB.frictionStatic ? parentA.frictionStatic : parentB.frictionStatic;\n                    pair.restitution = parentA.restitution > parentB.restitution ? parentA.restitution : parentB.restitution;\n                    pair.slop = parentA.slop > parentB.slop ? parentA.slop : parentB.slop;\n                    collision.pair = pair;\n                    activeContacts.length = 0;\n                    for(var i = 0; i < supports.length; i++){\n                        var support = supports[i], contactId = support.body === parentA ? support.index : parentAVerticesLength + support.index, contact = contacts[contactId];\n                        if (contact) activeContacts.push(contact);\n                        else activeContacts.push(contacts[contactId] = Contact.create(support));\n                    }\n                };\n                /**\n     * Set a pair as active or inactive.\n     * @method setActive\n     * @param {pair} pair\n     * @param {bool} isActive\n     * @param {number} timestamp\n     */ Pair.setActive = function(pair, isActive, timestamp) {\n                    if (isActive) {\n                        pair.isActive = true;\n                        pair.timeUpdated = timestamp;\n                    } else {\n                        pair.isActive = false;\n                        pair.activeContacts.length = 0;\n                    }\n                };\n                /**\n     * Get the id for the given pair.\n     * @method id\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {string} Unique pairId\n     */ Pair.id = function(bodyA, bodyB) {\n                    if (bodyA.id < bodyB.id) return \"A\" + bodyA.id + \"B\" + bodyB.id;\n                    else return \"A\" + bodyB.id + \"B\" + bodyA.id;\n                };\n            })();\n        /***/ },\n        /* 10 */ /***/ function(module1, exports, __webpack_require__) {\n            /**\n* The `Matter.Constraint` module contains methods for creating and manipulating constraints.\n* Constraints are used for specifying that a fixed distance must be maintained between two bodies (or a body and a fixed world-space position).\n* The stiffness of constraints can be modified to create springs or elastic.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Constraint\n*/ var Constraint = {};\n            module1.exports = Constraint;\n            var Vertices = __webpack_require__(3);\n            var Vector = __webpack_require__(2);\n            var Sleeping = __webpack_require__(7);\n            var Bounds = __webpack_require__(1);\n            var Axes = __webpack_require__(11);\n            var Common = __webpack_require__(0);\n            (function() {\n                Constraint._warming = 0.4;\n                Constraint._torqueDampen = 1;\n                Constraint._minLength = 0.000001;\n                /**\n     * Creates a new constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * To simulate a revolute constraint (or pin joint) set `length: 0` and a high `stiffness` value (e.g. `0.7` or above).\n     * If the constraint is unstable, try lowering the `stiffness` value and / or increasing `engine.constraintIterations`.\n     * For compound bodies, constraints must be applied to the parent body (not one of its parts).\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {constraint} constraint\n     */ Constraint.create = function(options) {\n                    var constraint = options;\n                    // if bodies defined but no points, use body centre\n                    if (constraint.bodyA && !constraint.pointA) constraint.pointA = {\n                        x: 0,\n                        y: 0\n                    };\n                    if (constraint.bodyB && !constraint.pointB) constraint.pointB = {\n                        x: 0,\n                        y: 0\n                    };\n                    // calculate static length using initial world space points\n                    var initialPointA = constraint.bodyA ? Vector.add(constraint.bodyA.position, constraint.pointA) : constraint.pointA, initialPointB = constraint.bodyB ? Vector.add(constraint.bodyB.position, constraint.pointB) : constraint.pointB, length = Vector.magnitude(Vector.sub(initialPointA, initialPointB));\n                    constraint.length = typeof constraint.length !== \"undefined\" ? constraint.length : length;\n                    // option defaults\n                    constraint.id = constraint.id || Common.nextId();\n                    constraint.label = constraint.label || \"Constraint\";\n                    constraint.type = \"constraint\";\n                    constraint.stiffness = constraint.stiffness || (constraint.length > 0 ? 1 : 0.7);\n                    constraint.damping = constraint.damping || 0;\n                    constraint.angularStiffness = constraint.angularStiffness || 0;\n                    constraint.angleA = constraint.bodyA ? constraint.bodyA.angle : constraint.angleA;\n                    constraint.angleB = constraint.bodyB ? constraint.bodyB.angle : constraint.angleB;\n                    constraint.plugin = {};\n                    // render\n                    var render = {\n                        visible: true,\n                        lineWidth: 2,\n                        strokeStyle: \"#ffffff\",\n                        type: \"line\",\n                        anchors: true\n                    };\n                    if (constraint.length === 0 && constraint.stiffness > 0.1) {\n                        render.type = \"pin\";\n                        render.anchors = false;\n                    } else if (constraint.stiffness < 0.9) render.type = \"spring\";\n                    constraint.render = Common.extend(render, constraint.render);\n                    return constraint;\n                };\n                /**\n     * Prepares for solving by constraint warming.\n     * @private\n     * @method preSolveAll\n     * @param {body[]} bodies\n     */ Constraint.preSolveAll = function(bodies) {\n                    for(var i = 0; i < bodies.length; i += 1){\n                        var body = bodies[i], impulse = body.constraintImpulse;\n                        if (body.isStatic || impulse.x === 0 && impulse.y === 0 && impulse.angle === 0) continue;\n                        body.position.x += impulse.x;\n                        body.position.y += impulse.y;\n                        body.angle += impulse.angle;\n                    }\n                };\n                /**\n     * Solves all constraints in a list of collisions.\n     * @private\n     * @method solveAll\n     * @param {constraint[]} constraints\n     * @param {number} timeScale\n     */ Constraint.solveAll = function(constraints, timeScale) {\n                    // Solve fixed constraints first.\n                    for(var i = 0; i < constraints.length; i += 1){\n                        var constraint = constraints[i], fixedA = !constraint.bodyA || constraint.bodyA && constraint.bodyA.isStatic, fixedB = !constraint.bodyB || constraint.bodyB && constraint.bodyB.isStatic;\n                        if (fixedA || fixedB) Constraint.solve(constraints[i], timeScale);\n                    }\n                    // Solve free constraints last.\n                    for(i = 0; i < constraints.length; i += 1){\n                        constraint = constraints[i];\n                        fixedA = !constraint.bodyA || constraint.bodyA && constraint.bodyA.isStatic;\n                        fixedB = !constraint.bodyB || constraint.bodyB && constraint.bodyB.isStatic;\n                        if (!fixedA && !fixedB) Constraint.solve(constraints[i], timeScale);\n                    }\n                };\n                /**\n     * Solves a distance constraint with Gauss-Siedel method.\n     * @private\n     * @method solve\n     * @param {constraint} constraint\n     * @param {number} timeScale\n     */ Constraint.solve = function(constraint, timeScale) {\n                    var bodyA = constraint.bodyA, bodyB = constraint.bodyB, pointA = constraint.pointA, pointB = constraint.pointB;\n                    if (!bodyA && !bodyB) return;\n                    // update reference angle\n                    if (bodyA && !bodyA.isStatic) {\n                        Vector.rotate(pointA, bodyA.angle - constraint.angleA, pointA);\n                        constraint.angleA = bodyA.angle;\n                    }\n                    // update reference angle\n                    if (bodyB && !bodyB.isStatic) {\n                        Vector.rotate(pointB, bodyB.angle - constraint.angleB, pointB);\n                        constraint.angleB = bodyB.angle;\n                    }\n                    var pointAWorld = pointA, pointBWorld = pointB;\n                    if (bodyA) pointAWorld = Vector.add(bodyA.position, pointA);\n                    if (bodyB) pointBWorld = Vector.add(bodyB.position, pointB);\n                    if (!pointAWorld || !pointBWorld) return;\n                    var delta = Vector.sub(pointAWorld, pointBWorld), currentLength = Vector.magnitude(delta);\n                    // prevent singularity\n                    if (currentLength < Constraint._minLength) currentLength = Constraint._minLength;\n                    // solve distance constraint with Gauss-Siedel method\n                    var difference = (currentLength - constraint.length) / currentLength, stiffness = constraint.stiffness < 1 ? constraint.stiffness * timeScale : constraint.stiffness, force = Vector.mult(delta, difference * stiffness), massTotal = (bodyA ? bodyA.inverseMass : 0) + (bodyB ? bodyB.inverseMass : 0), inertiaTotal = (bodyA ? bodyA.inverseInertia : 0) + (bodyB ? bodyB.inverseInertia : 0), resistanceTotal = massTotal + inertiaTotal, torque, share, normal, normalVelocity, relativeVelocity;\n                    if (constraint.damping) {\n                        var zero = Vector.create();\n                        normal = Vector.div(delta, currentLength);\n                        relativeVelocity = Vector.sub(bodyB && Vector.sub(bodyB.position, bodyB.positionPrev) || zero, bodyA && Vector.sub(bodyA.position, bodyA.positionPrev) || zero);\n                        normalVelocity = Vector.dot(normal, relativeVelocity);\n                    }\n                    if (bodyA && !bodyA.isStatic) {\n                        share = bodyA.inverseMass / massTotal;\n                        // keep track of applied impulses for post solving\n                        bodyA.constraintImpulse.x -= force.x * share;\n                        bodyA.constraintImpulse.y -= force.y * share;\n                        // apply forces\n                        bodyA.position.x -= force.x * share;\n                        bodyA.position.y -= force.y * share;\n                        // apply damping\n                        if (constraint.damping) {\n                            bodyA.positionPrev.x -= constraint.damping * normal.x * normalVelocity * share;\n                            bodyA.positionPrev.y -= constraint.damping * normal.y * normalVelocity * share;\n                        }\n                        // apply torque\n                        torque = Vector.cross(pointA, force) / resistanceTotal * Constraint._torqueDampen * bodyA.inverseInertia * (1 - constraint.angularStiffness);\n                        bodyA.constraintImpulse.angle -= torque;\n                        bodyA.angle -= torque;\n                    }\n                    if (bodyB && !bodyB.isStatic) {\n                        share = bodyB.inverseMass / massTotal;\n                        // keep track of applied impulses for post solving\n                        bodyB.constraintImpulse.x += force.x * share;\n                        bodyB.constraintImpulse.y += force.y * share;\n                        // apply forces\n                        bodyB.position.x += force.x * share;\n                        bodyB.position.y += force.y * share;\n                        // apply damping\n                        if (constraint.damping) {\n                            bodyB.positionPrev.x += constraint.damping * normal.x * normalVelocity * share;\n                            bodyB.positionPrev.y += constraint.damping * normal.y * normalVelocity * share;\n                        }\n                        // apply torque\n                        torque = Vector.cross(pointB, force) / resistanceTotal * Constraint._torqueDampen * bodyB.inverseInertia * (1 - constraint.angularStiffness);\n                        bodyB.constraintImpulse.angle += torque;\n                        bodyB.angle += torque;\n                    }\n                };\n                /**\n     * Performs body updates required after solving constraints.\n     * @private\n     * @method postSolveAll\n     * @param {body[]} bodies\n     */ Constraint.postSolveAll = function(bodies) {\n                    for(var i = 0; i < bodies.length; i++){\n                        var body = bodies[i], impulse = body.constraintImpulse;\n                        if (body.isStatic || impulse.x === 0 && impulse.y === 0 && impulse.angle === 0) continue;\n                        Sleeping.set(body, false);\n                        // update geometry and reset\n                        for(var j = 0; j < body.parts.length; j++){\n                            var part = body.parts[j];\n                            Vertices.translate(part.vertices, impulse);\n                            if (j > 0) {\n                                part.position.x += impulse.x;\n                                part.position.y += impulse.y;\n                            }\n                            if (impulse.angle !== 0) {\n                                Vertices.rotate(part.vertices, impulse.angle, body.position);\n                                Axes.rotate(part.axes, impulse.angle);\n                                if (j > 0) Vector.rotateAbout(part.position, impulse.angle, body.position, part.position);\n                            }\n                            Bounds.update(part.bounds, part.vertices, body.velocity);\n                        }\n                        // dampen the cached impulse for warming next step\n                        impulse.angle *= Constraint._warming;\n                        impulse.x *= Constraint._warming;\n                        impulse.y *= Constraint._warming;\n                    }\n                };\n                /**\n     * Returns the world-space position of `constraint.pointA`, accounting for `constraint.bodyA`.\n     * @method pointAWorld\n     * @param {constraint} constraint\n     * @returns {vector} the world-space position\n     */ Constraint.pointAWorld = function(constraint) {\n                    return {\n                        x: (constraint.bodyA ? constraint.bodyA.position.x : 0) + constraint.pointA.x,\n                        y: (constraint.bodyA ? constraint.bodyA.position.y : 0) + constraint.pointA.y\n                    };\n                };\n                /**\n     * Returns the world-space position of `constraint.pointB`, accounting for `constraint.bodyB`.\n     * @method pointBWorld\n     * @param {constraint} constraint\n     * @returns {vector} the world-space position\n     */ Constraint.pointBWorld = function(constraint) {\n                    return {\n                        x: (constraint.bodyB ? constraint.bodyB.position.x : 0) + constraint.pointB.x,\n                        y: (constraint.bodyB ? constraint.bodyB.position.y : 0) + constraint.pointB.y\n                    };\n                };\n            /*\n    *\n    *  Properties Documentation\n    *\n    */ /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */ /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */ /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Constraint\"\n     */ /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */ /**\n     * A flag that indicates if the constraint should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */ /**\n     * A `Number` that defines the line width to use when rendering the constraint outline.\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 2\n     */ /**\n     * A `String` that defines the stroke style to use when rendering the constraint outline.\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */ /**\n     * A `String` that defines the constraint rendering type. \n     * The possible values are 'line', 'pin', 'spring'.\n     * An appropriate render type will be automatically chosen unless one is given in options.\n     *\n     * @property render.type\n     * @type string\n     * @default 'line'\n     */ /**\n     * A `Boolean` that defines if the constraint's anchor points should be rendered.\n     *\n     * @property render.anchors\n     * @type boolean\n     * @default true\n     */ /**\n     * The first possible `Body` that this constraint is attached to.\n     *\n     * @property bodyA\n     * @type body\n     * @default null\n     */ /**\n     * The second possible `Body` that this constraint is attached to.\n     *\n     * @property bodyB\n     * @type body\n     * @default null\n     */ /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.\n     *\n     * @property pointA\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */ /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyB` if defined, otherwise a world-space position.\n     *\n     * @property pointB\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */ /**\n     * A `Number` that specifies the stiffness of the constraint, i.e. the rate at which it returns to its resting `constraint.length`.\n     * A value of `1` means the constraint should be very stiff.\n     * A value of `0.2` means the constraint acts like a soft spring.\n     *\n     * @property stiffness\n     * @type number\n     * @default 1\n     */ /**\n     * A `Number` that specifies the damping of the constraint, \n     * i.e. the amount of resistance applied to each body based on their velocities to limit the amount of oscillation.\n     * Damping will only be apparent when the constraint also has a very low `stiffness`.\n     * A value of `0.1` means the constraint will apply heavy damping, resulting in little to no oscillation.\n     * A value of `0` means the constraint will apply no damping.\n     *\n     * @property damping\n     * @type number\n     * @default 0\n     */ /**\n     * A `Number` that specifies the target resting length of the constraint. \n     * It is calculated automatically in `Constraint.create` from initial positions of the `constraint.bodyA` and `constraint.bodyB`.\n     *\n     * @property length\n     * @type number\n     */ /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */ })();\n        /***/ },\n        /* 11 */ /***/ function(module1, exports, __webpack_require__) {\n            /**\n* The `Matter.Axes` module contains methods for creating and manipulating sets of axes.\n*\n* @class Axes\n*/ var Axes = {};\n            module1.exports = Axes;\n            var Vector = __webpack_require__(2);\n            var Common = __webpack_require__(0);\n            (function() {\n                /**\n     * Creates a new set of axes from the given vertices.\n     * @method fromVertices\n     * @param {vertices} vertices\n     * @return {axes} A new axes from the given vertices\n     */ Axes.fromVertices = function(vertices) {\n                    var axes = {};\n                    // find the unique axes, using edge normal gradients\n                    for(var i = 0; i < vertices.length; i++){\n                        var j = (i + 1) % vertices.length, normal = Vector.normalise({\n                            x: vertices[j].y - vertices[i].y,\n                            y: vertices[i].x - vertices[j].x\n                        }), gradient = normal.y === 0 ? Infinity : normal.x / normal.y;\n                        // limit precision\n                        gradient = gradient.toFixed(3).toString();\n                        axes[gradient] = normal;\n                    }\n                    return Common.values(axes);\n                };\n                /**\n     * Rotates a set of axes by the given angle.\n     * @method rotate\n     * @param {axes} axes\n     * @param {number} angle\n     */ Axes.rotate = function(axes, angle) {\n                    if (angle === 0) return;\n                    var cos = Math.cos(angle), sin = Math.sin(angle);\n                    for(var i = 0; i < axes.length; i++){\n                        var axis = axes[i], xx;\n                        xx = axis.x * cos - axis.y * sin;\n                        axis.y = axis.x * sin + axis.y * cos;\n                        axis.x = xx;\n                    }\n                };\n            })();\n        /***/ },\n        /* 12 */ /***/ function(module1, exports, __webpack_require__) {\n            /**\n* The `Matter.Bodies` module contains factory methods for creating rigid body models \n* with commonly used body configurations (such as rectangles, circles and other polygons).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Bodies\n*/ // TODO: true circle bodies\n            var Bodies = {};\n            module1.exports = Bodies;\n            var Vertices = __webpack_require__(3);\n            var Common = __webpack_require__(0);\n            var Body = __webpack_require__(6);\n            var Bounds = __webpack_require__(1);\n            var Vector = __webpack_require__(2);\n            (function() {\n                /**\n     * Creates a new rigid body model with a rectangle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method rectangle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {object} [options]\n     * @return {body} A new rectangle body\n     */ Bodies.rectangle = function(x, y, width, height, options) {\n                    options = options || {};\n                    var rectangle = {\n                        label: \"Rectangle Body\",\n                        position: {\n                            x: x,\n                            y: y\n                        },\n                        vertices: Vertices.fromPath(\"L 0 0 L \" + width + \" 0 L \" + width + \" \" + height + \" L 0 \" + height)\n                    };\n                    if (options.chamfer) {\n                        var chamfer = options.chamfer;\n                        rectangle.vertices = Vertices.chamfer(rectangle.vertices, chamfer.radius, chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n                        delete options.chamfer;\n                    }\n                    return Body.create(Common.extend({}, rectangle, options));\n                };\n                /**\n     * Creates a new rigid body model with a trapezoid hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method trapezoid\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {number} slope\n     * @param {object} [options]\n     * @return {body} A new trapezoid body\n     */ Bodies.trapezoid = function(x, y, width, height, slope, options) {\n                    options = options || {};\n                    slope *= 0.5;\n                    var roof = (1 - slope * 2) * width;\n                    var x1 = width * slope, x2 = x1 + roof, x3 = x2 + x1, verticesPath;\n                    if (slope < 0.5) verticesPath = \"L 0 0 L \" + x1 + \" \" + -height + \" L \" + x2 + \" \" + -height + \" L \" + x3 + \" 0\";\n                    else verticesPath = \"L 0 0 L \" + x2 + \" \" + -height + \" L \" + x3 + \" 0\";\n                    var trapezoid = {\n                        label: \"Trapezoid Body\",\n                        position: {\n                            x: x,\n                            y: y\n                        },\n                        vertices: Vertices.fromPath(verticesPath)\n                    };\n                    if (options.chamfer) {\n                        var chamfer = options.chamfer;\n                        trapezoid.vertices = Vertices.chamfer(trapezoid.vertices, chamfer.radius, chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n                        delete options.chamfer;\n                    }\n                    return Body.create(Common.extend({}, trapezoid, options));\n                };\n                /**\n     * Creates a new rigid body model with a circle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method circle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} radius\n     * @param {object} [options]\n     * @param {number} [maxSides]\n     * @return {body} A new circle body\n     */ Bodies.circle = function(x, y, radius, options, maxSides) {\n                    options = options || {};\n                    var circle = {\n                        label: \"Circle Body\",\n                        circleRadius: radius\n                    };\n                    // approximate circles with polygons until true circles implemented in SAT\n                    maxSides = maxSides || 25;\n                    var sides = Math.ceil(Math.max(10, Math.min(maxSides, radius)));\n                    // optimisation: always use even number of sides (half the number of unique axes)\n                    if (sides % 2 === 1) sides += 1;\n                    return Bodies.polygon(x, y, sides, radius, Common.extend({}, circle, options));\n                };\n                /**\n     * Creates a new rigid body model with a regular polygon hull with the given number of sides. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method polygon\n     * @param {number} x\n     * @param {number} y\n     * @param {number} sides\n     * @param {number} radius\n     * @param {object} [options]\n     * @return {body} A new regular polygon body\n     */ Bodies.polygon = function(x, y, sides, radius, options) {\n                    options = options || {};\n                    if (sides < 3) return Bodies.circle(x, y, radius, options);\n                    var theta = 2 * Math.PI / sides, path = \"\", offset = theta * 0.5;\n                    for(var i = 0; i < sides; i += 1){\n                        var angle = offset + i * theta, xx = Math.cos(angle) * radius, yy = Math.sin(angle) * radius;\n                        path += \"L \" + xx.toFixed(3) + \" \" + yy.toFixed(3) + \" \";\n                    }\n                    var polygon = {\n                        label: \"Polygon Body\",\n                        position: {\n                            x: x,\n                            y: y\n                        },\n                        vertices: Vertices.fromPath(path)\n                    };\n                    if (options.chamfer) {\n                        var chamfer = options.chamfer;\n                        polygon.vertices = Vertices.chamfer(polygon.vertices, chamfer.radius, chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n                        delete options.chamfer;\n                    }\n                    return Body.create(Common.extend({}, polygon, options));\n                };\n                /**\n     * Utility to create a compound body based on set(s) of vertices.\n     * \n     * _Note:_ To optionally enable automatic concave vertices decomposition the [poly-decomp](https://github.com/schteppe/poly-decomp.js) \n     * package must be first installed and provided see `Common.setDecomp`, otherwise the convex hull of each vertex set will be used.\n     * \n     * The resulting vertices are reorientated about their centre of mass,\n     * and offset such that `body.position` corresponds to this point.\n     * \n     * The resulting offset may be found if needed by subtracting `body.bounds` from the original input bounds.\n     * To later move the centre of mass see `Body.setCentre`.\n     * \n     * Note that automatic conconcave decomposition results are not always optimal. \n     * For best results, simplify the input vertices as much as possible first.\n     * By default this function applies some addtional simplification to help.\n     * \n     * Some outputs may also require further manual processing afterwards to be robust.\n     * In particular some parts may need to be overlapped to avoid collision gaps.\n     * Thin parts and sharp points should be avoided or removed where possible.\n     *\n     * The options parameter object specifies any `Matter.Body` properties you wish to override the defaults.\n     * \n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method fromVertices\n     * @param {number} x\n     * @param {number} y\n     * @param {array} vertexSets One or more arrays of vertex points e.g. `[[{ x: 0, y: 0 }...], ...]`.\n     * @param {object} [options] The body options.\n     * @param {bool} [flagInternal=false] Optionally marks internal edges with `isInternal`.\n     * @param {number} [removeCollinear=0.01] Threshold when simplifying vertices along the same edge.\n     * @param {number} [minimumArea=10] Threshold when removing small parts.\n     * @param {number} [removeDuplicatePoints=0.01] Threshold when simplifying nearby vertices.\n     * @return {body}\n     */ Bodies.fromVertices = function(x, y, vertexSets, options, flagInternal, removeCollinear, minimumArea, removeDuplicatePoints) {\n                    var decomp = Common.getDecomp(), canDecomp, body, parts, isConvex, isConcave, vertices, i, j, k, v, z;\n                    // check decomp is as expected\n                    canDecomp = Boolean(decomp && decomp.quickDecomp);\n                    options = options || {};\n                    parts = [];\n                    flagInternal = typeof flagInternal !== \"undefined\" ? flagInternal : false;\n                    removeCollinear = typeof removeCollinear !== \"undefined\" ? removeCollinear : 0.01;\n                    minimumArea = typeof minimumArea !== \"undefined\" ? minimumArea : 10;\n                    removeDuplicatePoints = typeof removeDuplicatePoints !== \"undefined\" ? removeDuplicatePoints : 0.01;\n                    // ensure vertexSets is an array of arrays\n                    if (!Common.isArray(vertexSets[0])) vertexSets = [\n                        vertexSets\n                    ];\n                    for(v = 0; v < vertexSets.length; v += 1){\n                        vertices = vertexSets[v];\n                        isConvex = Vertices.isConvex(vertices);\n                        isConcave = !isConvex;\n                        if (isConcave && !canDecomp) Common.warnOnce(\"Bodies.fromVertices: Install the 'poly-decomp' library and use Common.setDecomp or provide 'decomp' as a global to decompose concave vertices.\");\n                        if (isConvex || !canDecomp) {\n                            if (isConvex) vertices = Vertices.clockwiseSort(vertices);\n                            else // fallback to convex hull when decomposition is not possible\n                            vertices = Vertices.hull(vertices);\n                            parts.push({\n                                position: {\n                                    x: x,\n                                    y: y\n                                },\n                                vertices: vertices\n                            });\n                        } else {\n                            // initialise a decomposition\n                            var concave = vertices.map(function(vertex) {\n                                return [\n                                    vertex.x,\n                                    vertex.y\n                                ];\n                            });\n                            // vertices are concave and simple, we can decompose into parts\n                            decomp.makeCCW(concave);\n                            if (removeCollinear !== false) decomp.removeCollinearPoints(concave, removeCollinear);\n                            if (removeDuplicatePoints !== false && decomp.removeDuplicatePoints) decomp.removeDuplicatePoints(concave, removeDuplicatePoints);\n                            // use the quick decomposition algorithm (Bayazit)\n                            var decomposed = decomp.quickDecomp(concave);\n                            // for each decomposed chunk\n                            for(i = 0; i < decomposed.length; i++){\n                                var chunk = decomposed[i];\n                                // convert vertices into the correct structure\n                                var chunkVertices = chunk.map(function(vertices) {\n                                    return {\n                                        x: vertices[0],\n                                        y: vertices[1]\n                                    };\n                                });\n                                // skip small chunks\n                                if (minimumArea > 0 && Vertices.area(chunkVertices) < minimumArea) continue;\n                                // create a compound part\n                                parts.push({\n                                    position: Vertices.centre(chunkVertices),\n                                    vertices: chunkVertices\n                                });\n                            }\n                        }\n                    }\n                    // create body parts\n                    for(i = 0; i < parts.length; i++)parts[i] = Body.create(Common.extend(parts[i], options));\n                    // flag internal edges (coincident part edges)\n                    if (flagInternal) {\n                        var coincident_max_dist = 5;\n                        for(i = 0; i < parts.length; i++){\n                            var partA = parts[i];\n                            for(j = i + 1; j < parts.length; j++){\n                                var partB = parts[j];\n                                if (Bounds.overlaps(partA.bounds, partB.bounds)) {\n                                    var pav = partA.vertices, pbv = partB.vertices;\n                                    // iterate vertices of both parts\n                                    for(k = 0; k < partA.vertices.length; k++)for(z = 0; z < partB.vertices.length; z++){\n                                        // find distances between the vertices\n                                        var da = Vector.magnitudeSquared(Vector.sub(pav[(k + 1) % pav.length], pbv[z])), db = Vector.magnitudeSquared(Vector.sub(pav[k], pbv[(z + 1) % pbv.length]));\n                                        // if both vertices are very close, consider the edge concident (internal)\n                                        if (da < coincident_max_dist && db < coincident_max_dist) {\n                                            pav[k].isInternal = true;\n                                            pbv[z].isInternal = true;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (parts.length > 1) {\n                        // create the parent body to be returned, that contains generated compound parts\n                        body = Body.create(Common.extend({\n                            parts: parts.slice(0)\n                        }, options));\n                        // offset such that body.position is at the centre off mass\n                        Body.setPosition(body, {\n                            x: x,\n                            y: y\n                        });\n                        return body;\n                    } else return parts[0];\n                };\n            })();\n        /***/ },\n        /* 13 */ /***/ function(module1, exports, __webpack_require__) {\n            /**\n* The `Matter.Mouse` module contains methods for creating and manipulating mouse inputs.\n*\n* @class Mouse\n*/ var Mouse = {};\n            module1.exports = Mouse;\n            var Common = __webpack_require__(0);\n            (function() {\n                /**\n     * Creates a mouse input.\n     * @method create\n     * @param {HTMLElement} element\n     * @return {mouse} A new mouse\n     */ Mouse.create = function(element) {\n                    var mouse = {};\n                    if (!element) Common.log(\"Mouse.create: element was undefined, defaulting to document.body\", \"warn\");\n                    mouse.element = element || document.body;\n                    mouse.absolute = {\n                        x: 0,\n                        y: 0\n                    };\n                    mouse.position = {\n                        x: 0,\n                        y: 0\n                    };\n                    mouse.mousedownPosition = {\n                        x: 0,\n                        y: 0\n                    };\n                    mouse.mouseupPosition = {\n                        x: 0,\n                        y: 0\n                    };\n                    mouse.offset = {\n                        x: 0,\n                        y: 0\n                    };\n                    mouse.scale = {\n                        x: 1,\n                        y: 1\n                    };\n                    mouse.wheelDelta = 0;\n                    mouse.button = -1;\n                    mouse.pixelRatio = parseInt(mouse.element.getAttribute(\"data-pixel-ratio\"), 10) || 1;\n                    mouse.sourceEvents = {\n                        mousemove: null,\n                        mousedown: null,\n                        mouseup: null,\n                        mousewheel: null\n                    };\n                    mouse.mousemove = function(event) {\n                        var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio), touches = event.changedTouches;\n                        if (touches) {\n                            mouse.button = 0;\n                            event.preventDefault();\n                        }\n                        mouse.absolute.x = position.x;\n                        mouse.absolute.y = position.y;\n                        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n                        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n                        mouse.sourceEvents.mousemove = event;\n                    };\n                    mouse.mousedown = function(event) {\n                        var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio), touches = event.changedTouches;\n                        if (touches) {\n                            mouse.button = 0;\n                            event.preventDefault();\n                        } else mouse.button = event.button;\n                        mouse.absolute.x = position.x;\n                        mouse.absolute.y = position.y;\n                        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n                        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n                        mouse.mousedownPosition.x = mouse.position.x;\n                        mouse.mousedownPosition.y = mouse.position.y;\n                        mouse.sourceEvents.mousedown = event;\n                    };\n                    mouse.mouseup = function(event) {\n                        var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio), touches = event.changedTouches;\n                        if (touches) event.preventDefault();\n                        mouse.button = -1;\n                        mouse.absolute.x = position.x;\n                        mouse.absolute.y = position.y;\n                        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n                        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n                        mouse.mouseupPosition.x = mouse.position.x;\n                        mouse.mouseupPosition.y = mouse.position.y;\n                        mouse.sourceEvents.mouseup = event;\n                    };\n                    mouse.mousewheel = function(event) {\n                        mouse.wheelDelta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail));\n                        event.preventDefault();\n                    };\n                    Mouse.setElement(mouse, mouse.element);\n                    return mouse;\n                };\n                /**\n     * Sets the element the mouse is bound to (and relative to).\n     * @method setElement\n     * @param {mouse} mouse\n     * @param {HTMLElement} element\n     */ Mouse.setElement = function(mouse, element) {\n                    mouse.element = element;\n                    element.addEventListener(\"mousemove\", mouse.mousemove);\n                    element.addEventListener(\"mousedown\", mouse.mousedown);\n                    element.addEventListener(\"mouseup\", mouse.mouseup);\n                    element.addEventListener(\"mousewheel\", mouse.mousewheel);\n                    element.addEventListener(\"DOMMouseScroll\", mouse.mousewheel);\n                    element.addEventListener(\"touchmove\", mouse.mousemove);\n                    element.addEventListener(\"touchstart\", mouse.mousedown);\n                    element.addEventListener(\"touchend\", mouse.mouseup);\n                };\n                /**\n     * Clears all captured source events.\n     * @method clearSourceEvents\n     * @param {mouse} mouse\n     */ Mouse.clearSourceEvents = function(mouse) {\n                    mouse.sourceEvents.mousemove = null;\n                    mouse.sourceEvents.mousedown = null;\n                    mouse.sourceEvents.mouseup = null;\n                    mouse.sourceEvents.mousewheel = null;\n                    mouse.wheelDelta = 0;\n                };\n                /**\n     * Sets the mouse position offset.\n     * @method setOffset\n     * @param {mouse} mouse\n     * @param {vector} offset\n     */ Mouse.setOffset = function(mouse, offset) {\n                    mouse.offset.x = offset.x;\n                    mouse.offset.y = offset.y;\n                    mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n                    mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n                };\n                /**\n     * Sets the mouse position scale.\n     * @method setScale\n     * @param {mouse} mouse\n     * @param {vector} scale\n     */ Mouse.setScale = function(mouse, scale) {\n                    mouse.scale.x = scale.x;\n                    mouse.scale.y = scale.y;\n                    mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n                    mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n                };\n                /**\n     * Gets the mouse position relative to an element given a screen pixel ratio.\n     * @method _getRelativeMousePosition\n     * @private\n     * @param {} event\n     * @param {} element\n     * @param {number} pixelRatio\n     * @return {}\n     */ Mouse._getRelativeMousePosition = function(event, element, pixelRatio) {\n                    var elementBounds = element.getBoundingClientRect(), rootNode = document.documentElement || document.body.parentNode || document.body, scrollX = window.pageXOffset !== undefined ? window.pageXOffset : rootNode.scrollLeft, scrollY = window.pageYOffset !== undefined ? window.pageYOffset : rootNode.scrollTop, touches = event.changedTouches, x, y;\n                    if (touches) {\n                        x = touches[0].pageX - elementBounds.left - scrollX;\n                        y = touches[0].pageY - elementBounds.top - scrollY;\n                    } else {\n                        x = event.pageX - elementBounds.left - scrollX;\n                        y = event.pageY - elementBounds.top - scrollY;\n                    }\n                    return {\n                        x: x / (element.clientWidth / (element.width || element.clientWidth) * pixelRatio),\n                        y: y / (element.clientHeight / (element.height || element.clientHeight) * pixelRatio)\n                    };\n                };\n            })();\n        /***/ },\n        /* 14 */ /***/ function(module1, exports, __webpack_require__) {\n            /**\n* The `Matter.Detector` module contains methods for efficiently detecting collisions between a list of bodies using a broadphase algorithm.\n*\n* @class Detector\n*/ var Detector = {};\n            module1.exports = Detector;\n            var Common = __webpack_require__(0);\n            var Collision = __webpack_require__(8);\n            (function() {\n                /**\n     * Creates a new collision detector.\n     * @method create\n     * @param {} options\n     * @return {detector} A new collision detector\n     */ Detector.create = function(options) {\n                    var defaults = {\n                        bodies: [],\n                        pairs: null\n                    };\n                    return Common.extend(defaults, options);\n                };\n                /**\n     * Sets the list of bodies in the detector.\n     * @method setBodies\n     * @param {detector} detector\n     * @param {body[]} bodies\n     */ Detector.setBodies = function(detector, bodies) {\n                    detector.bodies = bodies.slice(0);\n                };\n                /**\n     * Clears the detector including its list of bodies.\n     * @method clear\n     * @param {detector} detector\n     */ Detector.clear = function(detector) {\n                    detector.bodies = [];\n                };\n                /**\n     * Efficiently finds all collisions among all the bodies in `detector.bodies` using a broadphase algorithm.\n     * \n     * _Note:_ The specific ordering of collisions returned is not guaranteed between releases and may change for performance reasons.\n     * If a specific ordering is required then apply a sort to the resulting array.\n     * @method collisions\n     * @param {detector} detector\n     * @return {collision[]} collisions\n     */ Detector.collisions = function(detector) {\n                    var collisions = [], pairs = detector.pairs, bodies = detector.bodies, bodiesLength = bodies.length, canCollide = Detector.canCollide, collides = Collision.collides, i, j;\n                    bodies.sort(Detector._compareBoundsX);\n                    for(i = 0; i < bodiesLength; i++){\n                        var bodyA = bodies[i], boundsA = bodyA.bounds, boundXMax = bodyA.bounds.max.x, boundYMax = bodyA.bounds.max.y, boundYMin = bodyA.bounds.min.y, bodyAStatic = bodyA.isStatic || bodyA.isSleeping, partsALength = bodyA.parts.length, partsASingle = partsALength === 1;\n                        for(j = i + 1; j < bodiesLength; j++){\n                            var bodyB = bodies[j], boundsB = bodyB.bounds;\n                            if (boundsB.min.x > boundXMax) break;\n                            if (boundYMax < boundsB.min.y || boundYMin > boundsB.max.y) continue;\n                            if (bodyAStatic && (bodyB.isStatic || bodyB.isSleeping)) continue;\n                            if (!canCollide(bodyA.collisionFilter, bodyB.collisionFilter)) continue;\n                            var partsBLength = bodyB.parts.length;\n                            if (partsASingle && partsBLength === 1) {\n                                var collision = collides(bodyA, bodyB, pairs);\n                                if (collision) collisions.push(collision);\n                            } else {\n                                var partsAStart = partsALength > 1 ? 1 : 0, partsBStart = partsBLength > 1 ? 1 : 0;\n                                for(var k = partsAStart; k < partsALength; k++){\n                                    var partA = bodyA.parts[k], boundsA = partA.bounds;\n                                    for(var z = partsBStart; z < partsBLength; z++){\n                                        var partB = bodyB.parts[z], boundsB = partB.bounds;\n                                        if (boundsA.min.x > boundsB.max.x || boundsA.max.x < boundsB.min.x || boundsA.max.y < boundsB.min.y || boundsA.min.y > boundsB.max.y) continue;\n                                        var collision = collides(partA, partB, pairs);\n                                        if (collision) collisions.push(collision);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    return collisions;\n                };\n                /**\n     * Returns `true` if both supplied collision filters will allow a collision to occur.\n     * See `body.collisionFilter` for more information.\n     * @method canCollide\n     * @param {} filterA\n     * @param {} filterB\n     * @return {bool} `true` if collision can occur\n     */ Detector.canCollide = function(filterA, filterB) {\n                    if (filterA.group === filterB.group && filterA.group !== 0) return filterA.group > 0;\n                    return (filterA.mask & filterB.category) !== 0 && (filterB.mask & filterA.category) !== 0;\n                };\n                /**\n     * The comparison function used in the broadphase algorithm.\n     * Returns the signed delta of the bodies bounds on the x-axis.\n     * @private\n     * @method _sortCompare\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {number} The signed delta used for sorting\n     */ Detector._compareBoundsX = function(bodyA, bodyB) {\n                    return bodyA.bounds.min.x - bodyB.bounds.min.x;\n                };\n            /*\n    *\n    *  Properties Documentation\n    *\n    */ /**\n     * The array of `Matter.Body` between which the detector finds collisions.\n     * \n     * _Note:_ The order of bodies in this array _is not fixed_ and will be continually managed by the detector.\n     * @property bodies\n     * @type body[]\n     * @default []\n     */ /**\n     * Optional. A `Matter.Pairs` object from which previous collision objects may be reused. Intended for internal `Matter.Engine` usage.\n     * @property pairs\n     * @type {pairs|null}\n     * @default null\n     */ })();\n        /***/ },\n        /* 15 */ /***/ function(module1, exports, __webpack_require__) {\n            /**\n* The `Matter.Plugin` module contains functions for registering and installing plugins on modules.\n*\n* @class Plugin\n*/ var Plugin = {};\n            module1.exports = Plugin;\n            var Common = __webpack_require__(0);\n            (function() {\n                Plugin._registry = {};\n                /**\n     * Registers a plugin object so it can be resolved later by name.\n     * @method register\n     * @param plugin {} The plugin to register.\n     * @return {object} The plugin.\n     */ Plugin.register = function(plugin) {\n                    if (!Plugin.isPlugin(plugin)) Common.warn(\"Plugin.register:\", Plugin.toString(plugin), \"does not implement all required fields.\");\n                    if (plugin.name in Plugin._registry) {\n                        var registered = Plugin._registry[plugin.name], pluginVersion = Plugin.versionParse(plugin.version).number, registeredVersion = Plugin.versionParse(registered.version).number;\n                        if (pluginVersion > registeredVersion) {\n                            Common.warn(\"Plugin.register:\", Plugin.toString(registered), \"was upgraded to\", Plugin.toString(plugin));\n                            Plugin._registry[plugin.name] = plugin;\n                        } else if (pluginVersion < registeredVersion) Common.warn(\"Plugin.register:\", Plugin.toString(registered), \"can not be downgraded to\", Plugin.toString(plugin));\n                        else if (plugin !== registered) Common.warn(\"Plugin.register:\", Plugin.toString(plugin), \"is already registered to different plugin object\");\n                    } else Plugin._registry[plugin.name] = plugin;\n                    return plugin;\n                };\n                /**\n     * Resolves a dependency to a plugin object from the registry if it exists. \n     * The `dependency` may contain a version, but only the name matters when resolving.\n     * @method resolve\n     * @param dependency {string} The dependency.\n     * @return {object} The plugin if resolved, otherwise `undefined`.\n     */ Plugin.resolve = function(dependency) {\n                    return Plugin._registry[Plugin.dependencyParse(dependency).name];\n                };\n                /**\n     * Returns a pretty printed plugin name and version.\n     * @method toString\n     * @param plugin {} The plugin.\n     * @return {string} Pretty printed plugin name and version.\n     */ Plugin.toString = function(plugin) {\n                    return typeof plugin === \"string\" ? plugin : (plugin.name || \"anonymous\") + \"@\" + (plugin.version || plugin.range || \"0.0.0\");\n                };\n                /**\n     * Returns `true` if the object meets the minimum standard to be considered a plugin.\n     * This means it must define the following properties:\n     * - `name`\n     * - `version`\n     * - `install`\n     * @method isPlugin\n     * @param obj {} The obj to test.\n     * @return {boolean} `true` if the object can be considered a plugin otherwise `false`.\n     */ Plugin.isPlugin = function(obj) {\n                    return obj && obj.name && obj.version && obj.install;\n                };\n                /**\n     * Returns `true` if a plugin with the given `name` been installed on `module`.\n     * @method isUsed\n     * @param module {} The module.\n     * @param name {string} The plugin name.\n     * @return {boolean} `true` if a plugin with the given `name` been installed on `module`, otherwise `false`.\n     */ Plugin.isUsed = function(module1, name) {\n                    return module1.used.indexOf(name) > -1;\n                };\n                /**\n     * Returns `true` if `plugin.for` is applicable to `module` by comparing against `module.name` and `module.version`.\n     * If `plugin.for` is not specified then it is assumed to be applicable.\n     * The value of `plugin.for` is a string of the format `'module-name'` or `'module-name@version'`.\n     * @method isFor\n     * @param plugin {} The plugin.\n     * @param module {} The module.\n     * @return {boolean} `true` if `plugin.for` is applicable to `module`, otherwise `false`.\n     */ Plugin.isFor = function(plugin, module1) {\n                    var parsed = plugin.for && Plugin.dependencyParse(plugin.for);\n                    return !plugin.for || module1.name === parsed.name && Plugin.versionSatisfies(module1.version, parsed.range);\n                };\n                /**\n     * Installs the plugins by calling `plugin.install` on each plugin specified in `plugins` if passed, otherwise `module.uses`.\n     * For installing plugins on `Matter` see the convenience function `Matter.use`.\n     * Plugins may be specified either by their name or a reference to the plugin object.\n     * Plugins themselves may specify further dependencies, but each plugin is installed only once.\n     * Order is important, a topological sort is performed to find the best resulting order of installation.\n     * This sorting attempts to satisfy every dependency's requested ordering, but may not be exact in all cases.\n     * This function logs the resulting status of each dependency in the console, along with any warnings.\n     * - A green tick ✅ indicates a dependency was resolved and installed.\n     * - An orange diamond 🔶 indicates a dependency was resolved but a warning was thrown for it or one if its dependencies.\n     * - A red cross ❌ indicates a dependency could not be resolved.\n     * Avoid calling this function multiple times on the same module unless you intend to manually control installation order.\n     * @method use\n     * @param module {} The module install plugins on.\n     * @param [plugins=module.uses] {} The plugins to install on module (optional, defaults to `module.uses`).\n     */ Plugin.use = function(module1, plugins) {\n                    module1.uses = (module1.uses || []).concat(plugins || []);\n                    if (module1.uses.length === 0) {\n                        Common.warn(\"Plugin.use:\", Plugin.toString(module1), \"does not specify any dependencies to install.\");\n                        return;\n                    }\n                    var dependencies = Plugin.dependencies(module1), sortedDependencies = Common.topologicalSort(dependencies), status = [];\n                    for(var i = 0; i < sortedDependencies.length; i += 1){\n                        if (sortedDependencies[i] === module1.name) continue;\n                        var plugin = Plugin.resolve(sortedDependencies[i]);\n                        if (!plugin) {\n                            status.push(\"❌ \" + sortedDependencies[i]);\n                            continue;\n                        }\n                        if (Plugin.isUsed(module1, plugin.name)) continue;\n                        if (!Plugin.isFor(plugin, module1)) {\n                            Common.warn(\"Plugin.use:\", Plugin.toString(plugin), \"is for\", plugin.for, \"but installed on\", Plugin.toString(module1) + \".\");\n                            plugin._warned = true;\n                        }\n                        if (plugin.install) plugin.install(module1);\n                        else {\n                            Common.warn(\"Plugin.use:\", Plugin.toString(plugin), \"does not specify an install function.\");\n                            plugin._warned = true;\n                        }\n                        if (plugin._warned) {\n                            status.push(\"\\uD83D\\uDD36 \" + Plugin.toString(plugin));\n                            delete plugin._warned;\n                        } else status.push(\"✅ \" + Plugin.toString(plugin));\n                        module1.used.push(plugin.name);\n                    }\n                    if (status.length > 0) Common.info(status.join(\"  \"));\n                };\n                /**\n     * Recursively finds all of a module's dependencies and returns a flat dependency graph.\n     * @method dependencies\n     * @param module {} The module.\n     * @return {object} A dependency graph.\n     */ Plugin.dependencies = function(module1, tracked) {\n                    var parsedBase = Plugin.dependencyParse(module1), name = parsedBase.name;\n                    tracked = tracked || {};\n                    if (name in tracked) return;\n                    module1 = Plugin.resolve(module1) || module1;\n                    tracked[name] = Common.map(module1.uses || [], function(dependency) {\n                        if (Plugin.isPlugin(dependency)) Plugin.register(dependency);\n                        var parsed = Plugin.dependencyParse(dependency), resolved = Plugin.resolve(dependency);\n                        if (resolved && !Plugin.versionSatisfies(resolved.version, parsed.range)) {\n                            Common.warn(\"Plugin.dependencies:\", Plugin.toString(resolved), \"does not satisfy\", Plugin.toString(parsed), \"used by\", Plugin.toString(parsedBase) + \".\");\n                            resolved._warned = true;\n                            module1._warned = true;\n                        } else if (!resolved) {\n                            Common.warn(\"Plugin.dependencies:\", Plugin.toString(dependency), \"used by\", Plugin.toString(parsedBase), \"could not be resolved.\");\n                            module1._warned = true;\n                        }\n                        return parsed.name;\n                    });\n                    for(var i = 0; i < tracked[name].length; i += 1)Plugin.dependencies(tracked[name][i], tracked);\n                    return tracked;\n                };\n                /**\n     * Parses a dependency string into its components.\n     * The `dependency` is a string of the format `'module-name'` or `'module-name@version'`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * This function can also handle dependencies that are already resolved (e.g. a module object).\n     * @method dependencyParse\n     * @param dependency {string} The dependency of the format `'module-name'` or `'module-name@version'`.\n     * @return {object} The dependency parsed into its components.\n     */ Plugin.dependencyParse = function(dependency) {\n                    if (Common.isString(dependency)) {\n                        var pattern = /^[\\w-]+(@(\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-+]+)?))?$/;\n                        if (!pattern.test(dependency)) Common.warn(\"Plugin.dependencyParse:\", dependency, \"is not a valid dependency string.\");\n                        return {\n                            name: dependency.split(\"@\")[0],\n                            range: dependency.split(\"@\")[1] || \"*\"\n                        };\n                    }\n                    return {\n                        name: dependency.name,\n                        range: dependency.range || dependency.version\n                    };\n                };\n                /**\n     * Parses a version string into its components.  \n     * Versions are strictly of the format `x.y.z` (as in [semver](http://semver.org/)).\n     * Versions may optionally have a prerelease tag in the format `x.y.z-alpha`.\n     * Ranges are a strict subset of [npm ranges](https://docs.npmjs.com/misc/semver#advanced-range-syntax).\n     * Only the following range types are supported:\n     * - Tilde ranges e.g. `~1.2.3`\n     * - Caret ranges e.g. `^1.2.3`\n     * - Greater than ranges e.g. `>1.2.3`\n     * - Greater than or equal ranges e.g. `>=1.2.3`\n     * - Exact version e.g. `1.2.3`\n     * - Any version `*`\n     * @method versionParse\n     * @param range {string} The version string.\n     * @return {object} The version range parsed into its components.\n     */ Plugin.versionParse = function(range) {\n                    var pattern = /^(\\*)|(\\^|~|>=|>)?\\s*((\\d+)\\.(\\d+)\\.(\\d+))(-[0-9A-Za-z-+]+)?$/;\n                    if (!pattern.test(range)) Common.warn(\"Plugin.versionParse:\", range, \"is not a valid version or range.\");\n                    var parts = pattern.exec(range);\n                    var major = Number(parts[4]);\n                    var minor = Number(parts[5]);\n                    var patch = Number(parts[6]);\n                    return {\n                        isRange: Boolean(parts[1] || parts[2]),\n                        version: parts[3],\n                        range: range,\n                        operator: parts[1] || parts[2] || \"\",\n                        major: major,\n                        minor: minor,\n                        patch: patch,\n                        parts: [\n                            major,\n                            minor,\n                            patch\n                        ],\n                        prerelease: parts[7],\n                        number: major * 1e8 + minor * 1e4 + patch\n                    };\n                };\n                /**\n     * Returns `true` if `version` satisfies the given `range`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * If a version or range is not specified, then any version (`*`) is assumed to satisfy.\n     * @method versionSatisfies\n     * @param version {string} The version string.\n     * @param range {string} The range string.\n     * @return {boolean} `true` if `version` satisfies `range`, otherwise `false`.\n     */ Plugin.versionSatisfies = function(version, range) {\n                    range = range || \"*\";\n                    var r = Plugin.versionParse(range), v = Plugin.versionParse(version);\n                    if (r.isRange) {\n                        if (r.operator === \"*\" || version === \"*\") return true;\n                        if (r.operator === \">\") return v.number > r.number;\n                        if (r.operator === \">=\") return v.number >= r.number;\n                        if (r.operator === \"~\") return v.major === r.major && v.minor === r.minor && v.patch >= r.patch;\n                        if (r.operator === \"^\") {\n                            if (r.major > 0) return v.major === r.major && v.number >= r.number;\n                            if (r.minor > 0) return v.minor === r.minor && v.patch >= r.patch;\n                            return v.patch === r.patch;\n                        }\n                    }\n                    return version === range || version === \"*\";\n                };\n            })();\n        /***/ },\n        /* 16 */ /***/ function(module1, exports, __webpack_require__) {\n            /**\n* The `Matter.Render` module is a simple canvas based renderer for visualising instances of `Matter.Engine`.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* It includes a number of drawing options including wireframe, vector with support for sprites and viewports.\n*\n* @class Render\n*/ var Render = {};\n            module1.exports = Render;\n            var Common = __webpack_require__(0);\n            var Composite = __webpack_require__(5);\n            var Bounds = __webpack_require__(1);\n            var Events = __webpack_require__(4);\n            var Vector = __webpack_require__(2);\n            var Mouse = __webpack_require__(13);\n            (function() {\n                var _requestAnimationFrame, _cancelAnimationFrame;\n                if (typeof window !== \"undefined\") {\n                    _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame || function(callback) {\n                        window.setTimeout(function() {\n                            callback(Common.now());\n                        }, 1000 / 60);\n                    };\n                    _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n                }\n                Render._goodFps = 30;\n                Render._goodDelta = 1000 / 60;\n                /**\n     * Creates a new renderer. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {render} A new renderer\n     */ Render.create = function(options) {\n                    var defaults = {\n                        controller: Render,\n                        engine: null,\n                        element: null,\n                        canvas: null,\n                        mouse: null,\n                        frameRequestId: null,\n                        timing: {\n                            historySize: 60,\n                            delta: 0,\n                            deltaHistory: [],\n                            lastTime: 0,\n                            lastTimestamp: 0,\n                            lastElapsed: 0,\n                            timestampElapsed: 0,\n                            timestampElapsedHistory: [],\n                            engineDeltaHistory: [],\n                            engineElapsedHistory: [],\n                            elapsedHistory: []\n                        },\n                        options: {\n                            width: 800,\n                            height: 600,\n                            pixelRatio: 1,\n                            background: \"#14151f\",\n                            wireframeBackground: \"#14151f\",\n                            hasBounds: !!options.bounds,\n                            enabled: true,\n                            wireframes: true,\n                            showSleeping: true,\n                            showDebug: false,\n                            showStats: false,\n                            showPerformance: false,\n                            showBounds: false,\n                            showVelocity: false,\n                            showCollisions: false,\n                            showSeparations: false,\n                            showAxes: false,\n                            showPositions: false,\n                            showAngleIndicator: false,\n                            showIds: false,\n                            showVertexNumbers: false,\n                            showConvexHulls: false,\n                            showInternalEdges: false,\n                            showMousePosition: false\n                        }\n                    };\n                    var render = Common.extend(defaults, options);\n                    if (render.canvas) {\n                        render.canvas.width = render.options.width || render.canvas.width;\n                        render.canvas.height = render.options.height || render.canvas.height;\n                    }\n                    render.mouse = options.mouse;\n                    render.engine = options.engine;\n                    render.canvas = render.canvas || _createCanvas(render.options.width, render.options.height);\n                    render.context = render.canvas.getContext(\"2d\");\n                    render.textures = {};\n                    render.bounds = render.bounds || {\n                        min: {\n                            x: 0,\n                            y: 0\n                        },\n                        max: {\n                            x: render.canvas.width,\n                            y: render.canvas.height\n                        }\n                    };\n                    // for temporary back compatibility only\n                    render.options.showBroadphase = false;\n                    if (render.options.pixelRatio !== 1) Render.setPixelRatio(render, render.options.pixelRatio);\n                    if (Common.isElement(render.element)) render.element.appendChild(render.canvas);\n                    else if (!render.canvas.parentNode) Common.log(\"Render.create: options.element was undefined, render.canvas was created but not appended\", \"warn\");\n                    return render;\n                };\n                /**\n     * Continuously updates the render canvas on the `requestAnimationFrame` event.\n     * @method run\n     * @param {render} render\n     */ Render.run = function(render) {\n                    (function loop(time) {\n                        render.frameRequestId = _requestAnimationFrame(loop);\n                        _updateTiming(render, time);\n                        Render.world(render, time);\n                        if (render.options.showStats || render.options.showDebug) Render.stats(render, render.context, time);\n                        if (render.options.showPerformance || render.options.showDebug) Render.performance(render, render.context, time);\n                    })();\n                };\n                /**\n     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n     * @method stop\n     * @param {render} render\n     */ Render.stop = function(render) {\n                    _cancelAnimationFrame(render.frameRequestId);\n                };\n                /**\n     * Sets the pixel ratio of the renderer and updates the canvas.\n     * To automatically detect the correct ratio, pass the string `'auto'` for `pixelRatio`.\n     * @method setPixelRatio\n     * @param {render} render\n     * @param {number} pixelRatio\n     */ Render.setPixelRatio = function(render, pixelRatio) {\n                    var options = render.options, canvas = render.canvas;\n                    if (pixelRatio === \"auto\") pixelRatio = _getPixelRatio(canvas);\n                    options.pixelRatio = pixelRatio;\n                    canvas.setAttribute(\"data-pixel-ratio\", pixelRatio);\n                    canvas.width = options.width * pixelRatio;\n                    canvas.height = options.height * pixelRatio;\n                    canvas.style.width = options.width + \"px\";\n                    canvas.style.height = options.height + \"px\";\n                };\n                /**\n     * Positions and sizes the viewport around the given object bounds.\n     * Objects must have at least one of the following properties:\n     * - `object.bounds`\n     * - `object.position`\n     * - `object.min` and `object.max`\n     * - `object.x` and `object.y`\n     * @method lookAt\n     * @param {render} render\n     * @param {object[]} objects\n     * @param {vector} [padding]\n     * @param {bool} [center=true]\n     */ Render.lookAt = function(render, objects, padding, center) {\n                    center = typeof center !== \"undefined\" ? center : true;\n                    objects = Common.isArray(objects) ? objects : [\n                        objects\n                    ];\n                    padding = padding || {\n                        x: 0,\n                        y: 0\n                    };\n                    // find bounds of all objects\n                    var bounds = {\n                        min: {\n                            x: Infinity,\n                            y: Infinity\n                        },\n                        max: {\n                            x: -Infinity,\n                            y: -Infinity\n                        }\n                    };\n                    for(var i = 0; i < objects.length; i += 1){\n                        var object = objects[i], min = object.bounds ? object.bounds.min : object.min || object.position || object, max = object.bounds ? object.bounds.max : object.max || object.position || object;\n                        if (min && max) {\n                            if (min.x < bounds.min.x) bounds.min.x = min.x;\n                            if (max.x > bounds.max.x) bounds.max.x = max.x;\n                            if (min.y < bounds.min.y) bounds.min.y = min.y;\n                            if (max.y > bounds.max.y) bounds.max.y = max.y;\n                        }\n                    }\n                    // find ratios\n                    var width = bounds.max.x - bounds.min.x + 2 * padding.x, height = bounds.max.y - bounds.min.y + 2 * padding.y, viewHeight = render.canvas.height, viewWidth = render.canvas.width, outerRatio = viewWidth / viewHeight, innerRatio = width / height, scaleX = 1, scaleY = 1;\n                    // find scale factor\n                    if (innerRatio > outerRatio) scaleY = innerRatio / outerRatio;\n                    else scaleX = outerRatio / innerRatio;\n                    // enable bounds\n                    render.options.hasBounds = true;\n                    // position and size\n                    render.bounds.min.x = bounds.min.x;\n                    render.bounds.max.x = bounds.min.x + width * scaleX;\n                    render.bounds.min.y = bounds.min.y;\n                    render.bounds.max.y = bounds.min.y + height * scaleY;\n                    // center\n                    if (center) {\n                        render.bounds.min.x += width * 0.5 - width * scaleX * 0.5;\n                        render.bounds.max.x += width * 0.5 - width * scaleX * 0.5;\n                        render.bounds.min.y += height * 0.5 - height * scaleY * 0.5;\n                        render.bounds.max.y += height * 0.5 - height * scaleY * 0.5;\n                    }\n                    // padding\n                    render.bounds.min.x -= padding.x;\n                    render.bounds.max.x -= padding.x;\n                    render.bounds.min.y -= padding.y;\n                    render.bounds.max.y -= padding.y;\n                    // update mouse\n                    if (render.mouse) {\n                        Mouse.setScale(render.mouse, {\n                            x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n                            y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n                        });\n                        Mouse.setOffset(render.mouse, render.bounds.min);\n                    }\n                };\n                /**\n     * Applies viewport transforms based on `render.bounds` to a render context.\n     * @method startViewTransform\n     * @param {render} render\n     */ Render.startViewTransform = function(render) {\n                    var boundsWidth = render.bounds.max.x - render.bounds.min.x, boundsHeight = render.bounds.max.y - render.bounds.min.y, boundsScaleX = boundsWidth / render.options.width, boundsScaleY = boundsHeight / render.options.height;\n                    render.context.setTransform(render.options.pixelRatio / boundsScaleX, 0, 0, render.options.pixelRatio / boundsScaleY, 0, 0);\n                    render.context.translate(-render.bounds.min.x, -render.bounds.min.y);\n                };\n                /**\n     * Resets all transforms on the render context.\n     * @method endViewTransform\n     * @param {render} render\n     */ Render.endViewTransform = function(render) {\n                    render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n                };\n                /**\n     * Renders the given `engine`'s `Matter.World` object.\n     * This is the entry point for all rendering and should be called every time the scene changes.\n     * @method world\n     * @param {render} render\n     */ Render.world = function(render, time) {\n                    var startTime = Common.now(), engine = render.engine, world = engine.world, canvas = render.canvas, context = render.context, options = render.options, timing = render.timing;\n                    var allBodies = Composite.allBodies(world), allConstraints = Composite.allConstraints(world), background = options.wireframes ? options.wireframeBackground : options.background, bodies = [], constraints = [], i;\n                    var event = {\n                        timestamp: engine.timing.timestamp\n                    };\n                    Events.trigger(render, \"beforeRender\", event);\n                    // apply background if it has changed\n                    if (render.currentBackground !== background) _applyBackground(render, background);\n                    // clear the canvas with a transparent fill, to allow the canvas background to show\n                    context.globalCompositeOperation = \"source-in\";\n                    context.fillStyle = \"transparent\";\n                    context.fillRect(0, 0, canvas.width, canvas.height);\n                    context.globalCompositeOperation = \"source-over\";\n                    // handle bounds\n                    if (options.hasBounds) {\n                        // filter out bodies that are not in view\n                        for(i = 0; i < allBodies.length; i++){\n                            var body = allBodies[i];\n                            if (Bounds.overlaps(body.bounds, render.bounds)) bodies.push(body);\n                        }\n                        // filter out constraints that are not in view\n                        for(i = 0; i < allConstraints.length; i++){\n                            var constraint = allConstraints[i], bodyA = constraint.bodyA, bodyB = constraint.bodyB, pointAWorld = constraint.pointA, pointBWorld = constraint.pointB;\n                            if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n                            if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n                            if (!pointAWorld || !pointBWorld) continue;\n                            if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld)) constraints.push(constraint);\n                        }\n                        // transform the view\n                        Render.startViewTransform(render);\n                        // update mouse\n                        if (render.mouse) {\n                            Mouse.setScale(render.mouse, {\n                                x: (render.bounds.max.x - render.bounds.min.x) / render.options.width,\n                                y: (render.bounds.max.y - render.bounds.min.y) / render.options.height\n                            });\n                            Mouse.setOffset(render.mouse, render.bounds.min);\n                        }\n                    } else {\n                        constraints = allConstraints;\n                        bodies = allBodies;\n                        if (render.options.pixelRatio !== 1) render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n                    }\n                    if (!options.wireframes || engine.enableSleeping && options.showSleeping) // fully featured rendering of bodies\n                    Render.bodies(render, bodies, context);\n                    else {\n                        if (options.showConvexHulls) Render.bodyConvexHulls(render, bodies, context);\n                        // optimised method for wireframes only\n                        Render.bodyWireframes(render, bodies, context);\n                    }\n                    if (options.showBounds) Render.bodyBounds(render, bodies, context);\n                    if (options.showAxes || options.showAngleIndicator) Render.bodyAxes(render, bodies, context);\n                    if (options.showPositions) Render.bodyPositions(render, bodies, context);\n                    if (options.showVelocity) Render.bodyVelocity(render, bodies, context);\n                    if (options.showIds) Render.bodyIds(render, bodies, context);\n                    if (options.showSeparations) Render.separations(render, engine.pairs.list, context);\n                    if (options.showCollisions) Render.collisions(render, engine.pairs.list, context);\n                    if (options.showVertexNumbers) Render.vertexNumbers(render, bodies, context);\n                    if (options.showMousePosition) Render.mousePosition(render, render.mouse, context);\n                    Render.constraints(constraints, context);\n                    if (options.hasBounds) // revert view transforms\n                    Render.endViewTransform(render);\n                    Events.trigger(render, \"afterRender\", event);\n                    // log the time elapsed computing this update\n                    timing.lastElapsed = Common.now() - startTime;\n                };\n                /**\n     * Renders statistics about the engine and world useful for debugging.\n     * @private\n     * @method stats\n     * @param {render} render\n     * @param {RenderingContext} context\n     * @param {Number} time\n     */ Render.stats = function(render, context, time) {\n                    var engine = render.engine, world = engine.world, bodies = Composite.allBodies(world), parts = 0, width = 55, height = 44, x = 0, y = 0;\n                    // count parts\n                    for(var i = 0; i < bodies.length; i += 1)parts += bodies[i].parts.length;\n                    // sections\n                    var sections = {\n                        \"Part\": parts,\n                        \"Body\": bodies.length,\n                        \"Cons\": Composite.allConstraints(world).length,\n                        \"Comp\": Composite.allComposites(world).length,\n                        \"Pair\": engine.pairs.list.length\n                    };\n                    // background\n                    context.fillStyle = \"#0e0f19\";\n                    context.fillRect(x, y, width * 5.5, height);\n                    context.font = \"12px Arial\";\n                    context.textBaseline = \"top\";\n                    context.textAlign = \"right\";\n                    // sections\n                    for(var key in sections){\n                        var section = sections[key];\n                        // label\n                        context.fillStyle = \"#aaa\";\n                        context.fillText(key, x + width, y + 8);\n                        // value\n                        context.fillStyle = \"#eee\";\n                        context.fillText(section, x + width, y + 26);\n                        x += width;\n                    }\n                };\n                /**\n     * Renders engine and render performance information.\n     * @private\n     * @method performance\n     * @param {render} render\n     * @param {RenderingContext} context\n     */ Render.performance = function(render, context) {\n                    var engine = render.engine, timing = render.timing, deltaHistory = timing.deltaHistory, elapsedHistory = timing.elapsedHistory, timestampElapsedHistory = timing.timestampElapsedHistory, engineDeltaHistory = timing.engineDeltaHistory, engineElapsedHistory = timing.engineElapsedHistory, lastEngineDelta = engine.timing.lastDelta;\n                    var deltaMean = _mean(deltaHistory), elapsedMean = _mean(elapsedHistory), engineDeltaMean = _mean(engineDeltaHistory), engineElapsedMean = _mean(engineElapsedHistory), timestampElapsedMean = _mean(timestampElapsedHistory), rateMean = timestampElapsedMean / deltaMean || 0, fps = 1000 / deltaMean || 0;\n                    var graphHeight = 4, gap = 12, width = 60, height = 34, x = 10, y = 69;\n                    // background\n                    context.fillStyle = \"#0e0f19\";\n                    context.fillRect(0, 50, gap * 4 + width * 5 + 22, height);\n                    // show FPS\n                    Render.status(context, x, y, width, graphHeight, deltaHistory.length, Math.round(fps) + \" fps\", fps / Render._goodFps, function(i) {\n                        return deltaHistory[i] / deltaMean - 1;\n                    });\n                    // show engine delta\n                    Render.status(context, x + gap + width, y, width, graphHeight, engineDeltaHistory.length, lastEngineDelta.toFixed(2) + \" dt\", Render._goodDelta / lastEngineDelta, function(i) {\n                        return engineDeltaHistory[i] / engineDeltaMean - 1;\n                    });\n                    // show engine update time\n                    Render.status(context, x + (gap + width) * 2, y, width, graphHeight, engineElapsedHistory.length, engineElapsedMean.toFixed(2) + \" ut\", 1 - engineElapsedMean / Render._goodFps, function(i) {\n                        return engineElapsedHistory[i] / engineElapsedMean - 1;\n                    });\n                    // show render time\n                    Render.status(context, x + (gap + width) * 3, y, width, graphHeight, elapsedHistory.length, elapsedMean.toFixed(2) + \" rt\", 1 - elapsedMean / Render._goodFps, function(i) {\n                        return elapsedHistory[i] / elapsedMean - 1;\n                    });\n                    // show effective speed\n                    Render.status(context, x + (gap + width) * 4, y, width, graphHeight, timestampElapsedHistory.length, rateMean.toFixed(2) + \" x\", rateMean * rateMean * rateMean, function(i) {\n                        return (timestampElapsedHistory[i] / deltaHistory[i] / rateMean || 0) - 1;\n                    });\n                };\n                /**\n     * Renders a label, indicator and a chart.\n     * @private\n     * @method status\n     * @param {RenderingContext} context\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {number} count\n     * @param {string} label\n     * @param {string} indicator\n     * @param {function} plotY\n     */ Render.status = function(context, x, y, width, height, count, label, indicator, plotY) {\n                    // background\n                    context.strokeStyle = \"#888\";\n                    context.fillStyle = \"#444\";\n                    context.lineWidth = 1;\n                    context.fillRect(x, y + 7, width, 1);\n                    // chart\n                    context.beginPath();\n                    context.moveTo(x, y + 7 - height * Common.clamp(0.4 * plotY(0), -2, 2));\n                    for(var i = 0; i < width; i += 1)context.lineTo(x + i, y + 7 - (i < count ? height * Common.clamp(0.4 * plotY(i), -2, 2) : 0));\n                    context.stroke();\n                    // indicator\n                    context.fillStyle = \"hsl(\" + Common.clamp(25 + 95 * indicator, 0, 120) + \",100%,60%)\";\n                    context.fillRect(x, y - 7, 4, 4);\n                    // label\n                    context.font = \"12px Arial\";\n                    context.textBaseline = \"middle\";\n                    context.textAlign = \"right\";\n                    context.fillStyle = \"#eee\";\n                    context.fillText(label, x + width, y - 5);\n                };\n                /**\n     * Description\n     * @private\n     * @method constraints\n     * @param {constraint[]} constraints\n     * @param {RenderingContext} context\n     */ Render.constraints = function(constraints, context) {\n                    var c = context;\n                    for(var i = 0; i < constraints.length; i++){\n                        var constraint = constraints[i];\n                        if (!constraint.render.visible || !constraint.pointA || !constraint.pointB) continue;\n                        var bodyA = constraint.bodyA, bodyB = constraint.bodyB, start, end;\n                        if (bodyA) start = Vector.add(bodyA.position, constraint.pointA);\n                        else start = constraint.pointA;\n                        if (constraint.render.type === \"pin\") {\n                            c.beginPath();\n                            c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                            c.closePath();\n                        } else {\n                            if (bodyB) end = Vector.add(bodyB.position, constraint.pointB);\n                            else end = constraint.pointB;\n                            c.beginPath();\n                            c.moveTo(start.x, start.y);\n                            if (constraint.render.type === \"spring\") {\n                                var delta = Vector.sub(end, start), normal = Vector.perp(Vector.normalise(delta)), coils = Math.ceil(Common.clamp(constraint.length / 5, 12, 20)), offset;\n                                for(var j = 1; j < coils; j += 1){\n                                    offset = j % 2 === 0 ? 1 : -1;\n                                    c.lineTo(start.x + delta.x * (j / coils) + normal.x * offset * 4, start.y + delta.y * (j / coils) + normal.y * offset * 4);\n                                }\n                            }\n                            c.lineTo(end.x, end.y);\n                        }\n                        if (constraint.render.lineWidth) {\n                            c.lineWidth = constraint.render.lineWidth;\n                            c.strokeStyle = constraint.render.strokeStyle;\n                            c.stroke();\n                        }\n                        if (constraint.render.anchors) {\n                            c.fillStyle = constraint.render.strokeStyle;\n                            c.beginPath();\n                            c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                            c.arc(end.x, end.y, 3, 0, 2 * Math.PI);\n                            c.closePath();\n                            c.fill();\n                        }\n                    }\n                };\n                /**\n     * Description\n     * @private\n     * @method bodies\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */ Render.bodies = function(render, bodies, context) {\n                    var c = context, engine = render.engine, options = render.options, showInternalEdges = options.showInternalEdges || !options.wireframes, body, part, i, k;\n                    for(i = 0; i < bodies.length; i++){\n                        body = bodies[i];\n                        if (!body.render.visible) continue;\n                        // handle compound parts\n                        for(k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++){\n                            part = body.parts[k];\n                            if (!part.render.visible) continue;\n                            if (options.showSleeping && body.isSleeping) c.globalAlpha = 0.5 * part.render.opacity;\n                            else if (part.render.opacity !== 1) c.globalAlpha = part.render.opacity;\n                            if (part.render.sprite && part.render.sprite.texture && !options.wireframes) {\n                                // part sprite\n                                var sprite = part.render.sprite, texture = _getTexture(render, sprite.texture);\n                                c.translate(part.position.x, part.position.y);\n                                c.rotate(part.angle);\n                                c.drawImage(texture, texture.width * -sprite.xOffset * sprite.xScale, texture.height * -sprite.yOffset * sprite.yScale, texture.width * sprite.xScale, texture.height * sprite.yScale);\n                                // revert translation, hopefully faster than save / restore\n                                c.rotate(-part.angle);\n                                c.translate(-part.position.x, -part.position.y);\n                            } else {\n                                // part polygon\n                                if (part.circleRadius) {\n                                    c.beginPath();\n                                    c.arc(part.position.x, part.position.y, part.circleRadius, 0, 2 * Math.PI);\n                                } else {\n                                    c.beginPath();\n                                    c.moveTo(part.vertices[0].x, part.vertices[0].y);\n                                    for(var j = 1; j < part.vertices.length; j++){\n                                        if (!part.vertices[j - 1].isInternal || showInternalEdges) c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                                        else c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                                        if (part.vertices[j].isInternal && !showInternalEdges) c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                                    }\n                                    c.lineTo(part.vertices[0].x, part.vertices[0].y);\n                                    c.closePath();\n                                }\n                                if (!options.wireframes) {\n                                    c.fillStyle = part.render.fillStyle;\n                                    if (part.render.lineWidth) {\n                                        c.lineWidth = part.render.lineWidth;\n                                        c.strokeStyle = part.render.strokeStyle;\n                                        c.stroke();\n                                    }\n                                    c.fill();\n                                } else {\n                                    c.lineWidth = 1;\n                                    c.strokeStyle = \"#bbb\";\n                                    c.stroke();\n                                }\n                            }\n                            c.globalAlpha = 1;\n                        }\n                    }\n                };\n                /**\n     * Optimised method for drawing body wireframes in one pass\n     * @private\n     * @method bodyWireframes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */ Render.bodyWireframes = function(render, bodies, context) {\n                    var c = context, showInternalEdges = render.options.showInternalEdges, body, part, i, j, k;\n                    c.beginPath();\n                    // render all bodies\n                    for(i = 0; i < bodies.length; i++){\n                        body = bodies[i];\n                        if (!body.render.visible) continue;\n                        // handle compound parts\n                        for(k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++){\n                            part = body.parts[k];\n                            c.moveTo(part.vertices[0].x, part.vertices[0].y);\n                            for(j = 1; j < part.vertices.length; j++){\n                                if (!part.vertices[j - 1].isInternal || showInternalEdges) c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                                else c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                                if (part.vertices[j].isInternal && !showInternalEdges) c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                            }\n                            c.lineTo(part.vertices[0].x, part.vertices[0].y);\n                        }\n                    }\n                    c.lineWidth = 1;\n                    c.strokeStyle = \"#bbb\";\n                    c.stroke();\n                };\n                /**\n     * Optimised method for drawing body convex hull wireframes in one pass\n     * @private\n     * @method bodyConvexHulls\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */ Render.bodyConvexHulls = function(render, bodies, context) {\n                    var c = context, body, part, i, j, k;\n                    c.beginPath();\n                    // render convex hulls\n                    for(i = 0; i < bodies.length; i++){\n                        body = bodies[i];\n                        if (!body.render.visible || body.parts.length === 1) continue;\n                        c.moveTo(body.vertices[0].x, body.vertices[0].y);\n                        for(j = 1; j < body.vertices.length; j++)c.lineTo(body.vertices[j].x, body.vertices[j].y);\n                        c.lineTo(body.vertices[0].x, body.vertices[0].y);\n                    }\n                    c.lineWidth = 1;\n                    c.strokeStyle = \"rgba(255,255,255,0.2)\";\n                    c.stroke();\n                };\n                /**\n     * Renders body vertex numbers.\n     * @private\n     * @method vertexNumbers\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */ Render.vertexNumbers = function(render, bodies, context) {\n                    var c = context, i, j, k;\n                    for(i = 0; i < bodies.length; i++){\n                        var parts = bodies[i].parts;\n                        for(k = parts.length > 1 ? 1 : 0; k < parts.length; k++){\n                            var part = parts[k];\n                            for(j = 0; j < part.vertices.length; j++){\n                                c.fillStyle = \"rgba(255,255,255,0.2)\";\n                                c.fillText(i + \"_\" + j, part.position.x + (part.vertices[j].x - part.position.x) * 0.8, part.position.y + (part.vertices[j].y - part.position.y) * 0.8);\n                            }\n                        }\n                    }\n                };\n                /**\n     * Renders mouse position.\n     * @private\n     * @method mousePosition\n     * @param {render} render\n     * @param {mouse} mouse\n     * @param {RenderingContext} context\n     */ Render.mousePosition = function(render, mouse, context) {\n                    var c = context;\n                    c.fillStyle = \"rgba(255,255,255,0.8)\";\n                    c.fillText(mouse.position.x + \"  \" + mouse.position.y, mouse.position.x + 5, mouse.position.y - 5);\n                };\n                /**\n     * Draws body bounds\n     * @private\n     * @method bodyBounds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */ Render.bodyBounds = function(render, bodies, context) {\n                    var c = context, engine = render.engine, options = render.options;\n                    c.beginPath();\n                    for(var i = 0; i < bodies.length; i++){\n                        var body = bodies[i];\n                        if (body.render.visible) {\n                            var parts = bodies[i].parts;\n                            for(var j = parts.length > 1 ? 1 : 0; j < parts.length; j++){\n                                var part = parts[j];\n                                c.rect(part.bounds.min.x, part.bounds.min.y, part.bounds.max.x - part.bounds.min.x, part.bounds.max.y - part.bounds.min.y);\n                            }\n                        }\n                    }\n                    if (options.wireframes) c.strokeStyle = \"rgba(255,255,255,0.08)\";\n                    else c.strokeStyle = \"rgba(0,0,0,0.1)\";\n                    c.lineWidth = 1;\n                    c.stroke();\n                };\n                /**\n     * Draws body angle indicators and axes\n     * @private\n     * @method bodyAxes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */ Render.bodyAxes = function(render, bodies, context) {\n                    var c = context, engine = render.engine, options = render.options, part, i, j, k;\n                    c.beginPath();\n                    for(i = 0; i < bodies.length; i++){\n                        var body = bodies[i], parts = body.parts;\n                        if (!body.render.visible) continue;\n                        if (options.showAxes) // render all axes\n                        for(j = parts.length > 1 ? 1 : 0; j < parts.length; j++){\n                            part = parts[j];\n                            for(k = 0; k < part.axes.length; k++){\n                                var axis = part.axes[k];\n                                c.moveTo(part.position.x, part.position.y);\n                                c.lineTo(part.position.x + axis.x * 20, part.position.y + axis.y * 20);\n                            }\n                        }\n                        else for(j = parts.length > 1 ? 1 : 0; j < parts.length; j++){\n                            part = parts[j];\n                            for(k = 0; k < part.axes.length; k++){\n                                // render a single axis indicator\n                                c.moveTo(part.position.x, part.position.y);\n                                c.lineTo((part.vertices[0].x + part.vertices[part.vertices.length - 1].x) / 2, (part.vertices[0].y + part.vertices[part.vertices.length - 1].y) / 2);\n                            }\n                        }\n                    }\n                    if (options.wireframes) {\n                        c.strokeStyle = \"indianred\";\n                        c.lineWidth = 1;\n                    } else {\n                        c.strokeStyle = \"rgba(255, 255, 255, 0.4)\";\n                        c.globalCompositeOperation = \"overlay\";\n                        c.lineWidth = 2;\n                    }\n                    c.stroke();\n                    c.globalCompositeOperation = \"source-over\";\n                };\n                /**\n     * Draws body positions\n     * @private\n     * @method bodyPositions\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */ Render.bodyPositions = function(render, bodies, context) {\n                    var c = context, engine = render.engine, options = render.options, body, part, i, k;\n                    c.beginPath();\n                    // render current positions\n                    for(i = 0; i < bodies.length; i++){\n                        body = bodies[i];\n                        if (!body.render.visible) continue;\n                        // handle compound parts\n                        for(k = 0; k < body.parts.length; k++){\n                            part = body.parts[k];\n                            c.arc(part.position.x, part.position.y, 3, 0, 2 * Math.PI, false);\n                            c.closePath();\n                        }\n                    }\n                    if (options.wireframes) c.fillStyle = \"indianred\";\n                    else c.fillStyle = \"rgba(0,0,0,0.5)\";\n                    c.fill();\n                    c.beginPath();\n                    // render previous positions\n                    for(i = 0; i < bodies.length; i++){\n                        body = bodies[i];\n                        if (body.render.visible) {\n                            c.arc(body.positionPrev.x, body.positionPrev.y, 2, 0, 2 * Math.PI, false);\n                            c.closePath();\n                        }\n                    }\n                    c.fillStyle = \"rgba(255,165,0,0.8)\";\n                    c.fill();\n                };\n                /**\n     * Draws body velocity\n     * @private\n     * @method bodyVelocity\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */ Render.bodyVelocity = function(render, bodies, context) {\n                    var c = context;\n                    c.beginPath();\n                    for(var i = 0; i < bodies.length; i++){\n                        var body = bodies[i];\n                        if (!body.render.visible) continue;\n                        c.moveTo(body.position.x, body.position.y);\n                        c.lineTo(body.position.x + (body.position.x - body.positionPrev.x) * 2, body.position.y + (body.position.y - body.positionPrev.y) * 2);\n                    }\n                    c.lineWidth = 3;\n                    c.strokeStyle = \"cornflowerblue\";\n                    c.stroke();\n                };\n                /**\n     * Draws body ids\n     * @private\n     * @method bodyIds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */ Render.bodyIds = function(render, bodies, context) {\n                    var c = context, i, j;\n                    for(i = 0; i < bodies.length; i++){\n                        if (!bodies[i].render.visible) continue;\n                        var parts = bodies[i].parts;\n                        for(j = parts.length > 1 ? 1 : 0; j < parts.length; j++){\n                            var part = parts[j];\n                            c.font = \"12px Arial\";\n                            c.fillStyle = \"rgba(255,255,255,0.5)\";\n                            c.fillText(part.id, part.position.x + 10, part.position.y - 10);\n                        }\n                    }\n                };\n                /**\n     * Description\n     * @private\n     * @method collisions\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */ Render.collisions = function(render, pairs, context) {\n                    var c = context, options = render.options, pair, collision, corrected, bodyA, bodyB, i, j;\n                    c.beginPath();\n                    // render collision positions\n                    for(i = 0; i < pairs.length; i++){\n                        pair = pairs[i];\n                        if (!pair.isActive) continue;\n                        collision = pair.collision;\n                        for(j = 0; j < pair.activeContacts.length; j++){\n                            var contact = pair.activeContacts[j], vertex = contact.vertex;\n                            c.rect(vertex.x - 1.5, vertex.y - 1.5, 3.5, 3.5);\n                        }\n                    }\n                    if (options.wireframes) c.fillStyle = \"rgba(255,255,255,0.7)\";\n                    else c.fillStyle = \"orange\";\n                    c.fill();\n                    c.beginPath();\n                    // render collision normals\n                    for(i = 0; i < pairs.length; i++){\n                        pair = pairs[i];\n                        if (!pair.isActive) continue;\n                        collision = pair.collision;\n                        if (pair.activeContacts.length > 0) {\n                            var normalPosX = pair.activeContacts[0].vertex.x, normalPosY = pair.activeContacts[0].vertex.y;\n                            if (pair.activeContacts.length === 2) {\n                                normalPosX = (pair.activeContacts[0].vertex.x + pair.activeContacts[1].vertex.x) / 2;\n                                normalPosY = (pair.activeContacts[0].vertex.y + pair.activeContacts[1].vertex.y) / 2;\n                            }\n                            if (collision.bodyB === collision.supports[0].body || collision.bodyA.isStatic === true) c.moveTo(normalPosX - collision.normal.x * 8, normalPosY - collision.normal.y * 8);\n                            else c.moveTo(normalPosX + collision.normal.x * 8, normalPosY + collision.normal.y * 8);\n                            c.lineTo(normalPosX, normalPosY);\n                        }\n                    }\n                    if (options.wireframes) c.strokeStyle = \"rgba(255,165,0,0.7)\";\n                    else c.strokeStyle = \"orange\";\n                    c.lineWidth = 1;\n                    c.stroke();\n                };\n                /**\n     * Description\n     * @private\n     * @method separations\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */ Render.separations = function(render, pairs, context) {\n                    var c = context, options = render.options, pair, collision, corrected, bodyA, bodyB, i, j;\n                    c.beginPath();\n                    // render separations\n                    for(i = 0; i < pairs.length; i++){\n                        pair = pairs[i];\n                        if (!pair.isActive) continue;\n                        collision = pair.collision;\n                        bodyA = collision.bodyA;\n                        bodyB = collision.bodyB;\n                        var k = 1;\n                        if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n                        if (bodyB.isStatic) k = 0;\n                        c.moveTo(bodyB.position.x, bodyB.position.y);\n                        c.lineTo(bodyB.position.x - collision.penetration.x * k, bodyB.position.y - collision.penetration.y * k);\n                        k = 1;\n                        if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n                        if (bodyA.isStatic) k = 0;\n                        c.moveTo(bodyA.position.x, bodyA.position.y);\n                        c.lineTo(bodyA.position.x + collision.penetration.x * k, bodyA.position.y + collision.penetration.y * k);\n                    }\n                    if (options.wireframes) c.strokeStyle = \"rgba(255,165,0,0.5)\";\n                    else c.strokeStyle = \"orange\";\n                    c.stroke();\n                };\n                /**\n     * Description\n     * @private\n     * @method inspector\n     * @param {inspector} inspector\n     * @param {RenderingContext} context\n     */ Render.inspector = function(inspector, context) {\n                    var engine = inspector.engine, selected = inspector.selected, render = inspector.render, options = render.options, bounds;\n                    if (options.hasBounds) {\n                        var boundsWidth = render.bounds.max.x - render.bounds.min.x, boundsHeight = render.bounds.max.y - render.bounds.min.y, boundsScaleX = boundsWidth / render.options.width, boundsScaleY = boundsHeight / render.options.height;\n                        context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n                        context.translate(-render.bounds.min.x, -render.bounds.min.y);\n                    }\n                    for(var i = 0; i < selected.length; i++){\n                        var item = selected[i].data;\n                        context.translate(0.5, 0.5);\n                        context.lineWidth = 1;\n                        context.strokeStyle = \"rgba(255,165,0,0.9)\";\n                        context.setLineDash([\n                            1,\n                            2\n                        ]);\n                        switch(item.type){\n                            case \"body\":\n                                // render body selections\n                                bounds = item.bounds;\n                                context.beginPath();\n                                context.rect(Math.floor(bounds.min.x - 3), Math.floor(bounds.min.y - 3), Math.floor(bounds.max.x - bounds.min.x + 6), Math.floor(bounds.max.y - bounds.min.y + 6));\n                                context.closePath();\n                                context.stroke();\n                                break;\n                            case \"constraint\":\n                                // render constraint selections\n                                var point = item.pointA;\n                                if (item.bodyA) point = item.pointB;\n                                context.beginPath();\n                                context.arc(point.x, point.y, 10, 0, 2 * Math.PI);\n                                context.closePath();\n                                context.stroke();\n                                break;\n                        }\n                        context.setLineDash([]);\n                        context.translate(-0.5, -0.5);\n                    }\n                    // render selection region\n                    if (inspector.selectStart !== null) {\n                        context.translate(0.5, 0.5);\n                        context.lineWidth = 1;\n                        context.strokeStyle = \"rgba(255,165,0,0.6)\";\n                        context.fillStyle = \"rgba(255,165,0,0.1)\";\n                        bounds = inspector.selectBounds;\n                        context.beginPath();\n                        context.rect(Math.floor(bounds.min.x), Math.floor(bounds.min.y), Math.floor(bounds.max.x - bounds.min.x), Math.floor(bounds.max.y - bounds.min.y));\n                        context.closePath();\n                        context.stroke();\n                        context.fill();\n                        context.translate(-0.5, -0.5);\n                    }\n                    if (options.hasBounds) context.setTransform(1, 0, 0, 1, 0, 0);\n                };\n                /**\n     * Updates render timing.\n     * @method _updateTiming\n     * @private\n     * @param {render} render\n     * @param {number} time\n     */ var _updateTiming = function(render, time) {\n                    var engine = render.engine, timing = render.timing, historySize = timing.historySize, timestamp = engine.timing.timestamp;\n                    timing.delta = time - timing.lastTime || Render._goodDelta;\n                    timing.lastTime = time;\n                    timing.timestampElapsed = timestamp - timing.lastTimestamp || 0;\n                    timing.lastTimestamp = timestamp;\n                    timing.deltaHistory.unshift(timing.delta);\n                    timing.deltaHistory.length = Math.min(timing.deltaHistory.length, historySize);\n                    timing.engineDeltaHistory.unshift(engine.timing.lastDelta);\n                    timing.engineDeltaHistory.length = Math.min(timing.engineDeltaHistory.length, historySize);\n                    timing.timestampElapsedHistory.unshift(timing.timestampElapsed);\n                    timing.timestampElapsedHistory.length = Math.min(timing.timestampElapsedHistory.length, historySize);\n                    timing.engineElapsedHistory.unshift(engine.timing.lastElapsed);\n                    timing.engineElapsedHistory.length = Math.min(timing.engineElapsedHistory.length, historySize);\n                    timing.elapsedHistory.unshift(timing.lastElapsed);\n                    timing.elapsedHistory.length = Math.min(timing.elapsedHistory.length, historySize);\n                };\n                /**\n     * Returns the mean value of the given numbers.\n     * @method _mean\n     * @private\n     * @param {Number[]} values\n     * @return {Number} the mean of given values\n     */ var _mean = function(values) {\n                    var result = 0;\n                    for(var i = 0; i < values.length; i += 1)result += values[i];\n                    return result / values.length || 0;\n                };\n                /**\n     * @method _createCanvas\n     * @private\n     * @param {} width\n     * @param {} height\n     * @return canvas\n     */ var _createCanvas = function(width, height) {\n                    var canvas = document.createElement(\"canvas\");\n                    canvas.width = width;\n                    canvas.height = height;\n                    canvas.oncontextmenu = function() {\n                        return false;\n                    };\n                    canvas.onselectstart = function() {\n                        return false;\n                    };\n                    return canvas;\n                };\n                /**\n     * Gets the pixel ratio of the canvas.\n     * @method _getPixelRatio\n     * @private\n     * @param {HTMLElement} canvas\n     * @return {Number} pixel ratio\n     */ var _getPixelRatio = function(canvas) {\n                    var context = canvas.getContext(\"2d\"), devicePixelRatio = window.devicePixelRatio || 1, backingStorePixelRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1;\n                    return devicePixelRatio / backingStorePixelRatio;\n                };\n                /**\n     * Gets the requested texture (an Image) via its path\n     * @method _getTexture\n     * @private\n     * @param {render} render\n     * @param {string} imagePath\n     * @return {Image} texture\n     */ var _getTexture = function(render, imagePath) {\n                    var image = render.textures[imagePath];\n                    if (image) return image;\n                    image = render.textures[imagePath] = new Image();\n                    image.src = imagePath;\n                    return image;\n                };\n                /**\n     * Applies the background to the canvas using CSS.\n     * @method applyBackground\n     * @private\n     * @param {render} render\n     * @param {string} background\n     */ var _applyBackground = function(render, background) {\n                    var cssBackground = background;\n                    if (/(jpg|gif|png)$/.test(background)) cssBackground = \"url(\" + background + \")\";\n                    render.canvas.style.background = cssBackground;\n                    render.canvas.style.backgroundSize = \"contain\";\n                    render.currentBackground = background;\n                };\n            /*\n    *\n    *  Events Documentation\n    *\n    */ /**\n    * Fired before rendering\n    *\n    * @event beforeRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */ /**\n    * Fired after rendering\n    *\n    * @event afterRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */ /*\n    *\n    *  Properties Documentation\n    *\n    */ /**\n     * A back-reference to the `Matter.Render` module.\n     *\n     * @property controller\n     * @type render\n     */ /**\n     * A reference to the `Matter.Engine` instance to be used.\n     *\n     * @property engine\n     * @type engine\n     */ /**\n     * A reference to the element where the canvas is to be inserted (if `render.canvas` has not been specified)\n     *\n     * @property element\n     * @type HTMLElement\n     * @default null\n     */ /**\n     * The canvas element to render to. If not specified, one will be created if `render.element` has been specified.\n     *\n     * @property canvas\n     * @type HTMLCanvasElement\n     * @default null\n     */ /**\n     * A `Bounds` object that specifies the drawing view region.\n     * Rendering will be automatically transformed and scaled to fit within the canvas size (`render.options.width` and `render.options.height`).\n     * This allows for creating views that can pan or zoom around the scene.\n     * You must also set `render.options.hasBounds` to `true` to enable bounded rendering.\n     *\n     * @property bounds\n     * @type bounds\n     */ /**\n     * The 2d rendering context from the `render.canvas` element.\n     *\n     * @property context\n     * @type CanvasRenderingContext2D\n     */ /**\n     * The sprite texture cache.\n     *\n     * @property textures\n     * @type {}\n     */ /**\n     * The mouse to render if `render.options.showMousePosition` is enabled.\n     *\n     * @property mouse\n     * @type mouse\n     * @default null\n     */ /**\n     * The configuration options of the renderer.\n     *\n     * @property options\n     * @type {}\n     */ /**\n     * The target width in pixels of the `render.canvas` to be created.\n     * See also the `options.pixelRatio` property to change render quality.\n     *\n     * @property options.width\n     * @type number\n     * @default 800\n     */ /**\n     * The target height in pixels of the `render.canvas` to be created.\n     * See also the `options.pixelRatio` property to change render quality.\n     *\n     * @property options.height\n     * @type number\n     * @default 600\n     */ /**\n     * The [pixel ratio](https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio) to use when rendering.\n     *\n     * @property options.pixelRatio\n     * @type number\n     * @default 1\n     */ /**\n     * A CSS background color string to use when `render.options.wireframes` is disabled.\n     * This may be also set to `'transparent'` or equivalent.\n     *\n     * @property options.background\n     * @type string\n     * @default '#14151f'\n     */ /**\n     * A CSS background color string to use when `render.options.wireframes` is enabled.\n     * This may be also set to `'transparent'` or equivalent.\n     *\n     * @property options.wireframeBackground\n     * @type string\n     * @default '#14151f'\n     */ /**\n     * A flag that specifies if `render.bounds` should be used when rendering.\n     *\n     * @property options.hasBounds\n     * @type boolean\n     * @default false\n     */ /**\n     * A flag to enable or disable all debug information overlays together.  \n     * This includes and has priority over the values of:\n     *\n     * - `render.options.showStats`\n     * - `render.options.showPerformance`\n     *\n     * @property options.showDebug\n     * @type boolean\n     * @default false\n     */ /**\n     * A flag to enable or disable the engine stats info overlay.  \n     * From left to right, the values shown are:\n     *\n     * - body parts total\n     * - body total\n     * - constraints total\n     * - composites total\n     * - collision pairs total\n     *\n     * @property options.showStats\n     * @type boolean\n     * @default false\n     */ /**\n     * A flag to enable or disable performance charts.  \n     * From left to right, the values shown are:\n     *\n     * - average render frequency (e.g. 60 fps)\n     * - exact engine delta time used for last update (e.g. 16.66ms)\n     * - average engine execution duration (e.g. 5.00ms)\n     * - average render execution duration (e.g. 0.40ms)\n     * - average effective play speed (e.g. '1.00x' is 'real-time')\n     *\n     * Each value is recorded over a fixed sample of past frames (60 frames).\n     *\n     * A chart shown below each value indicates the variance from the average over the sample.\n     * The more stable or fixed the value is the flatter the chart will appear.\n     *\n     * @property options.showPerformance\n     * @type boolean\n     * @default false\n     */ /**\n     * A flag to enable or disable rendering entirely.\n     *\n     * @property options.enabled\n     * @type boolean\n     * @default false\n     */ /**\n     * A flag to toggle wireframe rendering otherwise solid fill rendering is used.\n     *\n     * @property options.wireframes\n     * @type boolean\n     * @default true\n     */ /**\n     * A flag to enable or disable sleeping bodies indicators.\n     *\n     * @property options.showSleeping\n     * @type boolean\n     * @default true\n     */ /**\n     * A flag to enable or disable the debug information overlay.\n     *\n     * @property options.showDebug\n     * @type boolean\n     * @default false\n     */ /**\n     * A flag to enable or disable the collision broadphase debug overlay.\n     *\n     * @deprecated no longer implemented\n     * @property options.showBroadphase\n     * @type boolean\n     * @default false\n     */ /**\n     * A flag to enable or disable the body bounds debug overlay.\n     *\n     * @property options.showBounds\n     * @type boolean\n     * @default false\n     */ /**\n     * A flag to enable or disable the body velocity debug overlay.\n     *\n     * @property options.showVelocity\n     * @type boolean\n     * @default false\n     */ /**\n     * A flag to enable or disable the body collisions debug overlay.\n     *\n     * @property options.showCollisions\n     * @type boolean\n     * @default false\n     */ /**\n     * A flag to enable or disable the collision resolver separations debug overlay.\n     *\n     * @property options.showSeparations\n     * @type boolean\n     * @default false\n     */ /**\n     * A flag to enable or disable the body axes debug overlay.\n     *\n     * @property options.showAxes\n     * @type boolean\n     * @default false\n     */ /**\n     * A flag to enable or disable the body positions debug overlay.\n     *\n     * @property options.showPositions\n     * @type boolean\n     * @default false\n     */ /**\n     * A flag to enable or disable the body angle debug overlay.\n     *\n     * @property options.showAngleIndicator\n     * @type boolean\n     * @default false\n     */ /**\n     * A flag to enable or disable the body and part ids debug overlay.\n     *\n     * @property options.showIds\n     * @type boolean\n     * @default false\n     */ /**\n     * A flag to enable or disable the body vertex numbers debug overlay.\n     *\n     * @property options.showVertexNumbers\n     * @type boolean\n     * @default false\n     */ /**\n     * A flag to enable or disable the body convex hulls debug overlay.\n     *\n     * @property options.showConvexHulls\n     * @type boolean\n     * @default false\n     */ /**\n     * A flag to enable or disable the body internal edges debug overlay.\n     *\n     * @property options.showInternalEdges\n     * @type boolean\n     * @default false\n     */ /**\n     * A flag to enable or disable the mouse position debug overlay.\n     *\n     * @property options.showMousePosition\n     * @type boolean\n     * @default false\n     */ })();\n        /***/ },\n        /* 17 */ /***/ function(module1, exports) {\n            /**\n* The `Matter.Contact` module contains methods for creating and manipulating collision contacts.\n*\n* @class Contact\n*/ var Contact = {};\n            module1.exports = Contact;\n            (function() {\n                /**\n     * Creates a new contact.\n     * @method create\n     * @param {vertex} vertex\n     * @return {contact} A new contact\n     */ Contact.create = function(vertex) {\n                    return {\n                        vertex: vertex,\n                        normalImpulse: 0,\n                        tangentImpulse: 0\n                    };\n                };\n            })();\n        /***/ },\n        /* 18 */ /***/ function(module1, exports, __webpack_require__) {\n            /**\n* The `Matter.Engine` module contains methods for creating and manipulating engines.\n* An engine is a controller that manages updating the simulation of the world.\n* See `Matter.Runner` for an optional game loop utility.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Engine\n*/ var Engine = {};\n            module1.exports = Engine;\n            var Sleeping = __webpack_require__(7);\n            var Resolver = __webpack_require__(19);\n            var Detector = __webpack_require__(14);\n            var Pairs = __webpack_require__(20);\n            var Events = __webpack_require__(4);\n            var Composite = __webpack_require__(5);\n            var Constraint = __webpack_require__(10);\n            var Common = __webpack_require__(0);\n            var Body = __webpack_require__(6);\n            (function() {\n                /**\n     * Creates a new engine. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {engine} engine\n     */ Engine.create = function(options) {\n                    options = options || {};\n                    var defaults = {\n                        positionIterations: 6,\n                        velocityIterations: 4,\n                        constraintIterations: 2,\n                        enableSleeping: false,\n                        events: [],\n                        plugin: {},\n                        gravity: {\n                            x: 0,\n                            y: 1,\n                            scale: 0.001\n                        },\n                        timing: {\n                            timestamp: 0,\n                            timeScale: 1,\n                            lastDelta: 0,\n                            lastElapsed: 0\n                        }\n                    };\n                    var engine = Common.extend(defaults, options);\n                    engine.world = options.world || Composite.create({\n                        label: \"World\"\n                    });\n                    engine.pairs = options.pairs || Pairs.create();\n                    engine.detector = options.detector || Detector.create();\n                    // for temporary back compatibility only\n                    engine.grid = {\n                        buckets: []\n                    };\n                    engine.world.gravity = engine.gravity;\n                    engine.broadphase = engine.grid;\n                    engine.metrics = {};\n                    return engine;\n                };\n                /**\n     * Moves the simulation forward in time by `delta` ms.\n     * The `correction` argument is an optional `Number` that specifies the time correction factor to apply to the update.\n     * This can help improve the accuracy of the simulation in cases where `delta` is changing between updates.\n     * The value of `correction` is defined as `delta / lastDelta`, i.e. the percentage change of `delta` over the last step.\n     * Therefore the value is always `1` (no correction) when `delta` constant (or when no correction is desired, which is the default).\n     * See the paper on <a href=\"http://lonesock.net/article/verlet.html\">Time Corrected Verlet</a> for more information.\n     *\n     * Triggers `beforeUpdate` and `afterUpdate` events.\n     * Triggers `collisionStart`, `collisionActive` and `collisionEnd` events.\n     * @method update\n     * @param {engine} engine\n     * @param {number} [delta=16.666]\n     * @param {number} [correction=1]\n     */ Engine.update = function(engine, delta, correction) {\n                    var startTime = Common.now();\n                    delta = delta || 1000 / 60;\n                    correction = correction || 1;\n                    var world = engine.world, detector = engine.detector, pairs = engine.pairs, timing = engine.timing, timestamp = timing.timestamp, i;\n                    // increment timestamp\n                    timing.timestamp += delta * timing.timeScale;\n                    timing.lastDelta = delta * timing.timeScale;\n                    // create an event object\n                    var event = {\n                        timestamp: timing.timestamp\n                    };\n                    Events.trigger(engine, \"beforeUpdate\", event);\n                    // get all bodies and all constraints in the world\n                    var allBodies = Composite.allBodies(world), allConstraints = Composite.allConstraints(world);\n                    // update the detector bodies if they have changed\n                    if (world.isModified) Detector.setBodies(detector, allBodies);\n                    // reset all composite modified flags\n                    if (world.isModified) Composite.setModified(world, false, false, true);\n                    // update sleeping if enabled\n                    if (engine.enableSleeping) Sleeping.update(allBodies, timing.timeScale);\n                    // apply gravity to all bodies\n                    Engine._bodiesApplyGravity(allBodies, engine.gravity);\n                    // update all body position and rotation by integration\n                    Engine._bodiesUpdate(allBodies, delta, timing.timeScale, correction, world.bounds);\n                    // update all constraints (first pass)\n                    Constraint.preSolveAll(allBodies);\n                    for(i = 0; i < engine.constraintIterations; i++)Constraint.solveAll(allConstraints, timing.timeScale);\n                    Constraint.postSolveAll(allBodies);\n                    // find all collisions\n                    detector.pairs = engine.pairs;\n                    var collisions = Detector.collisions(detector);\n                    // update collision pairs\n                    Pairs.update(pairs, collisions, timestamp);\n                    // wake up bodies involved in collisions\n                    if (engine.enableSleeping) Sleeping.afterCollisions(pairs.list, timing.timeScale);\n                    // trigger collision events\n                    if (pairs.collisionStart.length > 0) Events.trigger(engine, \"collisionStart\", {\n                        pairs: pairs.collisionStart\n                    });\n                    // iteratively resolve position between collisions\n                    Resolver.preSolvePosition(pairs.list);\n                    for(i = 0; i < engine.positionIterations; i++)Resolver.solvePosition(pairs.list, timing.timeScale);\n                    Resolver.postSolvePosition(allBodies);\n                    // update all constraints (second pass)\n                    Constraint.preSolveAll(allBodies);\n                    for(i = 0; i < engine.constraintIterations; i++)Constraint.solveAll(allConstraints, timing.timeScale);\n                    Constraint.postSolveAll(allBodies);\n                    // iteratively resolve velocity between collisions\n                    Resolver.preSolveVelocity(pairs.list);\n                    for(i = 0; i < engine.velocityIterations; i++)Resolver.solveVelocity(pairs.list, timing.timeScale);\n                    // trigger collision events\n                    if (pairs.collisionActive.length > 0) Events.trigger(engine, \"collisionActive\", {\n                        pairs: pairs.collisionActive\n                    });\n                    if (pairs.collisionEnd.length > 0) Events.trigger(engine, \"collisionEnd\", {\n                        pairs: pairs.collisionEnd\n                    });\n                    // clear force buffers\n                    Engine._bodiesClearForces(allBodies);\n                    Events.trigger(engine, \"afterUpdate\", event);\n                    // log the time elapsed computing this update\n                    engine.timing.lastElapsed = Common.now() - startTime;\n                    return engine;\n                };\n                /**\n     * Merges two engines by keeping the configuration of `engineA` but replacing the world with the one from `engineB`.\n     * @method merge\n     * @param {engine} engineA\n     * @param {engine} engineB\n     */ Engine.merge = function(engineA, engineB) {\n                    Common.extend(engineA, engineB);\n                    if (engineB.world) {\n                        engineA.world = engineB.world;\n                        Engine.clear(engineA);\n                        var bodies = Composite.allBodies(engineA.world);\n                        for(var i = 0; i < bodies.length; i++){\n                            var body = bodies[i];\n                            Sleeping.set(body, false);\n                            body.id = Common.nextId();\n                        }\n                    }\n                };\n                /**\n     * Clears the engine pairs and detector.\n     * @method clear\n     * @param {engine} engine\n     */ Engine.clear = function(engine) {\n                    Pairs.clear(engine.pairs);\n                    Detector.clear(engine.detector);\n                };\n                /**\n     * Zeroes the `body.force` and `body.torque` force buffers.\n     * @method _bodiesClearForces\n     * @private\n     * @param {body[]} bodies\n     */ Engine._bodiesClearForces = function(bodies) {\n                    for(var i = 0; i < bodies.length; i++){\n                        var body = bodies[i];\n                        // reset force buffers\n                        body.force.x = 0;\n                        body.force.y = 0;\n                        body.torque = 0;\n                    }\n                };\n                /**\n     * Applys a mass dependant force to all given bodies.\n     * @method _bodiesApplyGravity\n     * @private\n     * @param {body[]} bodies\n     * @param {vector} gravity\n     */ Engine._bodiesApplyGravity = function(bodies, gravity) {\n                    var gravityScale = typeof gravity.scale !== \"undefined\" ? gravity.scale : 0.001;\n                    if (gravity.x === 0 && gravity.y === 0 || gravityScale === 0) return;\n                    for(var i = 0; i < bodies.length; i++){\n                        var body = bodies[i];\n                        if (body.isStatic || body.isSleeping) continue;\n                        // apply gravity\n                        body.force.y += body.mass * gravity.y * gravityScale;\n                        body.force.x += body.mass * gravity.x * gravityScale;\n                    }\n                };\n                /**\n     * Applys `Body.update` to all given `bodies`.\n     * @method _bodiesUpdate\n     * @private\n     * @param {body[]} bodies\n     * @param {number} deltaTime \n     * The amount of time elapsed between updates\n     * @param {number} timeScale\n     * @param {number} correction \n     * The Verlet correction factor (deltaTime / lastDeltaTime)\n     * @param {bounds} worldBounds\n     */ Engine._bodiesUpdate = function(bodies, deltaTime, timeScale, correction, worldBounds) {\n                    for(var i = 0; i < bodies.length; i++){\n                        var body = bodies[i];\n                        if (body.isStatic || body.isSleeping) continue;\n                        Body.update(body, deltaTime, timeScale, correction);\n                    }\n                };\n            /**\n     * A deprecated alias for `Runner.run`, use `Matter.Runner.run(engine)` instead and see `Matter.Runner` for more information.\n     * @deprecated use Matter.Runner.run(engine) instead\n     * @method run\n     * @param {engine} engine\n     */ /**\n    * Fired just before an update\n    *\n    * @event beforeUpdate\n    * @param {object} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */ /**\n    * Fired after engine update and all collision events\n    *\n    * @event afterUpdate\n    * @param {object} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */ /**\n    * Fired after engine update, provides a list of all pairs that have started to collide in the current tick (if any)\n    *\n    * @event collisionStart\n    * @param {object} event An event object\n    * @param {pair[]} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */ /**\n    * Fired after engine update, provides a list of all pairs that are colliding in the current tick (if any)\n    *\n    * @event collisionActive\n    * @param {object} event An event object\n    * @param {pair[]} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */ /**\n    * Fired after engine update, provides a list of all pairs that have ended collision in the current tick (if any)\n    *\n    * @event collisionEnd\n    * @param {object} event An event object\n    * @param {pair[]} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */ /*\n    *\n    *  Properties Documentation\n    *\n    */ /**\n     * An integer `Number` that specifies the number of position iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property positionIterations\n     * @type number\n     * @default 6\n     */ /**\n     * An integer `Number` that specifies the number of velocity iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property velocityIterations\n     * @type number\n     * @default 4\n     */ /**\n     * An integer `Number` that specifies the number of constraint iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     * The default value of `2` is usually very adequate.\n     *\n     * @property constraintIterations\n     * @type number\n     * @default 2\n     */ /**\n     * A flag that specifies whether the engine should allow sleeping via the `Matter.Sleeping` module.\n     * Sleeping can improve stability and performance, but often at the expense of accuracy.\n     *\n     * @property enableSleeping\n     * @type boolean\n     * @default false\n     */ /**\n     * An `Object` containing properties regarding the timing systems of the engine. \n     *\n     * @property timing\n     * @type object\n     */ /**\n     * A `Number` that specifies the global scaling factor of time for all bodies.\n     * A value of `0` freezes the simulation.\n     * A value of `0.1` gives a slow-motion effect.\n     * A value of `1.2` gives a speed-up effect.\n     *\n     * @property timing.timeScale\n     * @type number\n     * @default 1\n     */ /**\n     * A `Number` that specifies the current simulation-time in milliseconds starting from `0`. \n     * It is incremented on every `Engine.update` by the given `delta` argument. \n     *\n     * @property timing.timestamp\n     * @type number\n     * @default 0\n     */ /**\n     * A `Number` that represents the total execution time elapsed during the last `Engine.update` in milliseconds.\n     * It is updated by timing from the start of the last `Engine.update` call until it ends.\n     *\n     * This value will also include the total execution time of all event handlers directly or indirectly triggered by the engine update.\n     *\n     * @property timing.lastElapsed\n     * @type number\n     * @default 0\n     */ /**\n     * A `Number` that represents the `delta` value used in the last engine update.\n     *\n     * @property timing.lastDelta\n     * @type number\n     * @default 0\n     */ /**\n     * A `Matter.Detector` instance.\n     *\n     * @property detector\n     * @type detector\n     * @default a Matter.Detector instance\n     */ /**\n     * A `Matter.Grid` instance.\n     *\n     * @deprecated replaced by `engine.detector`\n     * @property grid\n     * @type grid\n     * @default a Matter.Grid instance\n     */ /**\n     * Replaced by and now alias for `engine.grid`.\n     *\n     * @deprecated replaced by `engine.detector`\n     * @property broadphase\n     * @type grid\n     * @default a Matter.Grid instance\n     */ /**\n     * The root `Matter.Composite` instance that will contain all bodies, constraints and other composites to be simulated by this engine.\n     *\n     * @property world\n     * @type composite\n     * @default a Matter.Composite instance\n     */ /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */ /**\n     * The gravity to apply on all bodies in `engine.world`.\n     *\n     * @property gravity\n     * @type object\n     */ /**\n     * The gravity x component.\n     *\n     * @property gravity.x\n     * @type object\n     * @default 0\n     */ /**\n     * The gravity y component.\n     *\n     * @property gravity.y\n     * @type object\n     * @default 1\n     */ /**\n     * The gravity scale factor.\n     *\n     * @property gravity.scale\n     * @type object\n     * @default 0.001\n     */ })();\n        /***/ },\n        /* 19 */ /***/ function(module1, exports, __webpack_require__) {\n            /**\n* The `Matter.Resolver` module contains methods for resolving collision pairs.\n*\n* @class Resolver\n*/ var Resolver = {};\n            module1.exports = Resolver;\n            var Vertices = __webpack_require__(3);\n            var Bounds = __webpack_require__(1);\n            (function() {\n                Resolver._restingThresh = 4;\n                Resolver._restingThreshTangent = 6;\n                Resolver._positionDampen = 0.9;\n                Resolver._positionWarming = 0.8;\n                Resolver._frictionNormalMultiplier = 5;\n                /**\n     * Prepare pairs for position solving.\n     * @method preSolvePosition\n     * @param {pair[]} pairs\n     */ Resolver.preSolvePosition = function(pairs) {\n                    var i, pair, activeCount, pairsLength = pairs.length;\n                    // find total contacts on each body\n                    for(i = 0; i < pairsLength; i++){\n                        pair = pairs[i];\n                        if (!pair.isActive) continue;\n                        activeCount = pair.activeContacts.length;\n                        pair.collision.parentA.totalContacts += activeCount;\n                        pair.collision.parentB.totalContacts += activeCount;\n                    }\n                };\n                /**\n     * Find a solution for pair positions.\n     * @method solvePosition\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */ Resolver.solvePosition = function(pairs, timeScale) {\n                    var i, pair, collision, bodyA, bodyB, normal, contactShare, positionImpulse, positionDampen = Resolver._positionDampen, pairsLength = pairs.length;\n                    // find impulses required to resolve penetration\n                    for(i = 0; i < pairsLength; i++){\n                        pair = pairs[i];\n                        if (!pair.isActive || pair.isSensor) continue;\n                        collision = pair.collision;\n                        bodyA = collision.parentA;\n                        bodyB = collision.parentB;\n                        normal = collision.normal;\n                        // get current separation between body edges involved in collision\n                        pair.separation = normal.x * (bodyB.positionImpulse.x + collision.penetration.x - bodyA.positionImpulse.x) + normal.y * (bodyB.positionImpulse.y + collision.penetration.y - bodyA.positionImpulse.y);\n                    }\n                    for(i = 0; i < pairsLength; i++){\n                        pair = pairs[i];\n                        if (!pair.isActive || pair.isSensor) continue;\n                        collision = pair.collision;\n                        bodyA = collision.parentA;\n                        bodyB = collision.parentB;\n                        normal = collision.normal;\n                        positionImpulse = (pair.separation - pair.slop) * timeScale;\n                        if (bodyA.isStatic || bodyB.isStatic) positionImpulse *= 2;\n                        if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                            contactShare = positionDampen / bodyA.totalContacts;\n                            bodyA.positionImpulse.x += normal.x * positionImpulse * contactShare;\n                            bodyA.positionImpulse.y += normal.y * positionImpulse * contactShare;\n                        }\n                        if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                            contactShare = positionDampen / bodyB.totalContacts;\n                            bodyB.positionImpulse.x -= normal.x * positionImpulse * contactShare;\n                            bodyB.positionImpulse.y -= normal.y * positionImpulse * contactShare;\n                        }\n                    }\n                };\n                /**\n     * Apply position resolution.\n     * @method postSolvePosition\n     * @param {body[]} bodies\n     */ Resolver.postSolvePosition = function(bodies) {\n                    var positionWarming = Resolver._positionWarming, bodiesLength = bodies.length, verticesTranslate = Vertices.translate, boundsUpdate = Bounds.update;\n                    for(var i = 0; i < bodiesLength; i++){\n                        var body = bodies[i], positionImpulse = body.positionImpulse, positionImpulseX = positionImpulse.x, positionImpulseY = positionImpulse.y, velocity = body.velocity;\n                        // reset contact count\n                        body.totalContacts = 0;\n                        if (positionImpulseX !== 0 || positionImpulseY !== 0) {\n                            // update body geometry\n                            for(var j = 0; j < body.parts.length; j++){\n                                var part = body.parts[j];\n                                verticesTranslate(part.vertices, positionImpulse);\n                                boundsUpdate(part.bounds, part.vertices, velocity);\n                                part.position.x += positionImpulseX;\n                                part.position.y += positionImpulseY;\n                            }\n                            // move the body without changing velocity\n                            body.positionPrev.x += positionImpulseX;\n                            body.positionPrev.y += positionImpulseY;\n                            if (positionImpulseX * velocity.x + positionImpulseY * velocity.y < 0) {\n                                // reset cached impulse if the body has velocity along it\n                                positionImpulse.x = 0;\n                                positionImpulse.y = 0;\n                            } else {\n                                // warm the next iteration\n                                positionImpulse.x *= positionWarming;\n                                positionImpulse.y *= positionWarming;\n                            }\n                        }\n                    }\n                };\n                /**\n     * Prepare pairs for velocity solving.\n     * @method preSolveVelocity\n     * @param {pair[]} pairs\n     */ Resolver.preSolveVelocity = function(pairs) {\n                    var pairsLength = pairs.length, i, j;\n                    for(i = 0; i < pairsLength; i++){\n                        var pair = pairs[i];\n                        if (!pair.isActive || pair.isSensor) continue;\n                        var contacts = pair.activeContacts, contactsLength = contacts.length, collision = pair.collision, bodyA = collision.parentA, bodyB = collision.parentB, normal = collision.normal, tangent = collision.tangent;\n                        // resolve each contact\n                        for(j = 0; j < contactsLength; j++){\n                            var contact = contacts[j], contactVertex = contact.vertex, normalImpulse = contact.normalImpulse, tangentImpulse = contact.tangentImpulse;\n                            if (normalImpulse !== 0 || tangentImpulse !== 0) {\n                                // total impulse from contact\n                                var impulseX = normal.x * normalImpulse + tangent.x * tangentImpulse, impulseY = normal.y * normalImpulse + tangent.y * tangentImpulse;\n                                // apply impulse from contact\n                                if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                                    bodyA.positionPrev.x += impulseX * bodyA.inverseMass;\n                                    bodyA.positionPrev.y += impulseY * bodyA.inverseMass;\n                                    bodyA.anglePrev += bodyA.inverseInertia * ((contactVertex.x - bodyA.position.x) * impulseY - (contactVertex.y - bodyA.position.y) * impulseX);\n                                }\n                                if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                                    bodyB.positionPrev.x -= impulseX * bodyB.inverseMass;\n                                    bodyB.positionPrev.y -= impulseY * bodyB.inverseMass;\n                                    bodyB.anglePrev -= bodyB.inverseInertia * ((contactVertex.x - bodyB.position.x) * impulseY - (contactVertex.y - bodyB.position.y) * impulseX);\n                                }\n                            }\n                        }\n                    }\n                };\n                /**\n     * Find a solution for pair velocities.\n     * @method solveVelocity\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */ Resolver.solveVelocity = function(pairs, timeScale) {\n                    var timeScaleSquared = timeScale * timeScale, restingThresh = Resolver._restingThresh * timeScaleSquared, frictionNormalMultiplier = Resolver._frictionNormalMultiplier, restingThreshTangent = Resolver._restingThreshTangent * timeScaleSquared, NumberMaxValue = Number.MAX_VALUE, pairsLength = pairs.length, tangentImpulse, maxFriction, i, j;\n                    for(i = 0; i < pairsLength; i++){\n                        var pair = pairs[i];\n                        if (!pair.isActive || pair.isSensor) continue;\n                        var collision = pair.collision, bodyA = collision.parentA, bodyB = collision.parentB, bodyAVelocity = bodyA.velocity, bodyBVelocity = bodyB.velocity, normalX = collision.normal.x, normalY = collision.normal.y, tangentX = collision.tangent.x, tangentY = collision.tangent.y, contacts = pair.activeContacts, contactsLength = contacts.length, contactShare = 1 / contactsLength, inverseMassTotal = bodyA.inverseMass + bodyB.inverseMass, friction = pair.friction * pair.frictionStatic * frictionNormalMultiplier * timeScaleSquared;\n                        // update body velocities\n                        bodyAVelocity.x = bodyA.position.x - bodyA.positionPrev.x;\n                        bodyAVelocity.y = bodyA.position.y - bodyA.positionPrev.y;\n                        bodyBVelocity.x = bodyB.position.x - bodyB.positionPrev.x;\n                        bodyBVelocity.y = bodyB.position.y - bodyB.positionPrev.y;\n                        bodyA.angularVelocity = bodyA.angle - bodyA.anglePrev;\n                        bodyB.angularVelocity = bodyB.angle - bodyB.anglePrev;\n                        // resolve each contact\n                        for(j = 0; j < contactsLength; j++){\n                            var contact = contacts[j], contactVertex = contact.vertex;\n                            var offsetAX = contactVertex.x - bodyA.position.x, offsetAY = contactVertex.y - bodyA.position.y, offsetBX = contactVertex.x - bodyB.position.x, offsetBY = contactVertex.y - bodyB.position.y;\n                            var velocityPointAX = bodyAVelocity.x - offsetAY * bodyA.angularVelocity, velocityPointAY = bodyAVelocity.y + offsetAX * bodyA.angularVelocity, velocityPointBX = bodyBVelocity.x - offsetBY * bodyB.angularVelocity, velocityPointBY = bodyBVelocity.y + offsetBX * bodyB.angularVelocity;\n                            var relativeVelocityX = velocityPointAX - velocityPointBX, relativeVelocityY = velocityPointAY - velocityPointBY;\n                            var normalVelocity = normalX * relativeVelocityX + normalY * relativeVelocityY, tangentVelocity = tangentX * relativeVelocityX + tangentY * relativeVelocityY;\n                            // coulomb friction\n                            var normalOverlap = pair.separation + normalVelocity;\n                            var normalForce = Math.min(normalOverlap, 1);\n                            normalForce = normalOverlap < 0 ? 0 : normalForce;\n                            var frictionLimit = normalForce * friction;\n                            if (tangentVelocity > frictionLimit || -tangentVelocity > frictionLimit) {\n                                maxFriction = tangentVelocity > 0 ? tangentVelocity : -tangentVelocity;\n                                tangentImpulse = pair.friction * (tangentVelocity > 0 ? 1 : -1) * timeScaleSquared;\n                                if (tangentImpulse < -maxFriction) tangentImpulse = -maxFriction;\n                                else if (tangentImpulse > maxFriction) tangentImpulse = maxFriction;\n                            } else {\n                                tangentImpulse = tangentVelocity;\n                                maxFriction = NumberMaxValue;\n                            }\n                            // account for mass, inertia and contact offset\n                            var oAcN = offsetAX * normalY - offsetAY * normalX, oBcN = offsetBX * normalY - offsetBY * normalX, share = contactShare / (inverseMassTotal + bodyA.inverseInertia * oAcN * oAcN + bodyB.inverseInertia * oBcN * oBcN);\n                            // raw impulses\n                            var normalImpulse = (1 + pair.restitution) * normalVelocity * share;\n                            tangentImpulse *= share;\n                            // handle high velocity and resting collisions separately\n                            if (normalVelocity * normalVelocity > restingThresh && normalVelocity < 0) // high normal velocity so clear cached contact normal impulse\n                            contact.normalImpulse = 0;\n                            else {\n                                // solve resting collision constraints using Erin Catto's method (GDC08)\n                                // impulse constraint tends to 0\n                                var contactNormalImpulse = contact.normalImpulse;\n                                contact.normalImpulse += normalImpulse;\n                                contact.normalImpulse = Math.min(contact.normalImpulse, 0);\n                                normalImpulse = contact.normalImpulse - contactNormalImpulse;\n                            }\n                            // handle high velocity and resting collisions separately\n                            if (tangentVelocity * tangentVelocity > restingThreshTangent) // high tangent velocity so clear cached contact tangent impulse\n                            contact.tangentImpulse = 0;\n                            else {\n                                // solve resting collision constraints using Erin Catto's method (GDC08)\n                                // tangent impulse tends to -tangentSpeed or +tangentSpeed\n                                var contactTangentImpulse = contact.tangentImpulse;\n                                contact.tangentImpulse += tangentImpulse;\n                                if (contact.tangentImpulse < -maxFriction) contact.tangentImpulse = -maxFriction;\n                                if (contact.tangentImpulse > maxFriction) contact.tangentImpulse = maxFriction;\n                                tangentImpulse = contact.tangentImpulse - contactTangentImpulse;\n                            }\n                            // total impulse from contact\n                            var impulseX = normalX * normalImpulse + tangentX * tangentImpulse, impulseY = normalY * normalImpulse + tangentY * tangentImpulse;\n                            // apply impulse from contact\n                            if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                                bodyA.positionPrev.x += impulseX * bodyA.inverseMass;\n                                bodyA.positionPrev.y += impulseY * bodyA.inverseMass;\n                                bodyA.anglePrev += (offsetAX * impulseY - offsetAY * impulseX) * bodyA.inverseInertia;\n                            }\n                            if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                                bodyB.positionPrev.x -= impulseX * bodyB.inverseMass;\n                                bodyB.positionPrev.y -= impulseY * bodyB.inverseMass;\n                                bodyB.anglePrev -= (offsetBX * impulseY - offsetBY * impulseX) * bodyB.inverseInertia;\n                            }\n                        }\n                    }\n                };\n            })();\n        /***/ },\n        /* 20 */ /***/ function(module1, exports, __webpack_require__) {\n            /**\n* The `Matter.Pairs` module contains methods for creating and manipulating collision pair sets.\n*\n* @class Pairs\n*/ var Pairs = {};\n            module1.exports = Pairs;\n            var Pair = __webpack_require__(9);\n            var Common = __webpack_require__(0);\n            (function() {\n                /**\n     * Creates a new pairs structure.\n     * @method create\n     * @param {object} options\n     * @return {pairs} A new pairs structure\n     */ Pairs.create = function(options) {\n                    return Common.extend({\n                        table: {},\n                        list: [],\n                        collisionStart: [],\n                        collisionActive: [],\n                        collisionEnd: []\n                    }, options);\n                };\n                /**\n     * Updates pairs given a list of collisions.\n     * @method update\n     * @param {object} pairs\n     * @param {collision[]} collisions\n     * @param {number} timestamp\n     */ Pairs.update = function(pairs, collisions, timestamp) {\n                    var pairsList = pairs.list, pairsListLength = pairsList.length, pairsTable = pairs.table, collisionsLength = collisions.length, collisionStart = pairs.collisionStart, collisionEnd = pairs.collisionEnd, collisionActive = pairs.collisionActive, collision, pairIndex, pair, i;\n                    // clear collision state arrays, but maintain old reference\n                    collisionStart.length = 0;\n                    collisionEnd.length = 0;\n                    collisionActive.length = 0;\n                    for(i = 0; i < pairsListLength; i++)pairsList[i].confirmedActive = false;\n                    for(i = 0; i < collisionsLength; i++){\n                        collision = collisions[i];\n                        pair = collision.pair;\n                        if (pair) {\n                            // pair already exists (but may or may not be active)\n                            if (pair.isActive) // pair exists and is active\n                            collisionActive.push(pair);\n                            else // pair exists but was inactive, so a collision has just started again\n                            collisionStart.push(pair);\n                            // update the pair\n                            Pair.update(pair, collision, timestamp);\n                            pair.confirmedActive = true;\n                        } else {\n                            // pair did not exist, create a new pair\n                            pair = Pair.create(collision, timestamp);\n                            pairsTable[pair.id] = pair;\n                            // push the new pair\n                            collisionStart.push(pair);\n                            pairsList.push(pair);\n                        }\n                    }\n                    // find pairs that are no longer active\n                    var removePairIndex = [];\n                    pairsListLength = pairsList.length;\n                    for(i = 0; i < pairsListLength; i++){\n                        pair = pairsList[i];\n                        if (!pair.confirmedActive) {\n                            Pair.setActive(pair, false, timestamp);\n                            collisionEnd.push(pair);\n                            if (!pair.collision.bodyA.isSleeping && !pair.collision.bodyB.isSleeping) removePairIndex.push(i);\n                        }\n                    }\n                    // remove inactive pairs\n                    for(i = 0; i < removePairIndex.length; i++){\n                        pairIndex = removePairIndex[i] - i;\n                        pair = pairsList[pairIndex];\n                        pairsList.splice(pairIndex, 1);\n                        delete pairsTable[pair.id];\n                    }\n                };\n                /**\n     * Clears the given pairs structure.\n     * @method clear\n     * @param {pairs} pairs\n     * @return {pairs} pairs\n     */ Pairs.clear = function(pairs) {\n                    pairs.table = {};\n                    pairs.list.length = 0;\n                    pairs.collisionStart.length = 0;\n                    pairs.collisionActive.length = 0;\n                    pairs.collisionEnd.length = 0;\n                    return pairs;\n                };\n            })();\n        /***/ },\n        /* 21 */ /***/ function(module1, exports, __webpack_require__) {\n            var Matter = module1.exports = __webpack_require__(22);\n            Matter.Axes = __webpack_require__(11);\n            Matter.Bodies = __webpack_require__(12);\n            Matter.Body = __webpack_require__(6);\n            Matter.Bounds = __webpack_require__(1);\n            Matter.Collision = __webpack_require__(8);\n            Matter.Common = __webpack_require__(0);\n            Matter.Composite = __webpack_require__(5);\n            Matter.Composites = __webpack_require__(23);\n            Matter.Constraint = __webpack_require__(10);\n            Matter.Contact = __webpack_require__(17);\n            Matter.Detector = __webpack_require__(14);\n            Matter.Engine = __webpack_require__(18);\n            Matter.Events = __webpack_require__(4);\n            Matter.Grid = __webpack_require__(24);\n            Matter.Mouse = __webpack_require__(13);\n            Matter.MouseConstraint = __webpack_require__(25);\n            Matter.Pair = __webpack_require__(9);\n            Matter.Pairs = __webpack_require__(20);\n            Matter.Plugin = __webpack_require__(15);\n            Matter.Query = __webpack_require__(26);\n            Matter.Render = __webpack_require__(16);\n            Matter.Resolver = __webpack_require__(19);\n            Matter.Runner = __webpack_require__(27);\n            Matter.SAT = __webpack_require__(28);\n            Matter.Sleeping = __webpack_require__(7);\n            Matter.Svg = __webpack_require__(29);\n            Matter.Vector = __webpack_require__(2);\n            Matter.Vertices = __webpack_require__(3);\n            Matter.World = __webpack_require__(30);\n            // temporary back compatibility\n            Matter.Engine.run = Matter.Runner.run;\n            Matter.Common.deprecated(Matter.Engine, \"run\", \"Engine.run ➤ use Matter.Runner.run(engine) instead\");\n        /***/ },\n        /* 22 */ /***/ function(module1, exports, __webpack_require__) {\n            /**\r\n* The `Matter` module is the top level namespace. It also includes a function for installing plugins on top of the library.\r\n*\r\n* @class Matter\r\n*/ var Matter = {};\n            module1.exports = Matter;\n            var Plugin = __webpack_require__(15);\n            var Common = __webpack_require__(0);\n            (function() {\n                /**\r\n     * The library name.\r\n     * @property name\r\n     * @readOnly\r\n     * @type {String}\r\n     */ Matter.name = \"matter-js\";\n                /**\r\n     * The library version.\r\n     * @property version\r\n     * @readOnly\r\n     * @type {String}\r\n     */ Matter.version = \"0.18.0\";\n                /**\r\n     * A list of plugin dependencies to be installed. These are normally set and installed through `Matter.use`.\r\n     * Alternatively you may set `Matter.uses` manually and install them by calling `Plugin.use(Matter)`.\r\n     * @property uses\r\n     * @type {Array}\r\n     */ Matter.uses = [];\n                /**\r\n     * The plugins that have been installed through `Matter.Plugin.install`. Read only.\r\n     * @property used\r\n     * @readOnly\r\n     * @type {Array}\r\n     */ Matter.used = [];\n                /**\r\n     * Installs the given plugins on the `Matter` namespace.\r\n     * This is a short-hand for `Plugin.use`, see it for more information.\r\n     * Call this function once at the start of your code, with all of the plugins you wish to install as arguments.\r\n     * Avoid calling this function multiple times unless you intend to manually control installation order.\r\n     * @method use\r\n     * @param ...plugin {Function} The plugin(s) to install on `base` (multi-argument).\r\n     */ Matter.use = function() {\n                    Plugin.use(Matter, Array.prototype.slice.call(arguments));\n                };\n                /**\r\n     * Chains a function to excute before the original function on the given `path` relative to `Matter`.\r\n     * See also docs for `Common.chain`.\r\n     * @method before\r\n     * @param {string} path The path relative to `Matter`\r\n     * @param {function} func The function to chain before the original\r\n     * @return {function} The chained function that replaced the original\r\n     */ Matter.before = function(path, func) {\n                    path = path.replace(/^Matter./, \"\");\n                    return Common.chainPathBefore(Matter, path, func);\n                };\n                /**\r\n     * Chains a function to excute after the original function on the given `path` relative to `Matter`.\r\n     * See also docs for `Common.chain`.\r\n     * @method after\r\n     * @param {string} path The path relative to `Matter`\r\n     * @param {function} func The function to chain after the original\r\n     * @return {function} The chained function that replaced the original\r\n     */ Matter.after = function(path, func) {\n                    path = path.replace(/^Matter./, \"\");\n                    return Common.chainPathAfter(Matter, path, func);\n                };\n            })();\n        /***/ },\n        /* 23 */ /***/ function(module1, exports, __webpack_require__) {\n            /**\n* The `Matter.Composites` module contains factory methods for creating composite bodies\n* with commonly used configurations (such as stacks and chains).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composites\n*/ var Composites = {};\n            module1.exports = Composites;\n            var Composite = __webpack_require__(5);\n            var Constraint = __webpack_require__(10);\n            var Common = __webpack_require__(0);\n            var Body = __webpack_require__(6);\n            var Bodies = __webpack_require__(12);\n            var deprecated = Common.deprecated;\n            (function() {\n                /**\n     * Create a new composite containing bodies created in the callback in a grid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method stack\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */ Composites.stack = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n                    var stack = Composite.create({\n                        label: \"Stack\"\n                    }), x = xx, y = yy, lastBody, i = 0;\n                    for(var row = 0; row < rows; row++){\n                        var maxHeight = 0;\n                        for(var column = 0; column < columns; column++){\n                            var body = callback(x, y, column, row, lastBody, i);\n                            if (body) {\n                                var bodyHeight = body.bounds.max.y - body.bounds.min.y, bodyWidth = body.bounds.max.x - body.bounds.min.x;\n                                if (bodyHeight > maxHeight) maxHeight = bodyHeight;\n                                Body.translate(body, {\n                                    x: bodyWidth * 0.5,\n                                    y: bodyHeight * 0.5\n                                });\n                                x = body.bounds.max.x + columnGap;\n                                Composite.addBody(stack, body);\n                                lastBody = body;\n                                i += 1;\n                            } else x += columnGap;\n                        }\n                        y += maxHeight + rowGap;\n                        x = xx;\n                    }\n                    return stack;\n                };\n                /**\n     * Chains all bodies in the given composite together using constraints.\n     * @method chain\n     * @param {composite} composite\n     * @param {number} xOffsetA\n     * @param {number} yOffsetA\n     * @param {number} xOffsetB\n     * @param {number} yOffsetB\n     * @param {object} options\n     * @return {composite} A new composite containing objects chained together with constraints\n     */ Composites.chain = function(composite, xOffsetA, yOffsetA, xOffsetB, yOffsetB, options) {\n                    var bodies = composite.bodies;\n                    for(var i = 1; i < bodies.length; i++){\n                        var bodyA = bodies[i - 1], bodyB = bodies[i], bodyAHeight = bodyA.bounds.max.y - bodyA.bounds.min.y, bodyAWidth = bodyA.bounds.max.x - bodyA.bounds.min.x, bodyBHeight = bodyB.bounds.max.y - bodyB.bounds.min.y, bodyBWidth = bodyB.bounds.max.x - bodyB.bounds.min.x;\n                        var defaults = {\n                            bodyA: bodyA,\n                            pointA: {\n                                x: bodyAWidth * xOffsetA,\n                                y: bodyAHeight * yOffsetA\n                            },\n                            bodyB: bodyB,\n                            pointB: {\n                                x: bodyBWidth * xOffsetB,\n                                y: bodyBHeight * yOffsetB\n                            }\n                        };\n                        var constraint = Common.extend(defaults, options);\n                        Composite.addConstraint(composite, Constraint.create(constraint));\n                    }\n                    composite.label += \" Chain\";\n                    return composite;\n                };\n                /**\n     * Connects bodies in the composite with constraints in a grid pattern, with optional cross braces.\n     * @method mesh\n     * @param {composite} composite\n     * @param {number} columns\n     * @param {number} rows\n     * @param {boolean} crossBrace\n     * @param {object} options\n     * @return {composite} The composite containing objects meshed together with constraints\n     */ Composites.mesh = function(composite, columns, rows, crossBrace, options) {\n                    var bodies = composite.bodies, row, col, bodyA, bodyB, bodyC;\n                    for(row = 0; row < rows; row++){\n                        for(col = 1; col < columns; col++){\n                            bodyA = bodies[col - 1 + row * columns];\n                            bodyB = bodies[col + row * columns];\n                            Composite.addConstraint(composite, Constraint.create(Common.extend({\n                                bodyA: bodyA,\n                                bodyB: bodyB\n                            }, options)));\n                        }\n                        if (row > 0) for(col = 0; col < columns; col++){\n                            bodyA = bodies[col + (row - 1) * columns];\n                            bodyB = bodies[col + row * columns];\n                            Composite.addConstraint(composite, Constraint.create(Common.extend({\n                                bodyA: bodyA,\n                                bodyB: bodyB\n                            }, options)));\n                            if (crossBrace && col > 0) {\n                                bodyC = bodies[col - 1 + (row - 1) * columns];\n                                Composite.addConstraint(composite, Constraint.create(Common.extend({\n                                    bodyA: bodyC,\n                                    bodyB: bodyB\n                                }, options)));\n                            }\n                            if (crossBrace && col < columns - 1) {\n                                bodyC = bodies[col + 1 + (row - 1) * columns];\n                                Composite.addConstraint(composite, Constraint.create(Common.extend({\n                                    bodyA: bodyC,\n                                    bodyB: bodyB\n                                }, options)));\n                            }\n                        }\n                    }\n                    composite.label += \" Mesh\";\n                    return composite;\n                };\n                /**\n     * Create a new composite containing bodies created in the callback in a pyramid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method pyramid\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */ Composites.pyramid = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n                    return Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y, column, row, lastBody, i) {\n                        var actualRows = Math.min(rows, Math.ceil(columns / 2)), lastBodyWidth = lastBody ? lastBody.bounds.max.x - lastBody.bounds.min.x : 0;\n                        if (row > actualRows) return;\n                        // reverse row order\n                        row = actualRows - row;\n                        var start = row, end = columns - 1 - row;\n                        if (column < start || column > end) return;\n                        // retroactively fix the first body's position, since width was unknown\n                        if (i === 1) Body.translate(lastBody, {\n                            x: (column + (columns % 2 === 1 ? 1 : -1)) * lastBodyWidth,\n                            y: 0\n                        });\n                        var xOffset = lastBody ? column * lastBodyWidth : 0;\n                        return callback(xx + xOffset + column * columnGap, y, column, row, lastBody, i);\n                    });\n                };\n                /**\n     * This has now moved to the [newtonsCradle example](https://github.com/liabru/matter-js/blob/master/examples/newtonsCradle.js), follow that instead as this function is deprecated here.\n     * @deprecated moved to newtonsCradle example\n     * @method newtonsCradle\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} number\n     * @param {number} size\n     * @param {number} length\n     * @return {composite} A new composite newtonsCradle body\n     */ Composites.newtonsCradle = function(xx, yy, number, size, length) {\n                    var newtonsCradle = Composite.create({\n                        label: \"Newtons Cradle\"\n                    });\n                    for(var i = 0; i < number; i++){\n                        var separation = 1.9, circle = Bodies.circle(xx + i * (size * separation), yy + length, size, {\n                            inertia: Infinity,\n                            restitution: 1,\n                            friction: 0,\n                            frictionAir: 0.0001,\n                            slop: 1\n                        }), constraint = Constraint.create({\n                            pointA: {\n                                x: xx + i * (size * separation),\n                                y: yy\n                            },\n                            bodyB: circle\n                        });\n                        Composite.addBody(newtonsCradle, circle);\n                        Composite.addConstraint(newtonsCradle, constraint);\n                    }\n                    return newtonsCradle;\n                };\n                deprecated(Composites, \"newtonsCradle\", \"Composites.newtonsCradle ➤ moved to newtonsCradle example\");\n                /**\n     * This has now moved to the [car example](https://github.com/liabru/matter-js/blob/master/examples/car.js), follow that instead as this function is deprecated here.\n     * @deprecated moved to car example\n     * @method car\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} width\n     * @param {number} height\n     * @param {number} wheelSize\n     * @return {composite} A new composite car body\n     */ Composites.car = function(xx, yy, width, height, wheelSize) {\n                    var group = Body.nextGroup(true), wheelBase = 20, wheelAOffset = -width * 0.5 + wheelBase, wheelBOffset = width * 0.5 - wheelBase, wheelYOffset = 0;\n                    var car = Composite.create({\n                        label: \"Car\"\n                    }), body = Bodies.rectangle(xx, yy, width, height, {\n                        collisionFilter: {\n                            group: group\n                        },\n                        chamfer: {\n                            radius: height * 0.5\n                        },\n                        density: 0.0002\n                    });\n                    var wheelA = Bodies.circle(xx + wheelAOffset, yy + wheelYOffset, wheelSize, {\n                        collisionFilter: {\n                            group: group\n                        },\n                        friction: 0.8\n                    });\n                    var wheelB = Bodies.circle(xx + wheelBOffset, yy + wheelYOffset, wheelSize, {\n                        collisionFilter: {\n                            group: group\n                        },\n                        friction: 0.8\n                    });\n                    var axelA = Constraint.create({\n                        bodyB: body,\n                        pointB: {\n                            x: wheelAOffset,\n                            y: wheelYOffset\n                        },\n                        bodyA: wheelA,\n                        stiffness: 1,\n                        length: 0\n                    });\n                    var axelB = Constraint.create({\n                        bodyB: body,\n                        pointB: {\n                            x: wheelBOffset,\n                            y: wheelYOffset\n                        },\n                        bodyA: wheelB,\n                        stiffness: 1,\n                        length: 0\n                    });\n                    Composite.addBody(car, body);\n                    Composite.addBody(car, wheelA);\n                    Composite.addBody(car, wheelB);\n                    Composite.addConstraint(car, axelA);\n                    Composite.addConstraint(car, axelB);\n                    return car;\n                };\n                deprecated(Composites, \"car\", \"Composites.car ➤ moved to car example\");\n                /**\n     * This has now moved to the [softBody example](https://github.com/liabru/matter-js/blob/master/examples/softBody.js)\n     * and the [cloth example](https://github.com/liabru/matter-js/blob/master/examples/cloth.js), follow those instead as this function is deprecated here.\n     * @deprecated moved to softBody and cloth examples\n     * @method softBody\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {boolean} crossBrace\n     * @param {number} particleRadius\n     * @param {} particleOptions\n     * @param {} constraintOptions\n     * @return {composite} A new composite softBody\n     */ Composites.softBody = function(xx, yy, columns, rows, columnGap, rowGap, crossBrace, particleRadius, particleOptions, constraintOptions) {\n                    particleOptions = Common.extend({\n                        inertia: Infinity\n                    }, particleOptions);\n                    constraintOptions = Common.extend({\n                        stiffness: 0.2,\n                        render: {\n                            type: \"line\",\n                            anchors: false\n                        }\n                    }, constraintOptions);\n                    var softBody = Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y) {\n                        return Bodies.circle(x, y, particleRadius, particleOptions);\n                    });\n                    Composites.mesh(softBody, columns, rows, crossBrace, constraintOptions);\n                    softBody.label = \"Soft Body\";\n                    return softBody;\n                };\n                deprecated(Composites, \"softBody\", \"Composites.softBody ➤ moved to softBody and cloth examples\");\n            })();\n        /***/ },\n        /* 24 */ /***/ function(module1, exports, __webpack_require__) {\n            /**\n* This module has now been replaced by `Matter.Detector`.\n*\n* All usage should be migrated to `Matter.Detector` or another alternative.\n* For back-compatibility purposes this module will remain for a short term and then later removed in a future release.\n*\n* The `Matter.Grid` module contains methods for creating and manipulating collision broadphase grid structures.\n*\n* @class Grid\n* @deprecated\n*/ var Grid = {};\n            module1.exports = Grid;\n            var Pair = __webpack_require__(9);\n            var Common = __webpack_require__(0);\n            var deprecated = Common.deprecated;\n            (function() {\n                /**\n     * Creates a new grid.\n     * @deprecated replaced by Matter.Detector\n     * @method create\n     * @param {} options\n     * @return {grid} A new grid\n     */ Grid.create = function(options) {\n                    var defaults = {\n                        buckets: {},\n                        pairs: {},\n                        pairsList: [],\n                        bucketWidth: 48,\n                        bucketHeight: 48\n                    };\n                    return Common.extend(defaults, options);\n                };\n                /**\n     * The width of a single grid bucket.\n     *\n     * @property bucketWidth\n     * @type number\n     * @default 48\n     */ /**\n     * The height of a single grid bucket.\n     *\n     * @property bucketHeight\n     * @type number\n     * @default 48\n     */ /**\n     * Updates the grid.\n     * @deprecated replaced by Matter.Detector\n     * @method update\n     * @param {grid} grid\n     * @param {body[]} bodies\n     * @param {engine} engine\n     * @param {boolean} forceUpdate\n     */ Grid.update = function(grid, bodies, engine, forceUpdate) {\n                    var i, col, row, world = engine.world, buckets = grid.buckets, bucket, bucketId, gridChanged = false;\n                    for(i = 0; i < bodies.length; i++){\n                        var body = bodies[i];\n                        if (body.isSleeping && !forceUpdate) continue;\n                        // temporary back compatibility bounds check\n                        if (world.bounds && (body.bounds.max.x < world.bounds.min.x || body.bounds.min.x > world.bounds.max.x || body.bounds.max.y < world.bounds.min.y || body.bounds.min.y > world.bounds.max.y)) continue;\n                        var newRegion = Grid._getRegion(grid, body);\n                        // if the body has changed grid region\n                        if (!body.region || newRegion.id !== body.region.id || forceUpdate) {\n                            if (!body.region || forceUpdate) body.region = newRegion;\n                            var union = Grid._regionUnion(newRegion, body.region);\n                            // update grid buckets affected by region change\n                            // iterate over the union of both regions\n                            for(col = union.startCol; col <= union.endCol; col++)for(row = union.startRow; row <= union.endRow; row++){\n                                bucketId = Grid._getBucketId(col, row);\n                                bucket = buckets[bucketId];\n                                var isInsideNewRegion = col >= newRegion.startCol && col <= newRegion.endCol && row >= newRegion.startRow && row <= newRegion.endRow;\n                                var isInsideOldRegion = col >= body.region.startCol && col <= body.region.endCol && row >= body.region.startRow && row <= body.region.endRow;\n                                // remove from old region buckets\n                                if (!isInsideNewRegion && isInsideOldRegion) {\n                                    if (isInsideOldRegion) {\n                                        if (bucket) Grid._bucketRemoveBody(grid, bucket, body);\n                                    }\n                                }\n                                // add to new region buckets\n                                if (body.region === newRegion || isInsideNewRegion && !isInsideOldRegion || forceUpdate) {\n                                    if (!bucket) bucket = Grid._createBucket(buckets, bucketId);\n                                    Grid._bucketAddBody(grid, bucket, body);\n                                }\n                            }\n                            // set the new region\n                            body.region = newRegion;\n                            // flag changes so we can update pairs\n                            gridChanged = true;\n                        }\n                    }\n                    // update pairs list only if pairs changed (i.e. a body changed region)\n                    if (gridChanged) grid.pairsList = Grid._createActivePairsList(grid);\n                };\n                deprecated(Grid, \"update\", \"Grid.update ➤ replaced by Matter.Detector\");\n                /**\n     * Clears the grid.\n     * @deprecated replaced by Matter.Detector\n     * @method clear\n     * @param {grid} grid\n     */ Grid.clear = function(grid) {\n                    grid.buckets = {};\n                    grid.pairs = {};\n                    grid.pairsList = [];\n                };\n                deprecated(Grid, \"clear\", \"Grid.clear ➤ replaced by Matter.Detector\");\n                /**\n     * Finds the union of two regions.\n     * @method _regionUnion\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} regionA\n     * @param {} regionB\n     * @return {} region\n     */ Grid._regionUnion = function(regionA, regionB) {\n                    var startCol = Math.min(regionA.startCol, regionB.startCol), endCol = Math.max(regionA.endCol, regionB.endCol), startRow = Math.min(regionA.startRow, regionB.startRow), endRow = Math.max(regionA.endRow, regionB.endRow);\n                    return Grid._createRegion(startCol, endCol, startRow, endRow);\n                };\n                /**\n     * Gets the region a given body falls in for a given grid.\n     * @method _getRegion\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} grid\n     * @param {} body\n     * @return {} region\n     */ Grid._getRegion = function(grid, body) {\n                    var bounds = body.bounds, startCol = Math.floor(bounds.min.x / grid.bucketWidth), endCol = Math.floor(bounds.max.x / grid.bucketWidth), startRow = Math.floor(bounds.min.y / grid.bucketHeight), endRow = Math.floor(bounds.max.y / grid.bucketHeight);\n                    return Grid._createRegion(startCol, endCol, startRow, endRow);\n                };\n                /**\n     * Creates a region.\n     * @method _createRegion\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} startCol\n     * @param {} endCol\n     * @param {} startRow\n     * @param {} endRow\n     * @return {} region\n     */ Grid._createRegion = function(startCol, endCol, startRow, endRow) {\n                    return {\n                        id: startCol + \",\" + endCol + \",\" + startRow + \",\" + endRow,\n                        startCol: startCol,\n                        endCol: endCol,\n                        startRow: startRow,\n                        endRow: endRow\n                    };\n                };\n                /**\n     * Gets the bucket id at the given position.\n     * @method _getBucketId\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} column\n     * @param {} row\n     * @return {string} bucket id\n     */ Grid._getBucketId = function(column, row) {\n                    return \"C\" + column + \"R\" + row;\n                };\n                /**\n     * Creates a bucket.\n     * @method _createBucket\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} buckets\n     * @param {} bucketId\n     * @return {} bucket\n     */ Grid._createBucket = function(buckets, bucketId) {\n                    var bucket = buckets[bucketId] = [];\n                    return bucket;\n                };\n                /**\n     * Adds a body to a bucket.\n     * @method _bucketAddBody\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */ Grid._bucketAddBody = function(grid, bucket, body) {\n                    var gridPairs = grid.pairs, pairId = Pair.id, bucketLength = bucket.length, i;\n                    // add new pairs\n                    for(i = 0; i < bucketLength; i++){\n                        var bodyB = bucket[i];\n                        if (body.id === bodyB.id || body.isStatic && bodyB.isStatic) continue;\n                        // keep track of the number of buckets the pair exists in\n                        // important for Grid.update to work\n                        var id = pairId(body, bodyB), pair = gridPairs[id];\n                        if (pair) pair[2] += 1;\n                        else gridPairs[id] = [\n                            body,\n                            bodyB,\n                            1\n                        ];\n                    }\n                    // add to bodies (after pairs, otherwise pairs with self)\n                    bucket.push(body);\n                };\n                /**\n     * Removes a body from a bucket.\n     * @method _bucketRemoveBody\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */ Grid._bucketRemoveBody = function(grid, bucket, body) {\n                    var gridPairs = grid.pairs, pairId = Pair.id, i;\n                    // remove from bucket\n                    bucket.splice(Common.indexOf(bucket, body), 1);\n                    var bucketLength = bucket.length;\n                    // update pair counts\n                    for(i = 0; i < bucketLength; i++){\n                        // keep track of the number of buckets the pair exists in\n                        // important for _createActivePairsList to work\n                        var pair = gridPairs[pairId(body, bucket[i])];\n                        if (pair) pair[2] -= 1;\n                    }\n                };\n                /**\n     * Generates a list of the active pairs in the grid.\n     * @method _createActivePairsList\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} grid\n     * @return [] pairs\n     */ Grid._createActivePairsList = function(grid) {\n                    var pair, gridPairs = grid.pairs, pairKeys = Common.keys(gridPairs), pairKeysLength = pairKeys.length, pairs = [], k;\n                    // iterate over grid.pairs\n                    for(k = 0; k < pairKeysLength; k++){\n                        pair = gridPairs[pairKeys[k]];\n                        // if pair exists in at least one bucket\n                        // it is a pair that needs further collision testing so push it\n                        if (pair[2] > 0) pairs.push(pair);\n                        else delete gridPairs[pairKeys[k]];\n                    }\n                    return pairs;\n                };\n            })();\n        /***/ },\n        /* 25 */ /***/ function(module1, exports, __webpack_require__) {\n            /**\n* The `Matter.MouseConstraint` module contains methods for creating mouse constraints.\n* Mouse constraints are used for allowing user interaction, providing the ability to move bodies via the mouse or touch.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class MouseConstraint\n*/ var MouseConstraint = {};\n            module1.exports = MouseConstraint;\n            var Vertices = __webpack_require__(3);\n            var Sleeping = __webpack_require__(7);\n            var Mouse = __webpack_require__(13);\n            var Events = __webpack_require__(4);\n            var Detector = __webpack_require__(14);\n            var Constraint = __webpack_require__(10);\n            var Composite = __webpack_require__(5);\n            var Common = __webpack_require__(0);\n            var Bounds = __webpack_require__(1);\n            (function() {\n                /**\n     * Creates a new mouse constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {engine} engine\n     * @param {} options\n     * @return {MouseConstraint} A new MouseConstraint\n     */ MouseConstraint.create = function(engine, options) {\n                    var mouse = (engine ? engine.mouse : null) || (options ? options.mouse : null);\n                    if (!mouse) {\n                        if (engine && engine.render && engine.render.canvas) mouse = Mouse.create(engine.render.canvas);\n                        else if (options && options.element) mouse = Mouse.create(options.element);\n                        else {\n                            mouse = Mouse.create();\n                            Common.warn(\"MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected\");\n                        }\n                    }\n                    var constraint = Constraint.create({\n                        label: \"Mouse Constraint\",\n                        pointA: mouse.position,\n                        pointB: {\n                            x: 0,\n                            y: 0\n                        },\n                        length: 0.01,\n                        stiffness: 0.1,\n                        angularStiffness: 1,\n                        render: {\n                            strokeStyle: \"#90EE90\",\n                            lineWidth: 3\n                        }\n                    });\n                    var defaults = {\n                        type: \"mouseConstraint\",\n                        mouse: mouse,\n                        element: null,\n                        body: null,\n                        constraint: constraint,\n                        collisionFilter: {\n                            category: 0x0001,\n                            mask: 0xFFFFFFFF,\n                            group: 0\n                        }\n                    };\n                    var mouseConstraint = Common.extend(defaults, options);\n                    Events.on(engine, \"beforeUpdate\", function() {\n                        var allBodies = Composite.allBodies(engine.world);\n                        MouseConstraint.update(mouseConstraint, allBodies);\n                        MouseConstraint._triggerEvents(mouseConstraint);\n                    });\n                    return mouseConstraint;\n                };\n                /**\n     * Updates the given mouse constraint.\n     * @private\n     * @method update\n     * @param {MouseConstraint} mouseConstraint\n     * @param {body[]} bodies\n     */ MouseConstraint.update = function(mouseConstraint, bodies) {\n                    var mouse = mouseConstraint.mouse, constraint = mouseConstraint.constraint, body = mouseConstraint.body;\n                    if (mouse.button === 0) {\n                        if (!constraint.bodyB) for(var i = 0; i < bodies.length; i++){\n                            body = bodies[i];\n                            if (Bounds.contains(body.bounds, mouse.position) && Detector.canCollide(body.collisionFilter, mouseConstraint.collisionFilter)) for(var j = body.parts.length > 1 ? 1 : 0; j < body.parts.length; j++){\n                                var part = body.parts[j];\n                                if (Vertices.contains(part.vertices, mouse.position)) {\n                                    constraint.pointA = mouse.position;\n                                    constraint.bodyB = mouseConstraint.body = body;\n                                    constraint.pointB = {\n                                        x: mouse.position.x - body.position.x,\n                                        y: mouse.position.y - body.position.y\n                                    };\n                                    constraint.angleB = body.angle;\n                                    Sleeping.set(body, false);\n                                    Events.trigger(mouseConstraint, \"startdrag\", {\n                                        mouse: mouse,\n                                        body: body\n                                    });\n                                    break;\n                                }\n                            }\n                        }\n                        else {\n                            Sleeping.set(constraint.bodyB, false);\n                            constraint.pointA = mouse.position;\n                        }\n                    } else {\n                        constraint.bodyB = mouseConstraint.body = null;\n                        constraint.pointB = null;\n                        if (body) Events.trigger(mouseConstraint, \"enddrag\", {\n                            mouse: mouse,\n                            body: body\n                        });\n                    }\n                };\n                /**\n     * Triggers mouse constraint events.\n     * @method _triggerEvents\n     * @private\n     * @param {mouse} mouseConstraint\n     */ MouseConstraint._triggerEvents = function(mouseConstraint) {\n                    var mouse = mouseConstraint.mouse, mouseEvents = mouse.sourceEvents;\n                    if (mouseEvents.mousemove) Events.trigger(mouseConstraint, \"mousemove\", {\n                        mouse: mouse\n                    });\n                    if (mouseEvents.mousedown) Events.trigger(mouseConstraint, \"mousedown\", {\n                        mouse: mouse\n                    });\n                    if (mouseEvents.mouseup) Events.trigger(mouseConstraint, \"mouseup\", {\n                        mouse: mouse\n                    });\n                    // reset the mouse state ready for the next step\n                    Mouse.clearSourceEvents(mouse);\n                };\n            /*\n    *\n    *  Events Documentation\n    *\n    */ /**\n    * Fired when the mouse has moved (or a touch moves) during the last step\n    *\n    * @event mousemove\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */ /**\n    * Fired when the mouse is down (or a touch has started) during the last step\n    *\n    * @event mousedown\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */ /**\n    * Fired when the mouse is up (or a touch has ended) during the last step\n    *\n    * @event mouseup\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */ /**\n    * Fired when the user starts dragging a body\n    *\n    * @event startdrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */ /**\n    * Fired when the user ends dragging a body\n    *\n    * @event enddrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body that has stopped being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */ /*\n    *\n    *  Properties Documentation\n    *\n    */ /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */ /**\n     * The `Mouse` instance in use. If not supplied in `MouseConstraint.create`, one will be created.\n     *\n     * @property mouse\n     * @type mouse\n     * @default mouse\n     */ /**\n     * The `Body` that is currently being moved by the user, or `null` if no body.\n     *\n     * @property body\n     * @type body\n     * @default null\n     */ /**\n     * The `Constraint` object that is used to move the body during interaction.\n     *\n     * @property constraint\n     * @type constraint\n     */ /**\n     * An `Object` that specifies the collision filter properties.\n     * The collision filter allows the user to define which types of body this mouse constraint can interact with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter\n     * @type object\n     */ })();\n        /***/ },\n        /* 26 */ /***/ function(module1, exports, __webpack_require__) {\n            /**\n* The `Matter.Query` module contains methods for performing collision queries.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Query\n*/ var Query = {};\n            module1.exports = Query;\n            var Vector = __webpack_require__(2);\n            var Collision = __webpack_require__(8);\n            var Bounds = __webpack_require__(1);\n            var Bodies = __webpack_require__(12);\n            var Vertices = __webpack_require__(3);\n            (function() {\n                /**\n     * Returns a list of collisions between `body` and `bodies`.\n     * @method collides\n     * @param {body} body\n     * @param {body[]} bodies\n     * @return {collision[]} Collisions\n     */ Query.collides = function(body, bodies) {\n                    var collisions = [], bodiesLength = bodies.length, bounds = body.bounds, collides = Collision.collides, overlaps = Bounds.overlaps;\n                    for(var i = 0; i < bodiesLength; i++){\n                        var bodyA = bodies[i], partsALength = bodyA.parts.length, partsAStart = partsALength === 1 ? 0 : 1;\n                        if (overlaps(bodyA.bounds, bounds)) for(var j = partsAStart; j < partsALength; j++){\n                            var part = bodyA.parts[j];\n                            if (overlaps(part.bounds, bounds)) {\n                                var collision = collides(part, body);\n                                if (collision) {\n                                    collisions.push(collision);\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    return collisions;\n                };\n                /**\n     * Casts a ray segment against a set of bodies and returns all collisions, ray width is optional. Intersection points are not provided.\n     * @method ray\n     * @param {body[]} bodies\n     * @param {vector} startPoint\n     * @param {vector} endPoint\n     * @param {number} [rayWidth]\n     * @return {collision[]} Collisions\n     */ Query.ray = function(bodies, startPoint, endPoint, rayWidth) {\n                    rayWidth = rayWidth || 1e-100;\n                    var rayAngle = Vector.angle(startPoint, endPoint), rayLength = Vector.magnitude(Vector.sub(startPoint, endPoint)), rayX = (endPoint.x + startPoint.x) * 0.5, rayY = (endPoint.y + startPoint.y) * 0.5, ray = Bodies.rectangle(rayX, rayY, rayLength, rayWidth, {\n                        angle: rayAngle\n                    }), collisions = Query.collides(ray, bodies);\n                    for(var i = 0; i < collisions.length; i += 1){\n                        var collision = collisions[i];\n                        collision.body = collision.bodyB = collision.bodyA;\n                    }\n                    return collisions;\n                };\n                /**\n     * Returns all bodies whose bounds are inside (or outside if set) the given set of bounds, from the given set of bodies.\n     * @method region\n     * @param {body[]} bodies\n     * @param {bounds} bounds\n     * @param {bool} [outside=false]\n     * @return {body[]} The bodies matching the query\n     */ Query.region = function(bodies, bounds, outside) {\n                    var result = [];\n                    for(var i = 0; i < bodies.length; i++){\n                        var body = bodies[i], overlaps = Bounds.overlaps(body.bounds, bounds);\n                        if (overlaps && !outside || !overlaps && outside) result.push(body);\n                    }\n                    return result;\n                };\n                /**\n     * Returns all bodies whose vertices contain the given point, from the given set of bodies.\n     * @method point\n     * @param {body[]} bodies\n     * @param {vector} point\n     * @return {body[]} The bodies matching the query\n     */ Query.point = function(bodies, point) {\n                    var result = [];\n                    for(var i = 0; i < bodies.length; i++){\n                        var body = bodies[i];\n                        if (Bounds.contains(body.bounds, point)) for(var j = body.parts.length === 1 ? 0 : 1; j < body.parts.length; j++){\n                            var part = body.parts[j];\n                            if (Bounds.contains(part.bounds, point) && Vertices.contains(part.vertices, point)) {\n                                result.push(body);\n                                break;\n                            }\n                        }\n                    }\n                    return result;\n                };\n            })();\n        /***/ },\n        /* 27 */ /***/ function(module1, exports, __webpack_require__) {\n            /**\n* The `Matter.Runner` module is an optional utility which provides a game loop, \n* that handles continuously updating a `Matter.Engine` for you within a browser.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* If you are using your own game loop instead, then you do not need the `Matter.Runner` module.\n* Instead just call `Engine.update(engine, delta)` in your own loop.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Runner\n*/ var Runner = {};\n            module1.exports = Runner;\n            var Events = __webpack_require__(4);\n            var Engine = __webpack_require__(18);\n            var Common = __webpack_require__(0);\n            (function() {\n                var _requestAnimationFrame, _cancelAnimationFrame;\n                if (typeof window !== \"undefined\") {\n                    _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame;\n                    _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n                }\n                if (!_requestAnimationFrame) {\n                    var _frameTimeout;\n                    _requestAnimationFrame = function(callback) {\n                        _frameTimeout = setTimeout(function() {\n                            callback(Common.now());\n                        }, 1000 / 60);\n                    };\n                    _cancelAnimationFrame = function() {\n                        clearTimeout(_frameTimeout);\n                    };\n                }\n                /**\n     * Creates a new Runner. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * @method create\n     * @param {} options\n     */ Runner.create = function(options) {\n                    var defaults = {\n                        fps: 60,\n                        correction: 1,\n                        deltaSampleSize: 60,\n                        counterTimestamp: 0,\n                        frameCounter: 0,\n                        deltaHistory: [],\n                        timePrev: null,\n                        timeScalePrev: 1,\n                        frameRequestId: null,\n                        isFixed: false,\n                        enabled: true\n                    };\n                    var runner = Common.extend(defaults, options);\n                    runner.delta = runner.delta || 1000 / runner.fps;\n                    runner.deltaMin = runner.deltaMin || 1000 / runner.fps;\n                    runner.deltaMax = runner.deltaMax || 1000 / (runner.fps * 0.5);\n                    runner.fps = 1000 / runner.delta;\n                    return runner;\n                };\n                /**\n     * Continuously ticks a `Matter.Engine` by calling `Runner.tick` on the `requestAnimationFrame` event.\n     * @method run\n     * @param {engine} engine\n     */ Runner.run = function(runner, engine) {\n                    // create runner if engine is first argument\n                    if (typeof runner.positionIterations !== \"undefined\") {\n                        engine = runner;\n                        runner = Runner.create();\n                    }\n                    (function render(time) {\n                        runner.frameRequestId = _requestAnimationFrame(render);\n                        if (time && runner.enabled) Runner.tick(runner, engine, time);\n                    })();\n                    return runner;\n                };\n                /**\n     * A game loop utility that updates the engine and renderer by one step (a 'tick').\n     * Features delta smoothing, time correction and fixed or dynamic timing.\n     * Consider just `Engine.update(engine, delta)` if you're using your own loop.\n     * @method tick\n     * @param {runner} runner\n     * @param {engine} engine\n     * @param {number} time\n     */ Runner.tick = function(runner, engine, time) {\n                    var timing = engine.timing, correction = 1, delta;\n                    // create an event object\n                    var event = {\n                        timestamp: timing.timestamp\n                    };\n                    Events.trigger(runner, \"beforeTick\", event);\n                    if (runner.isFixed) // fixed timestep\n                    delta = runner.delta;\n                    else {\n                        // dynamic timestep based on wall clock between calls\n                        delta = time - runner.timePrev || runner.delta;\n                        runner.timePrev = time;\n                        // optimistically filter delta over a few frames, to improve stability\n                        runner.deltaHistory.push(delta);\n                        runner.deltaHistory = runner.deltaHistory.slice(-runner.deltaSampleSize);\n                        delta = Math.min.apply(null, runner.deltaHistory);\n                        // limit delta\n                        delta = delta < runner.deltaMin ? runner.deltaMin : delta;\n                        delta = delta > runner.deltaMax ? runner.deltaMax : delta;\n                        // correction for delta\n                        correction = delta / runner.delta;\n                        // update engine timing object\n                        runner.delta = delta;\n                    }\n                    // time correction for time scaling\n                    if (runner.timeScalePrev !== 0) correction *= timing.timeScale / runner.timeScalePrev;\n                    if (timing.timeScale === 0) correction = 0;\n                    runner.timeScalePrev = timing.timeScale;\n                    runner.correction = correction;\n                    // fps counter\n                    runner.frameCounter += 1;\n                    if (time - runner.counterTimestamp >= 1000) {\n                        runner.fps = runner.frameCounter * ((time - runner.counterTimestamp) / 1000);\n                        runner.counterTimestamp = time;\n                        runner.frameCounter = 0;\n                    }\n                    Events.trigger(runner, \"tick\", event);\n                    // update\n                    Events.trigger(runner, \"beforeUpdate\", event);\n                    Engine.update(engine, delta, correction);\n                    Events.trigger(runner, \"afterUpdate\", event);\n                    Events.trigger(runner, \"afterTick\", event);\n                };\n                /**\n     * Ends execution of `Runner.run` on the given `runner`, by canceling the animation frame request event loop.\n     * If you wish to only temporarily pause the engine, see `engine.enabled` instead.\n     * @method stop\n     * @param {runner} runner\n     */ Runner.stop = function(runner) {\n                    _cancelAnimationFrame(runner.frameRequestId);\n                };\n                /**\n     * Alias for `Runner.run`.\n     * @method start\n     * @param {runner} runner\n     * @param {engine} engine\n     */ Runner.start = function(runner, engine) {\n                    Runner.run(runner, engine);\n                };\n            /*\n    *\n    *  Events Documentation\n    *\n    */ /**\n    * Fired at the start of a tick, before any updates to the engine or timing\n    *\n    * @event beforeTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */ /**\n    * Fired after engine timing updated, but just before update\n    *\n    * @event tick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */ /**\n    * Fired at the end of a tick, after engine update and after rendering\n    *\n    * @event afterTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */ /**\n    * Fired before update\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */ /**\n    * Fired after update\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */ /*\n    *\n    *  Properties Documentation\n    *\n    */ /**\n     * A flag that specifies whether the runner is running or not.\n     *\n     * @property enabled\n     * @type boolean\n     * @default true\n     */ /**\n     * A `Boolean` that specifies if the runner should use a fixed timestep (otherwise it is variable).\n     * If timing is fixed, then the apparent simulation speed will change depending on the frame rate (but behaviour will be deterministic).\n     * If the timing is variable, then the apparent simulation speed will be constant (approximately, but at the cost of determininism).\n     *\n     * @property isFixed\n     * @type boolean\n     * @default false\n     */ /**\n     * A `Number` that specifies the time step between updates in milliseconds.\n     * If `engine.timing.isFixed` is set to `true`, then `delta` is fixed.\n     * If it is `false`, then `delta` can dynamically change to maintain the correct apparent simulation speed.\n     *\n     * @property delta\n     * @type number\n     * @default 1000 / 60\n     */ })();\n        /***/ },\n        /* 28 */ /***/ function(module1, exports, __webpack_require__) {\n            /**\n* This module has now been replaced by `Matter.Collision`.\n*\n* All usage should be migrated to `Matter.Collision`.\n* For back-compatibility purposes this module will remain for a short term and then later removed in a future release.\n*\n* The `Matter.SAT` module contains methods for detecting collisions using the Separating Axis Theorem.\n*\n* @class SAT\n* @deprecated\n*/ var SAT = {};\n            module1.exports = SAT;\n            var Collision = __webpack_require__(8);\n            var Common = __webpack_require__(0);\n            var deprecated = Common.deprecated;\n            (function() {\n                /**\n     * Detect collision between two bodies using the Separating Axis Theorem.\n     * @deprecated replaced by Collision.collides\n     * @method collides\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {collision} collision\n     */ SAT.collides = function(bodyA, bodyB) {\n                    return Collision.collides(bodyA, bodyB);\n                };\n                deprecated(SAT, \"collides\", \"SAT.collides ➤ replaced by Collision.collides\");\n            })();\n        /***/ },\n        /* 29 */ /***/ function(module1, exports, __webpack_require__) {\n            /**\n* The `Matter.Svg` module contains methods for converting SVG images into an array of vector points.\n*\n* To use this module you also need the SVGPathSeg polyfill: https://github.com/progers/pathseg\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Svg\n*/ var Svg = {};\n            module1.exports = Svg;\n            var Bounds = __webpack_require__(1);\n            var Common = __webpack_require__(0);\n            (function() {\n                /**\n     * Converts an SVG path into an array of vector points.\n     * If the input path forms a concave shape, you must decompose the result into convex parts before use.\n     * See `Bodies.fromVertices` which provides support for this.\n     * Note that this function is not guaranteed to support complex paths (such as those with holes).\n     * You must load the `pathseg.js` polyfill on newer browsers.\n     * @method pathToVertices\n     * @param {SVGPathElement} path\n     * @param {Number} [sampleLength=15]\n     * @return {Vector[]} points\n     */ Svg.pathToVertices = function(path, sampleLength) {\n                    if (typeof window !== \"undefined\" && !(\"SVGPathSeg\" in window)) Common.warn(\"Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.\");\n                    // https://github.com/wout/svg.topoly.js/blob/master/svg.topoly.js\n                    var i, il, total, point, segment, segments, segmentsQueue, lastSegment, lastPoint, segmentIndex, points = [], lx, ly, length = 0, x = 0, y = 0;\n                    sampleLength = sampleLength || 15;\n                    var addPoint = function(px, py, pathSegType) {\n                        // all odd-numbered path types are relative except PATHSEG_CLOSEPATH (1)\n                        var isRelative = pathSegType % 2 === 1 && pathSegType > 1;\n                        // when the last point doesn't equal the current point add the current point\n                        if (!lastPoint || px != lastPoint.x || py != lastPoint.y) {\n                            if (lastPoint && isRelative) {\n                                lx = lastPoint.x;\n                                ly = lastPoint.y;\n                            } else {\n                                lx = 0;\n                                ly = 0;\n                            }\n                            var point = {\n                                x: lx + px,\n                                y: ly + py\n                            };\n                            // set last point\n                            if (isRelative || !lastPoint) lastPoint = point;\n                            points.push(point);\n                            x = lx + px;\n                            y = ly + py;\n                        }\n                    };\n                    var addSegmentPoint = function(segment) {\n                        var segType = segment.pathSegTypeAsLetter.toUpperCase();\n                        // skip path ends\n                        if (segType === \"Z\") return;\n                        // map segment to x and y\n                        switch(segType){\n                            case \"M\":\n                            case \"L\":\n                            case \"T\":\n                            case \"C\":\n                            case \"S\":\n                            case \"Q\":\n                                x = segment.x;\n                                y = segment.y;\n                                break;\n                            case \"H\":\n                                x = segment.x;\n                                break;\n                            case \"V\":\n                                y = segment.y;\n                                break;\n                        }\n                        addPoint(x, y, segment.pathSegType);\n                    };\n                    // ensure path is absolute\n                    Svg._svgPathToAbsolute(path);\n                    // get total length\n                    total = path.getTotalLength();\n                    // queue segments\n                    segments = [];\n                    for(i = 0; i < path.pathSegList.numberOfItems; i += 1)segments.push(path.pathSegList.getItem(i));\n                    segmentsQueue = segments.concat();\n                    // sample through path\n                    while(length < total){\n                        // get segment at position\n                        segmentIndex = path.getPathSegAtLength(length);\n                        segment = segments[segmentIndex];\n                        // new segment\n                        if (segment != lastSegment) {\n                            while(segmentsQueue.length && segmentsQueue[0] != segment)addSegmentPoint(segmentsQueue.shift());\n                            lastSegment = segment;\n                        }\n                        // add points in between when curving\n                        // TODO: adaptive sampling\n                        switch(segment.pathSegTypeAsLetter.toUpperCase()){\n                            case \"C\":\n                            case \"T\":\n                            case \"S\":\n                            case \"Q\":\n                            case \"A\":\n                                point = path.getPointAtLength(length);\n                                addPoint(point.x, point.y, 0);\n                                break;\n                        }\n                        // increment by sample value\n                        length += sampleLength;\n                    }\n                    // add remaining segments not passed by sampling\n                    for(i = 0, il = segmentsQueue.length; i < il; ++i)addSegmentPoint(segmentsQueue[i]);\n                    return points;\n                };\n                Svg._svgPathToAbsolute = function(path) {\n                    // http://phrogz.net/convert-svg-path-to-all-absolute-commands\n                    // Copyright (c) Gavin Kistner\n                    // http://phrogz.net/js/_ReuseLicense.txt\n                    // Modifications: tidy formatting and naming\n                    var x0, y0, x1, y1, x2, y2, segs = path.pathSegList, x = 0, y = 0, len = segs.numberOfItems;\n                    for(var i = 0; i < len; ++i){\n                        var seg = segs.getItem(i), segType = seg.pathSegTypeAsLetter;\n                        if (/[MLHVCSQTA]/.test(segType)) {\n                            if (\"x\" in seg) x = seg.x;\n                            if (\"y\" in seg) y = seg.y;\n                        } else {\n                            if (\"x1\" in seg) x1 = x + seg.x1;\n                            if (\"x2\" in seg) x2 = x + seg.x2;\n                            if (\"y1\" in seg) y1 = y + seg.y1;\n                            if (\"y2\" in seg) y2 = y + seg.y2;\n                            if (\"x\" in seg) x += seg.x;\n                            if (\"y\" in seg) y += seg.y;\n                            switch(segType){\n                                case \"m\":\n                                    segs.replaceItem(path.createSVGPathSegMovetoAbs(x, y), i);\n                                    break;\n                                case \"l\":\n                                    segs.replaceItem(path.createSVGPathSegLinetoAbs(x, y), i);\n                                    break;\n                                case \"h\":\n                                    segs.replaceItem(path.createSVGPathSegLinetoHorizontalAbs(x), i);\n                                    break;\n                                case \"v\":\n                                    segs.replaceItem(path.createSVGPathSegLinetoVerticalAbs(y), i);\n                                    break;\n                                case \"c\":\n                                    segs.replaceItem(path.createSVGPathSegCurvetoCubicAbs(x, y, x1, y1, x2, y2), i);\n                                    break;\n                                case \"s\":\n                                    segs.replaceItem(path.createSVGPathSegCurvetoCubicSmoothAbs(x, y, x2, y2), i);\n                                    break;\n                                case \"q\":\n                                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticAbs(x, y, x1, y1), i);\n                                    break;\n                                case \"t\":\n                                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticSmoothAbs(x, y), i);\n                                    break;\n                                case \"a\":\n                                    segs.replaceItem(path.createSVGPathSegArcAbs(x, y, seg.r1, seg.r2, seg.angle, seg.largeArcFlag, seg.sweepFlag), i);\n                                    break;\n                                case \"z\":\n                                case \"Z\":\n                                    x = x0;\n                                    y = y0;\n                                    break;\n                            }\n                        }\n                        if (segType == \"M\" || segType == \"m\") {\n                            x0 = x;\n                            y0 = y;\n                        }\n                    }\n                };\n            })();\n        /***/ },\n        /* 30 */ /***/ function(module1, exports, __webpack_require__) {\n            /**\n* This module has now been replaced by `Matter.Composite`.\n*\n* All usage should be migrated to the equivalent functions found on `Matter.Composite`.\n* For example `World.add(world, body)` now becomes `Composite.add(world, body)`.\n*\n* The property `world.gravity` has been moved to `engine.gravity`.\n*\n* For back-compatibility purposes this module will remain as a direct alias to `Matter.Composite` in the short term during migration.\n* Eventually this alias module will be marked as deprecated and then later removed in a future release.\n*\n* @class World\n*/ var World = {};\n            module1.exports = World;\n            var Composite = __webpack_require__(5);\n            var Common = __webpack_require__(0);\n            (function() {\n                /**\n     * See above, aliases for back compatibility only\n     */ World.create = Composite.create;\n                World.add = Composite.add;\n                World.remove = Composite.remove;\n                World.clear = Composite.clear;\n                World.addComposite = Composite.addComposite;\n                World.addBody = Composite.addBody;\n                World.addConstraint = Composite.addConstraint;\n            })();\n        /***/ }\n    ]);\n});\n\n\nfunction $15908c238ece17d0$var$isTouchDevice() {\n    return \"ontouchstart\" in window || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0;\n}\nvar $15908c238ece17d0$var$Engine = (0, (/*@__PURE__*/$parcel$interopDefault($5cd67e1a674bf254$exports))).Engine, $15908c238ece17d0$var$Render = (0, (/*@__PURE__*/$parcel$interopDefault($5cd67e1a674bf254$exports))).Render, $15908c238ece17d0$var$Runner = (0, (/*@__PURE__*/$parcel$interopDefault($5cd67e1a674bf254$exports))).Runner, $15908c238ece17d0$var$Bodies = (0, (/*@__PURE__*/$parcel$interopDefault($5cd67e1a674bf254$exports))).Bodies, $15908c238ece17d0$var$Composite = (0, (/*@__PURE__*/$parcel$interopDefault($5cd67e1a674bf254$exports))).Composite, $15908c238ece17d0$var$Constraint = (0, (/*@__PURE__*/$parcel$interopDefault($5cd67e1a674bf254$exports))).Constraint, $15908c238ece17d0$var$MouseConstraint = (0, (/*@__PURE__*/$parcel$interopDefault($5cd67e1a674bf254$exports))).MouseConstraint, $15908c238ece17d0$var$Mouse = (0, (/*@__PURE__*/$parcel$interopDefault($5cd67e1a674bf254$exports))).Mouse, $15908c238ece17d0$var$World = (0, (/*@__PURE__*/$parcel$interopDefault($5cd67e1a674bf254$exports))).World, $15908c238ece17d0$var$Events = (0, (/*@__PURE__*/$parcel$interopDefault($5cd67e1a674bf254$exports))).Events, $15908c238ece17d0$var$Body = (0, (/*@__PURE__*/$parcel$interopDefault($5cd67e1a674bf254$exports))).Body;\nvar $15908c238ece17d0$var$engine = $15908c238ece17d0$var$Engine.create();\nlet $15908c238ece17d0$var$engineWrap = document.getElementById(\"physics-engine-wrap\");\nvar $15908c238ece17d0$var$render = $15908c238ece17d0$var$Render.create({\n    element: $15908c238ece17d0$var$engineWrap,\n    engine: $15908c238ece17d0$var$engine,\n    options: {\n        wireframes: false\n    }\n});\n//Size dimensions to parent el (100vw/h)\n$15908c238ece17d0$var$render.options.wireframeBackground = \"transparent\";\n$15908c238ece17d0$var$render.options.background = \"transparent\";\n$15908c238ece17d0$var$render.bounds.max.x = $15908c238ece17d0$var$engineWrap.getBoundingClientRect().width;\n$15908c238ece17d0$var$render.bounds.max.y = $15908c238ece17d0$var$engineWrap.getBoundingClientRect().height * 2;\n$15908c238ece17d0$var$render.options.width = $15908c238ece17d0$var$engineWrap.getBoundingClientRect().width;\n$15908c238ece17d0$var$render.options.height = $15908c238ece17d0$var$engineWrap.getBoundingClientRect().height * 2;\n$15908c238ece17d0$var$render.canvas.width = $15908c238ece17d0$var$engineWrap.getBoundingClientRect().width;\n$15908c238ece17d0$var$render.canvas.height = $15908c238ece17d0$var$engineWrap.getBoundingClientRect().height * 2;\nwindow.addEventListener(\"resize\", ()=>{\n    $15908c238ece17d0$var$render.bounds.max.x = $15908c238ece17d0$var$engineWrap.getBoundingClientRect().width;\n    $15908c238ece17d0$var$render.bounds.max.y = $15908c238ece17d0$var$engineWrap.getBoundingClientRect().height * 2;\n    $15908c238ece17d0$var$render.options.width = $15908c238ece17d0$var$engineWrap.getBoundingClientRect().width;\n    $15908c238ece17d0$var$render.options.height = $15908c238ece17d0$var$engineWrap.getBoundingClientRect().height * 2;\n    $15908c238ece17d0$var$render.canvas.width = $15908c238ece17d0$var$engineWrap.getBoundingClientRect().width;\n    $15908c238ece17d0$var$render.canvas.height = $15908c238ece17d0$var$engineWrap.getBoundingClientRect().height * 2;\n});\n//Creates invisible cursor hitbox\nvar $15908c238ece17d0$var$cursor = $15908c238ece17d0$var$Bodies.circle(450, 50, 37, 37);\n$15908c238ece17d0$var$cursor.render.visible = false;\n//Add cursor to world\nlet $15908c238ece17d0$var$world = $15908c238ece17d0$var$engine.world;\n$15908c238ece17d0$var$Composite.add($15908c238ece17d0$var$world, [\n    $15908c238ece17d0$var$cursor\n]);\n$15908c238ece17d0$var$engine.gravity.y = 0.05;\n$15908c238ece17d0$var$Render.run($15908c238ece17d0$var$render);\n// run the engine\nvar $15908c238ece17d0$var$runner = $15908c238ece17d0$var$Runner.create();\n$15908c238ece17d0$var$Runner.run($15908c238ece17d0$var$runner, $15908c238ece17d0$var$engine);\n// create mouse that engine understands\nlet $15908c238ece17d0$var$canvas = document.querySelector(\"canvas\");\nlet $15908c238ece17d0$var$canvasMouse = $15908c238ece17d0$var$Mouse.create($15908c238ece17d0$var$canvas);\n// create mouse constraint\nlet $15908c238ece17d0$var$mConstraintOptions = {\n    mouse: $15908c238ece17d0$var$canvasMouse,\n    constraint: {\n        render: {\n            visible: false\n        }\n    }\n};\nlet $15908c238ece17d0$var$mConstraint = $15908c238ece17d0$var$MouseConstraint.create($15908c238ece17d0$var$engine, $15908c238ece17d0$var$mConstraintOptions);\n$15908c238ece17d0$var$World.add($15908c238ece17d0$var$world, $15908c238ece17d0$var$mConstraint);\n//Change default event listeners for Matter.Mouse\n$15908c238ece17d0$var$canvasMouse.element.removeEventListener(\"mousedown\", $15908c238ece17d0$var$canvasMouse.mousedown);\n$15908c238ece17d0$var$canvasMouse.element.removeEventListener(\"mouseup\", $15908c238ece17d0$var$canvasMouse.mouseup);\n//Makes mouse always mousedown\ndocument.addEventListener(\"mousemove\", $15908c238ece17d0$var$canvasMouse.mousedown);\ndocument.addEventListener(\"mousemove\", $15908c238ece17d0$var$canvasMouse.mousemove);\nif (!$15908c238ece17d0$var$isTouchDevice()) document.addEventListener(\"mousemove\", $15908c238ece17d0$var$alignCursor);\n//Helps with reliability\nlet $15908c238ece17d0$var$timesFired = 0;\nfunction $15908c238ece17d0$var$alignCursor() {\n    if ($15908c238ece17d0$var$timesFired > 5) return;\n    $15908c238ece17d0$var$timesFired++;\n    (0, (/*@__PURE__*/$parcel$interopDefault($5cd67e1a674bf254$exports))).Body.setPosition($15908c238ece17d0$var$cursor, $15908c238ece17d0$var$canvasMouse.position);\n}\n//Spawn boxes\nfunction $15908c238ece17d0$var$newBox() {\n    let size = Math.random() * 100 + 20;\n    let spawnPosY = -document.getElementById(\"main\").scrollTop; // Ensures boxes spawn at top of document after user has scrolled\n    let box = $15908c238ece17d0$var$Bodies.rectangle(Math.random() * $15908c238ece17d0$var$render.options.width, spawnPosY - size * 3, size, size);\n    box.render.fillStyle = \"transparent\";\n    box.render.strokeStyle = \"#BCFFE3\";\n    if (Math.random() > 0.9) box.render.strokeStyle = \"#FF8A00\";\n    box.render.lineWidth = \"3\";\n    (0, (/*@__PURE__*/$parcel$interopDefault($5cd67e1a674bf254$exports))).Body.setVelocity(box, {\n        x: (Math.random() - 0.5) * 10,\n        y: (Math.random() - 0.5) * 2\n    });\n    (0, (/*@__PURE__*/$parcel$interopDefault($5cd67e1a674bf254$exports))).Body.setAngularVelocity(box, Math.random() / 5);\n    return box;\n}\nlet $15908c238ece17d0$var$spawnRate = 1000000 / document.getElementById(\"main\").clientWidth; //control spawn rate depending on device width\nlet $15908c238ece17d0$var$initSpawn = document.getElementById(\"main\").clientWidth / 40;\nlet $15908c238ece17d0$var$startBoxes = ()=>setInterval(()=>{\n        if (!document.hidden) $15908c238ece17d0$var$World.add($15908c238ece17d0$var$world, $15908c238ece17d0$var$newBox());\n        const bodyLimit = 1000; //maximum amount of boxes\n        let bodiesArray = $15908c238ece17d0$var$Composite.allBodies($15908c238ece17d0$var$world);\n        if (bodiesArray.length > bodyLimit) {\n            let excessBodies = bodiesArray.length - bodyLimit;\n            for(let i = 1; i < excessBodies; i++)// i === 1 to preserve cursor body\n            $15908c238ece17d0$var$Composite.remove($15908c238ece17d0$var$world, bodiesArray[i]);\n        }\n    }, $15908c238ece17d0$var$spawnRate);\nfunction $15908c238ece17d0$var$lotsOfBoxes() {\n    if (!document.hidden) for(let i = 0; i < $15908c238ece17d0$var$initSpawn; i++){\n        let size = Math.random() * 100 + 20;\n        let spawnPosY = -document.getElementById(\"main\").scrollTop; // Ensures boxes spawn at top of document after user has scrolled\n        let box = $15908c238ece17d0$var$Bodies.rectangle(Math.random() * $15908c238ece17d0$var$render.options.width, spawnPosY - size * 3, size, size);\n        box.render.fillStyle = \"transparent\";\n        box.render.strokeStyle = \"#BCFFE3\";\n        if (Math.random() > 0.9) box.render.strokeStyle = \"#FF8A00\";\n        box.render.lineWidth = \"3\";\n        (0, (/*@__PURE__*/$parcel$interopDefault($5cd67e1a674bf254$exports))).Body.setVelocity(box, {\n            x: (Math.random() - 0.5) * 10,\n            y: (Math.random() - 0.5) * 10\n        });\n        (0, (/*@__PURE__*/$parcel$interopDefault($5cd67e1a674bf254$exports))).Body.setAngularVelocity(box, Math.random() / 5);\n        $15908c238ece17d0$var$World.add($15908c238ece17d0$var$world, box);\n    }\n}\n//Starts boxes spawning once is active\nif (!$15908c238ece17d0$var$isTouchDevice()) {\n    document.addEventListener(\"mousemove\", $15908c238ece17d0$var$startBoxes, {\n        once: true\n    });\n    document.addEventListener(\"mousemove\", $15908c238ece17d0$var$lotsOfBoxes, {\n        once: true\n    });\n} else {\n    $15908c238ece17d0$var$startBoxes();\n    $15908c238ece17d0$var$lotsOfBoxes();\n}\n// --- PARRALAX EFFECT\n// Creating the parralax effect for boxes in the engine rather than moving canvas helps performance alot\nconst $15908c238ece17d0$var$parallaxSpeed = 0.8;\nlet $15908c238ece17d0$var$main = document.getElementById(\"main\");\nlet $15908c238ece17d0$var$prevTop = 0;\n$15908c238ece17d0$var$main.addEventListener(\"scroll\", (e)=>{\n    let amountMoved = $15908c238ece17d0$var$prevTop - $15908c238ece17d0$var$main.scrollTop;\n    if ($15908c238ece17d0$var$prevTop > $15908c238ece17d0$var$main.scrollTop) $15908c238ece17d0$var$Composite.translate($15908c238ece17d0$var$world, {\n        x: 0,\n        y: $15908c238ece17d0$var$parallaxSpeed * amountMoved\n    });\n    else $15908c238ece17d0$var$Composite.translate($15908c238ece17d0$var$world, {\n        x: 0,\n        y: $15908c238ece17d0$var$parallaxSpeed * amountMoved\n    });\n    $15908c238ece17d0$var$prevTop = $15908c238ece17d0$var$main.scrollTop;\n});\nif ($15908c238ece17d0$var$isTouchDevice()) {\n    let bodiesArray = $15908c238ece17d0$var$Composite.allBodies($15908c238ece17d0$var$world);\n    $15908c238ece17d0$var$Composite.remove($15908c238ece17d0$var$world, bodiesArray[0]);\n    $15908c238ece17d0$var$Composite.remove($15908c238ece17d0$var$world, $15908c238ece17d0$var$mConstraint);\n}\n//no collision if not in landing page\nif (!$15908c238ece17d0$var$isTouchDevice()) document.addEventListener(\"mousemove\", (e)=>{\n    if (document.getElementById(\"page-wrap\").classList.length === 0) {\n        //controls is sandbox mode activated\n        if (Array.from(document.elementsFromPoint(e.pageX, e.pageY)).includes(document.getElementById(\"home\"))) $15908c238ece17d0$var$Composite.allBodies($15908c238ece17d0$var$world)[0].collisionFilter.category = 1;\n        else $15908c238ece17d0$var$Composite.allBodies($15908c238ece17d0$var$world)[0].collisionFilter.category = 0;\n    }\n});\n\n\n//# sourceMappingURL=index.b4bd9a05.js.map\n","// <!-- DISCLAIMER!!!!\n// - If you're looking through my portfolio to check out my code standard, please check out my most recent projects as this code is now very old and messy. -->\n\n// --- MATTER JS\n// Runs the physics engine\n// generates cursor hitbox, background boxes, and deals with interactions.\n\nfunction isTouchDevice() {\n  return (\n    \"ontouchstart\" in window ||\n    navigator.maxTouchPoints > 0 ||\n    navigator.msMaxTouchPoints > 0\n  );\n}\n\nimport Matter from \"matter-js\";\n\nvar Engine = Matter.Engine,\n  Render = Matter.Render,\n  Runner = Matter.Runner,\n  Bodies = Matter.Bodies,\n  Composite = Matter.Composite,\n  Constraint = Matter.Constraint,\n  MouseConstraint = Matter.MouseConstraint,\n  Mouse = Matter.Mouse,\n  World = Matter.World,\n  Events = Matter.Events,\n  Body = Matter.Body;\n\nvar engine = Engine.create();\nlet engineWrap = document.getElementById(\"physics-engine-wrap\");\nvar render = Render.create({\n  element: engineWrap,\n  engine: engine,\n  options: {\n    wireframes: false,\n  },\n});\n\n//Size dimensions to parent el (100vw/h)\nrender.options.wireframeBackground = \"transparent\";\nrender.options.background = \"transparent\";\nrender.bounds.max.x = engineWrap.getBoundingClientRect().width;\nrender.bounds.max.y = engineWrap.getBoundingClientRect().height * 2;\nrender.options.width = engineWrap.getBoundingClientRect().width;\nrender.options.height = engineWrap.getBoundingClientRect().height * 2;\nrender.canvas.width = engineWrap.getBoundingClientRect().width;\nrender.canvas.height = engineWrap.getBoundingClientRect().height * 2;\n\nwindow.addEventListener(\"resize\", () => {\n  render.bounds.max.x = engineWrap.getBoundingClientRect().width;\n  render.bounds.max.y = engineWrap.getBoundingClientRect().height * 2;\n  render.options.width = engineWrap.getBoundingClientRect().width;\n  render.options.height = engineWrap.getBoundingClientRect().height * 2;\n  render.canvas.width = engineWrap.getBoundingClientRect().width;\n  render.canvas.height = engineWrap.getBoundingClientRect().height * 2;\n});\n\n//Creates invisible cursor hitbox\nvar cursor = Bodies.circle(450, 50, 37, 37);\ncursor.render.visible = false;\n//Add cursor to world\nlet world = engine.world;\nComposite.add(world, [cursor]);\n\nengine.gravity.y = 0.05;\n\nRender.run(render);\n\n// run the engine\nvar runner = Runner.create();\nRunner.run(runner, engine);\n\n// create mouse that engine understands\nlet canvas = document.querySelector(\"canvas\");\nlet canvasMouse = Mouse.create(canvas);\n\n// create mouse constraint\nlet mConstraintOptions = {\n  mouse: canvasMouse,\n  constraint: {\n    render: {\n      visible: false,\n    },\n  },\n};\nlet mConstraint = MouseConstraint.create(engine, mConstraintOptions);\n\nWorld.add(world, mConstraint);\n\n//Change default event listeners for Matter.Mouse\ncanvasMouse.element.removeEventListener(\"mousedown\", canvasMouse.mousedown);\ncanvasMouse.element.removeEventListener(\"mouseup\", canvasMouse.mouseup);\n//Makes mouse always mousedown\ndocument.addEventListener(\"mousemove\", canvasMouse.mousedown);\ndocument.addEventListener(\"mousemove\", canvasMouse.mousemove);\nif (!isTouchDevice()) {\n  document.addEventListener(\"mousemove\", alignCursor);\n}\n\n//Helps with reliability\nlet timesFired = 0;\n\nfunction alignCursor() {\n  if (timesFired > 5) return;\n  timesFired++;\n  Matter.Body.setPosition(cursor, canvasMouse.position);\n}\n\n//Spawn boxes\n\nfunction newBox() {\n  let size = Math.random() * 100 + 20;\n  let spawnPosY = -document.getElementById(\"main\").scrollTop; // Ensures boxes spawn at top of document after user has scrolled\n  let box = Bodies.rectangle(\n    Math.random() * render.options.width,\n    spawnPosY - size * 3,\n    size,\n    size\n  );\n  box.render.fillStyle = \"transparent\";\n  box.render.strokeStyle = \"#BCFFE3\";\n  if (Math.random() > 0.9) {\n    box.render.strokeStyle = \"#FF8A00\";\n  }\n  box.render.lineWidth = \"3\";\n  Matter.Body.setVelocity(box, {\n    x: (Math.random() - 0.5) * 10,\n    y: (Math.random() - 0.5) * 2,\n  });\n  Matter.Body.setAngularVelocity(box, Math.random() / 5);\n  return box;\n}\n\nlet spawnRate = 1000000 / document.getElementById(\"main\").clientWidth; //control spawn rate depending on device width\nlet initSpawn = document.getElementById(\"main\").clientWidth / 40;\nlet startBoxes = () =>\n  setInterval(() => {\n    if (!document.hidden) {\n      World.add(world, newBox());\n    }\n\n    const bodyLimit = 1000; //maximum amount of boxes\n    let bodiesArray = Composite.allBodies(world);\n    if (bodiesArray.length > bodyLimit) {\n      let excessBodies = bodiesArray.length - bodyLimit;\n      for (let i = 1; i < excessBodies; i++) {\n        // i === 1 to preserve cursor body\n        Composite.remove(world, bodiesArray[i]);\n      }\n    }\n  }, spawnRate);\nfunction lotsOfBoxes() {\n  if (!document.hidden) {\n    for (let i = 0; i < initSpawn; i++) {\n      let size = Math.random() * 100 + 20;\n      let spawnPosY = -document.getElementById(\"main\").scrollTop; // Ensures boxes spawn at top of document after user has scrolled\n      let box = Bodies.rectangle(\n        Math.random() * render.options.width,\n        spawnPosY - size * 3,\n        size,\n        size\n      );\n      box.render.fillStyle = \"transparent\";\n      box.render.strokeStyle = \"#BCFFE3\";\n      if (Math.random() > 0.9) {\n        box.render.strokeStyle = \"#FF8A00\";\n      }\n      box.render.lineWidth = \"3\";\n      Matter.Body.setVelocity(box, {\n        x: (Math.random() - 0.5) * 10,\n        y: (Math.random() - 0.5) * 10,\n      });\n      Matter.Body.setAngularVelocity(box, Math.random() / 5);\n      World.add(world, box);\n    }\n  }\n}\n\n//Starts boxes spawning once is active\nif (!isTouchDevice()) {\n  document.addEventListener(\"mousemove\", startBoxes, { once: true });\n  document.addEventListener(\"mousemove\", lotsOfBoxes, { once: true });\n} else {\n  startBoxes();\n  lotsOfBoxes();\n}\n\n// --- PARRALAX EFFECT\n// Creating the parralax effect for boxes in the engine rather than moving canvas helps performance alot\n\nconst parallaxSpeed = 0.8;\nlet main = document.getElementById(\"main\");\n\nlet prevTop = 0;\nmain.addEventListener(\"scroll\", (e) => {\n  let amountMoved = prevTop - main.scrollTop;\n  if (prevTop > main.scrollTop) {\n    Composite.translate(world, { x: 0, y: parallaxSpeed * amountMoved });\n  } else {\n    Composite.translate(world, { x: 0, y: parallaxSpeed * amountMoved });\n  }\n  prevTop = main.scrollTop;\n});\n\nif (isTouchDevice()) {\n  let bodiesArray = Composite.allBodies(world);\n  Composite.remove(world, bodiesArray[0]);\n  Composite.remove(world, mConstraint);\n}\n\n//no collision if not in landing page\nif (!isTouchDevice()) {\n  document.addEventListener(\"mousemove\", (e) => {\n    if (document.getElementById(\"page-wrap\").classList.length === 0) {\n      //controls is sandbox mode activated\n      if (\n        Array.from(document.elementsFromPoint(e.pageX, e.pageY)).includes(\n          document.getElementById(\"home\")\n        )\n      ) {\n        Composite.allBodies(world)[0].collisionFilter.category = 1;\n      } else {\n        Composite.allBodies(world)[0].collisionFilter.category = 0;\n      }\n    }\n  });\n}\n","/*!\n * matter-js 0.18.0 by @liabru\n * http://brm.io/matter-js/\n * License MIT\n * \n * The MIT License (MIT)\n * \n * Copyright (c) Liam Brummitt and contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Matter\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Matter\"] = factory();\n\telse\n\t\troot[\"Matter\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 21);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Common` module contains utility functions that are common to all modules.\n*\n* @class Common\n*/\n\nvar Common = {};\n\nmodule.exports = Common;\n\n(function() {\n\n    Common._nextId = 0;\n    Common._seed = 0;\n    Common._nowStartTime = +(new Date());\n    Common._warnedOnce = {};\n    Common._decomp = null;\n    \n    /**\n     * Extends the object in the first argument using the object in the second argument.\n     * @method extend\n     * @param {} obj\n     * @param {boolean} deep\n     * @return {} obj extended\n     */\n    Common.extend = function(obj, deep) {\n        var argsStart,\n            args,\n            deepClone;\n\n        if (typeof deep === 'boolean') {\n            argsStart = 2;\n            deepClone = deep;\n        } else {\n            argsStart = 1;\n            deepClone = true;\n        }\n\n        for (var i = argsStart; i < arguments.length; i++) {\n            var source = arguments[i];\n\n            if (source) {\n                for (var prop in source) {\n                    if (deepClone && source[prop] && source[prop].constructor === Object) {\n                        if (!obj[prop] || obj[prop].constructor === Object) {\n                            obj[prop] = obj[prop] || {};\n                            Common.extend(obj[prop], deepClone, source[prop]);\n                        } else {\n                            obj[prop] = source[prop];\n                        }\n                    } else {\n                        obj[prop] = source[prop];\n                    }\n                }\n            }\n        }\n        \n        return obj;\n    };\n\n    /**\n     * Creates a new clone of the object, if deep is true references will also be cloned.\n     * @method clone\n     * @param {} obj\n     * @param {bool} deep\n     * @return {} obj cloned\n     */\n    Common.clone = function(obj, deep) {\n        return Common.extend({}, deep, obj);\n    };\n\n    /**\n     * Returns the list of keys for the given object.\n     * @method keys\n     * @param {} obj\n     * @return {string[]} keys\n     */\n    Common.keys = function(obj) {\n        if (Object.keys)\n            return Object.keys(obj);\n\n        // avoid hasOwnProperty for performance\n        var keys = [];\n        for (var key in obj)\n            keys.push(key);\n        return keys;\n    };\n\n    /**\n     * Returns the list of values for the given object.\n     * @method values\n     * @param {} obj\n     * @return {array} Array of the objects property values\n     */\n    Common.values = function(obj) {\n        var values = [];\n        \n        if (Object.keys) {\n            var keys = Object.keys(obj);\n            for (var i = 0; i < keys.length; i++) {\n                values.push(obj[keys[i]]);\n            }\n            return values;\n        }\n        \n        // avoid hasOwnProperty for performance\n        for (var key in obj)\n            values.push(obj[key]);\n        return values;\n    };\n\n    /**\n     * Gets a value from `base` relative to the `path` string.\n     * @method get\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} The object at the given path\n     */\n    Common.get = function(obj, path, begin, end) {\n        path = path.split('.').slice(begin, end);\n\n        for (var i = 0; i < path.length; i += 1) {\n            obj = obj[path[i]];\n        }\n\n        return obj;\n    };\n\n    /**\n     * Sets a value on `base` relative to the given `path` string.\n     * @method set\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {} val The value to set\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} Pass through `val` for chaining\n     */\n    Common.set = function(obj, path, val, begin, end) {\n        var parts = path.split('.').slice(begin, end);\n        Common.get(obj, path, 0, -1)[parts[parts.length - 1]] = val;\n        return val;\n    };\n\n    /**\n     * Shuffles the given array in-place.\n     * The function uses a seeded random generator.\n     * @method shuffle\n     * @param {array} array\n     * @return {array} array shuffled randomly\n     */\n    Common.shuffle = function(array) {\n        for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Common.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        return array;\n    };\n\n    /**\n     * Randomly chooses a value from a list with equal probability.\n     * The function uses a seeded random generator.\n     * @method choose\n     * @param {array} choices\n     * @return {object} A random choice object from the array\n     */\n    Common.choose = function(choices) {\n        return choices[Math.floor(Common.random() * choices.length)];\n    };\n\n    /**\n     * Returns true if the object is a HTMLElement, otherwise false.\n     * @method isElement\n     * @param {object} obj\n     * @return {boolean} True if the object is a HTMLElement, otherwise false\n     */\n    Common.isElement = function(obj) {\n        if (typeof HTMLElement !== 'undefined') {\n            return obj instanceof HTMLElement;\n        }\n\n        return !!(obj && obj.nodeType && obj.nodeName);\n    };\n\n    /**\n     * Returns true if the object is an array.\n     * @method isArray\n     * @param {object} obj\n     * @return {boolean} True if the object is an array, otherwise false\n     */\n    Common.isArray = function(obj) {\n        return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n\n    /**\n     * Returns true if the object is a function.\n     * @method isFunction\n     * @param {object} obj\n     * @return {boolean} True if the object is a function, otherwise false\n     */\n    Common.isFunction = function(obj) {\n        return typeof obj === \"function\";\n    };\n\n    /**\n     * Returns true if the object is a plain object.\n     * @method isPlainObject\n     * @param {object} obj\n     * @return {boolean} True if the object is a plain object, otherwise false\n     */\n    Common.isPlainObject = function(obj) {\n        return typeof obj === 'object' && obj.constructor === Object;\n    };\n\n    /**\n     * Returns true if the object is a string.\n     * @method isString\n     * @param {object} obj\n     * @return {boolean} True if the object is a string, otherwise false\n     */\n    Common.isString = function(obj) {\n        return toString.call(obj) === '[object String]';\n    };\n    \n    /**\n     * Returns the given value clamped between a minimum and maximum value.\n     * @method clamp\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @return {number} The value clamped between min and max inclusive\n     */\n    Common.clamp = function(value, min, max) {\n        if (value < min)\n            return min;\n        if (value > max)\n            return max;\n        return value;\n    };\n    \n    /**\n     * Returns the sign of the given value.\n     * @method sign\n     * @param {number} value\n     * @return {number} -1 if negative, +1 if 0 or positive\n     */\n    Common.sign = function(value) {\n        return value < 0 ? -1 : 1;\n    };\n    \n    /**\n     * Returns the current timestamp since the time origin (e.g. from page load).\n     * The result is in milliseconds and will use high-resolution timing if available.\n     * @method now\n     * @return {number} the current timestamp in milliseconds\n     */\n    Common.now = function() {\n        if (typeof window !== 'undefined' && window.performance) {\n            if (window.performance.now) {\n                return window.performance.now();\n            } else if (window.performance.webkitNow) {\n                return window.performance.webkitNow();\n            }\n        }\n\n        if (Date.now) {\n            return Date.now();\n        }\n\n        return (new Date()) - Common._nowStartTime;\n    };\n    \n    /**\n     * Returns a random value between a minimum and a maximum value inclusive.\n     * The function uses a seeded random generator.\n     * @method random\n     * @param {number} min\n     * @param {number} max\n     * @return {number} A random number between min and max inclusive\n     */\n    Common.random = function(min, max) {\n        min = (typeof min !== \"undefined\") ? min : 0;\n        max = (typeof max !== \"undefined\") ? max : 1;\n        return min + _seededRandom() * (max - min);\n    };\n\n    var _seededRandom = function() {\n        // https://en.wikipedia.org/wiki/Linear_congruential_generator\n        Common._seed = (Common._seed * 9301 + 49297) % 233280;\n        return Common._seed / 233280;\n    };\n\n    /**\n     * Converts a CSS hex colour string into an integer.\n     * @method colorToNumber\n     * @param {string} colorString\n     * @return {number} An integer representing the CSS hex string\n     */\n    Common.colorToNumber = function(colorString) {\n        colorString = colorString.replace('#','');\n\n        if (colorString.length == 3) {\n            colorString = colorString.charAt(0) + colorString.charAt(0)\n                        + colorString.charAt(1) + colorString.charAt(1)\n                        + colorString.charAt(2) + colorString.charAt(2);\n        }\n\n        return parseInt(colorString, 16);\n    };\n\n    /**\n     * The console logging level to use, where each level includes all levels above and excludes the levels below.\n     * The default level is 'debug' which shows all console messages.  \n     *\n     * Possible level values are:\n     * - 0 = None\n     * - 1 = Debug\n     * - 2 = Info\n     * - 3 = Warn\n     * - 4 = Error\n     * @property Common.logLevel\n     * @type {Number}\n     * @default 1\n     */\n    Common.logLevel = 1;\n\n    /**\n     * Shows a `console.log` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method log\n     * @param ...objs {} The objects to log.\n     */\n    Common.log = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.log.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.info` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method info\n     * @param ...objs {} The objects to log.\n     */\n    Common.info = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 2) {\n            console.info.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.warn` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method warn\n     * @param ...objs {} The objects to log.\n     */\n    Common.warn = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.warn.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Uses `Common.warn` to log the given message one time only.\n     * @method warnOnce\n     * @param ...objs {} The objects to log.\n     */\n    Common.warnOnce = function() {\n        var message = Array.prototype.slice.call(arguments).join(' ');\n\n        if (!Common._warnedOnce[message]) {\n            Common.warn(message);\n            Common._warnedOnce[message] = true;\n        }\n    };\n\n    /**\n     * Shows a deprecated console warning when the function on the given object is called.\n     * The target function will be replaced with a new function that first shows the warning\n     * and then calls the original function.\n     * @method deprecated\n     * @param {object} obj The object or module\n     * @param {string} name The property name of the function on obj\n     * @param {string} warning The one-time message to show if the function is called\n     */\n    Common.deprecated = function(obj, prop, warning) {\n        obj[prop] = Common.chain(function() {\n            Common.warnOnce('🔅 deprecated 🔅', warning);\n        }, obj[prop]);\n    };\n\n    /**\n     * Returns the next unique sequential ID.\n     * @method nextId\n     * @return {Number} Unique sequential ID\n     */\n    Common.nextId = function() {\n        return Common._nextId++;\n    };\n\n    /**\n     * A cross browser compatible indexOf implementation.\n     * @method indexOf\n     * @param {array} haystack\n     * @param {object} needle\n     * @return {number} The position of needle in haystack, otherwise -1.\n     */\n    Common.indexOf = function(haystack, needle) {\n        if (haystack.indexOf)\n            return haystack.indexOf(needle);\n\n        for (var i = 0; i < haystack.length; i++) {\n            if (haystack[i] === needle)\n                return i;\n        }\n\n        return -1;\n    };\n\n    /**\n     * A cross browser compatible array map implementation.\n     * @method map\n     * @param {array} list\n     * @param {function} func\n     * @return {array} Values from list transformed by func.\n     */\n    Common.map = function(list, func) {\n        if (list.map) {\n            return list.map(func);\n        }\n\n        var mapped = [];\n\n        for (var i = 0; i < list.length; i += 1) {\n            mapped.push(func(list[i]));\n        }\n\n        return mapped;\n    };\n\n    /**\n     * Takes a directed graph and returns the partially ordered set of vertices in topological order.\n     * Circular dependencies are allowed.\n     * @method topologicalSort\n     * @param {object} graph\n     * @return {array} Partially ordered set of vertices in topological order.\n     */\n    Common.topologicalSort = function(graph) {\n        // https://github.com/mgechev/javascript-algorithms\n        // Copyright (c) Minko Gechev (MIT license)\n        // Modifications: tidy formatting and naming\n        var result = [],\n            visited = [],\n            temp = [];\n\n        for (var node in graph) {\n            if (!visited[node] && !temp[node]) {\n                Common._topologicalSort(node, visited, temp, graph, result);\n            }\n        }\n\n        return result;\n    };\n\n    Common._topologicalSort = function(node, visited, temp, graph, result) {\n        var neighbors = graph[node] || [];\n        temp[node] = true;\n\n        for (var i = 0; i < neighbors.length; i += 1) {\n            var neighbor = neighbors[i];\n\n            if (temp[neighbor]) {\n                // skip circular dependencies\n                continue;\n            }\n\n            if (!visited[neighbor]) {\n                Common._topologicalSort(neighbor, visited, temp, graph, result);\n            }\n        }\n\n        temp[node] = false;\n        visited[node] = true;\n\n        result.push(node);\n    };\n\n    /**\n     * Takes _n_ functions as arguments and returns a new function that calls them in order.\n     * The arguments applied when calling the new function will also be applied to every function passed.\n     * The value of `this` refers to the last value returned in the chain that was not `undefined`.\n     * Therefore if a passed function does not return a value, the previously returned value is maintained.\n     * After all passed functions have been called the new function returns the last returned value (if any).\n     * If any of the passed functions are a chain, then the chain will be flattened.\n     * @method chain\n     * @param ...funcs {function} The functions to chain.\n     * @return {function} A new function that calls the passed functions in order.\n     */\n    Common.chain = function() {\n        var funcs = [];\n\n        for (var i = 0; i < arguments.length; i += 1) {\n            var func = arguments[i];\n\n            if (func._chained) {\n                // flatten already chained functions\n                funcs.push.apply(funcs, func._chained);\n            } else {\n                funcs.push(func);\n            }\n        }\n\n        var chain = function() {\n            // https://github.com/GoogleChrome/devtools-docs/issues/53#issuecomment-51941358\n            var lastResult,\n                args = new Array(arguments.length);\n\n            for (var i = 0, l = arguments.length; i < l; i++) {\n                args[i] = arguments[i];\n            }\n\n            for (i = 0; i < funcs.length; i += 1) {\n                var result = funcs[i].apply(lastResult, args);\n\n                if (typeof result !== 'undefined') {\n                    lastResult = result;\n                }\n            }\n\n            return lastResult;\n        };\n\n        chain._chained = funcs;\n\n        return chain;\n    };\n\n    /**\n     * Chains a function to excute before the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathBefore\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain before the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathBefore = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            func,\n            Common.get(base, path)\n        ));\n    };\n\n    /**\n     * Chains a function to excute after the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathAfter\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain after the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathAfter = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            Common.get(base, path),\n            func\n        ));\n    };\n\n    /**\n     * Provide the [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module to enable\n     * concave vertex decomposition support when using `Bodies.fromVertices` e.g. `Common.setDecomp(require('poly-decomp'))`.\n     * @method setDecomp\n     * @param {} decomp The [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module.\n     */\n    Common.setDecomp = function(decomp) {\n        Common._decomp = decomp;\n    };\n\n    /**\n     * Returns the [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module provided through `Common.setDecomp`,\n     * otherwise returns the global `decomp` if set.\n     * @method getDecomp\n     * @return {} The [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module if provided.\n     */\n    Common.getDecomp = function() {\n        // get user provided decomp if set\n        var decomp = Common._decomp;\n\n        try {\n            // otherwise from window global\n            if (!decomp && typeof window !== 'undefined') {\n                decomp = window.decomp;\n            }\n    \n            // otherwise from node global\n            if (!decomp && typeof global !== 'undefined') {\n                decomp = global.decomp;\n            }\n        } catch (e) {\n            // decomp not available\n            decomp = null;\n        }\n\n        return decomp;\n    };\n})();\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Bounds` module contains methods for creating and manipulating axis-aligned bounding boxes (AABB).\n*\n* @class Bounds\n*/\n\nvar Bounds = {};\n\nmodule.exports = Bounds;\n\n(function() {\n\n    /**\n     * Creates a new axis-aligned bounding box (AABB) for the given vertices.\n     * @method create\n     * @param {vertices} vertices\n     * @return {bounds} A new bounds object\n     */\n    Bounds.create = function(vertices) {\n        var bounds = { \n            min: { x: 0, y: 0 }, \n            max: { x: 0, y: 0 }\n        };\n\n        if (vertices)\n            Bounds.update(bounds, vertices);\n        \n        return bounds;\n    };\n\n    /**\n     * Updates bounds using the given vertices and extends the bounds given a velocity.\n     * @method update\n     * @param {bounds} bounds\n     * @param {vertices} vertices\n     * @param {vector} velocity\n     */\n    Bounds.update = function(bounds, vertices, velocity) {\n        bounds.min.x = Infinity;\n        bounds.max.x = -Infinity;\n        bounds.min.y = Infinity;\n        bounds.max.y = -Infinity;\n\n        for (var i = 0; i < vertices.length; i++) {\n            var vertex = vertices[i];\n            if (vertex.x > bounds.max.x) bounds.max.x = vertex.x;\n            if (vertex.x < bounds.min.x) bounds.min.x = vertex.x;\n            if (vertex.y > bounds.max.y) bounds.max.y = vertex.y;\n            if (vertex.y < bounds.min.y) bounds.min.y = vertex.y;\n        }\n        \n        if (velocity) {\n            if (velocity.x > 0) {\n                bounds.max.x += velocity.x;\n            } else {\n                bounds.min.x += velocity.x;\n            }\n            \n            if (velocity.y > 0) {\n                bounds.max.y += velocity.y;\n            } else {\n                bounds.min.y += velocity.y;\n            }\n        }\n    };\n\n    /**\n     * Returns true if the bounds contains the given point.\n     * @method contains\n     * @param {bounds} bounds\n     * @param {vector} point\n     * @return {boolean} True if the bounds contain the point, otherwise false\n     */\n    Bounds.contains = function(bounds, point) {\n        return point.x >= bounds.min.x && point.x <= bounds.max.x \n               && point.y >= bounds.min.y && point.y <= bounds.max.y;\n    };\n\n    /**\n     * Returns true if the two bounds intersect.\n     * @method overlaps\n     * @param {bounds} boundsA\n     * @param {bounds} boundsB\n     * @return {boolean} True if the bounds overlap, otherwise false\n     */\n    Bounds.overlaps = function(boundsA, boundsB) {\n        return (boundsA.min.x <= boundsB.max.x && boundsA.max.x >= boundsB.min.x\n                && boundsA.max.y >= boundsB.min.y && boundsA.min.y <= boundsB.max.y);\n    };\n\n    /**\n     * Translates the bounds by the given vector.\n     * @method translate\n     * @param {bounds} bounds\n     * @param {vector} vector\n     */\n    Bounds.translate = function(bounds, vector) {\n        bounds.min.x += vector.x;\n        bounds.max.x += vector.x;\n        bounds.min.y += vector.y;\n        bounds.max.y += vector.y;\n    };\n\n    /**\n     * Shifts the bounds to the given position.\n     * @method shift\n     * @param {bounds} bounds\n     * @param {vector} position\n     */\n    Bounds.shift = function(bounds, position) {\n        var deltaX = bounds.max.x - bounds.min.x,\n            deltaY = bounds.max.y - bounds.min.y;\n            \n        bounds.min.x = position.x;\n        bounds.max.x = position.x + deltaX;\n        bounds.min.y = position.y;\n        bounds.max.y = position.y + deltaY;\n    };\n    \n})();\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Vector` module contains methods for creating and manipulating vectors.\n* Vectors are the basis of all the geometry related operations in the engine.\n* A `Matter.Vector` object is of the form `{ x: 0, y: 0 }`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vector\n*/\n\n// TODO: consider params for reusing vector objects\n\nvar Vector = {};\n\nmodule.exports = Vector;\n\n(function() {\n\n    /**\n     * Creates a new vector.\n     * @method create\n     * @param {number} x\n     * @param {number} y\n     * @return {vector} A new vector\n     */\n    Vector.create = function(x, y) {\n        return { x: x || 0, y: y || 0 };\n    };\n\n    /**\n     * Returns a new vector with `x` and `y` copied from the given `vector`.\n     * @method clone\n     * @param {vector} vector\n     * @return {vector} A new cloned vector\n     */\n    Vector.clone = function(vector) {\n        return { x: vector.x, y: vector.y };\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector.\n     * @method magnitude\n     * @param {vector} vector\n     * @return {number} The magnitude of the vector\n     */\n    Vector.magnitude = function(vector) {\n        return Math.sqrt((vector.x * vector.x) + (vector.y * vector.y));\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector (therefore saving a `sqrt` operation).\n     * @method magnitudeSquared\n     * @param {vector} vector\n     * @return {number} The squared magnitude of the vector\n     */\n    Vector.magnitudeSquared = function(vector) {\n        return (vector.x * vector.x) + (vector.y * vector.y);\n    };\n\n    /**\n     * Rotates the vector about (0, 0) by specified angle.\n     * @method rotate\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} [output]\n     * @return {vector} The vector rotated about (0, 0)\n     */\n    Vector.rotate = function(vector, angle, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = vector.x * cos - vector.y * sin;\n        output.y = vector.x * sin + vector.y * cos;\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Rotates the vector about a specified point by specified angle.\n     * @method rotateAbout\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} point\n     * @param {vector} [output]\n     * @return {vector} A new vector rotated about the point\n     */\n    Vector.rotateAbout = function(vector, angle, point, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = point.x + ((vector.x - point.x) * cos - (vector.y - point.y) * sin);\n        output.y = point.y + ((vector.x - point.x) * sin + (vector.y - point.y) * cos);\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Normalises a vector (such that its magnitude is `1`).\n     * @method normalise\n     * @param {vector} vector\n     * @return {vector} A new vector normalised\n     */\n    Vector.normalise = function(vector) {\n        var magnitude = Vector.magnitude(vector);\n        if (magnitude === 0)\n            return { x: 0, y: 0 };\n        return { x: vector.x / magnitude, y: vector.y / magnitude };\n    };\n\n    /**\n     * Returns the dot-product of two vectors.\n     * @method dot\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The dot product of the two vectors\n     */\n    Vector.dot = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.x) + (vectorA.y * vectorB.y);\n    };\n\n    /**\n     * Returns the cross-product of two vectors.\n     * @method cross\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The cross product of the two vectors\n     */\n    Vector.cross = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.y) - (vectorA.y * vectorB.x);\n    };\n\n    /**\n     * Returns the cross-product of three vectors.\n     * @method cross3\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} vectorC\n     * @return {number} The cross product of the three vectors\n     */\n    Vector.cross3 = function(vectorA, vectorB, vectorC) {\n        return (vectorB.x - vectorA.x) * (vectorC.y - vectorA.y) - (vectorB.y - vectorA.y) * (vectorC.x - vectorA.x);\n    };\n\n    /**\n     * Adds the two vectors.\n     * @method add\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB added\n     */\n    Vector.add = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x + vectorB.x;\n        output.y = vectorA.y + vectorB.y;\n        return output;\n    };\n\n    /**\n     * Subtracts the two vectors.\n     * @method sub\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB subtracted\n     */\n    Vector.sub = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x - vectorB.x;\n        output.y = vectorA.y - vectorB.y;\n        return output;\n    };\n\n    /**\n     * Multiplies a vector and a scalar.\n     * @method mult\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector multiplied by scalar\n     */\n    Vector.mult = function(vector, scalar) {\n        return { x: vector.x * scalar, y: vector.y * scalar };\n    };\n\n    /**\n     * Divides a vector and a scalar.\n     * @method div\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector divided by scalar\n     */\n    Vector.div = function(vector, scalar) {\n        return { x: vector.x / scalar, y: vector.y / scalar };\n    };\n\n    /**\n     * Returns the perpendicular vector. Set `negate` to true for the perpendicular in the opposite direction.\n     * @method perp\n     * @param {vector} vector\n     * @param {bool} [negate=false]\n     * @return {vector} The perpendicular vector\n     */\n    Vector.perp = function(vector, negate) {\n        negate = negate === true ? -1 : 1;\n        return { x: negate * -vector.y, y: negate * vector.x };\n    };\n\n    /**\n     * Negates both components of a vector such that it points in the opposite direction.\n     * @method neg\n     * @param {vector} vector\n     * @return {vector} The negated vector\n     */\n    Vector.neg = function(vector) {\n        return { x: -vector.x, y: -vector.y };\n    };\n\n    /**\n     * Returns the angle between the vector `vectorB - vectorA` and the x-axis in radians.\n     * @method angle\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The angle in radians\n     */\n    Vector.angle = function(vectorA, vectorB) {\n        return Math.atan2(vectorB.y - vectorA.y, vectorB.x - vectorA.x);\n    };\n\n    /**\n     * Temporary vector pool (not thread-safe).\n     * @property _temp\n     * @type {vector[]}\n     * @private\n     */\n    Vector._temp = [\n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create()\n    ];\n\n})();\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Vertices` module contains methods for creating and manipulating sets of vertices.\n* A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\n* A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vertices\n*/\n\nvar Vertices = {};\n\nmodule.exports = Vertices;\n\nvar Vector = __webpack_require__(2);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Creates a new set of `Matter.Body` compatible vertices.\n     * The `points` argument accepts an array of `Matter.Vector` points orientated around the origin `(0, 0)`, for example:\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * The `Vertices.create` method returns a new array of vertices, which are similar to Matter.Vector objects,\n     * but with some additional references required for efficient collision detection routines.\n     *\n     * Vertices must be specified in clockwise order.\n     *\n     * Note that the `body` argument is not optional, a `Matter.Body` reference must be provided.\n     *\n     * @method create\n     * @param {vector[]} points\n     * @param {body} body\n     */\n    Vertices.create = function(points, body) {\n        var vertices = [];\n\n        for (var i = 0; i < points.length; i++) {\n            var point = points[i],\n                vertex = {\n                    x: point.x,\n                    y: point.y,\n                    index: i,\n                    body: body,\n                    isInternal: false\n                };\n\n            vertices.push(vertex);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Parses a string containing ordered x y pairs separated by spaces (and optionally commas), \n     * into a `Matter.Vertices` object for the given `Matter.Body`.\n     * For parsing SVG paths, see `Svg.pathToVertices`.\n     * @method fromPath\n     * @param {string} path\n     * @param {body} body\n     * @return {vertices} vertices\n     */\n    Vertices.fromPath = function(path, body) {\n        var pathPattern = /L?\\s*([-\\d.e]+)[\\s,]*([-\\d.e]+)*/ig,\n            points = [];\n\n        path.replace(pathPattern, function(match, x, y) {\n            points.push({ x: parseFloat(x), y: parseFloat(y) });\n        });\n\n        return Vertices.create(points, body);\n    };\n\n    /**\n     * Returns the centre (centroid) of the set of vertices.\n     * @method centre\n     * @param {vertices} vertices\n     * @return {vector} The centre point\n     */\n    Vertices.centre = function(vertices) {\n        var area = Vertices.area(vertices, true),\n            centre = { x: 0, y: 0 },\n            cross,\n            temp,\n            j;\n\n        for (var i = 0; i < vertices.length; i++) {\n            j = (i + 1) % vertices.length;\n            cross = Vector.cross(vertices[i], vertices[j]);\n            temp = Vector.mult(Vector.add(vertices[i], vertices[j]), cross);\n            centre = Vector.add(centre, temp);\n        }\n\n        return Vector.div(centre, 6 * area);\n    };\n\n    /**\n     * Returns the average (mean) of the set of vertices.\n     * @method mean\n     * @param {vertices} vertices\n     * @return {vector} The average point\n     */\n    Vertices.mean = function(vertices) {\n        var average = { x: 0, y: 0 };\n\n        for (var i = 0; i < vertices.length; i++) {\n            average.x += vertices[i].x;\n            average.y += vertices[i].y;\n        }\n\n        return Vector.div(average, vertices.length);\n    };\n\n    /**\n     * Returns the area of the set of vertices.\n     * @method area\n     * @param {vertices} vertices\n     * @param {bool} signed\n     * @return {number} The area\n     */\n    Vertices.area = function(vertices, signed) {\n        var area = 0,\n            j = vertices.length - 1;\n\n        for (var i = 0; i < vertices.length; i++) {\n            area += (vertices[j].x - vertices[i].x) * (vertices[j].y + vertices[i].y);\n            j = i;\n        }\n\n        if (signed)\n            return area / 2;\n\n        return Math.abs(area) / 2;\n    };\n\n    /**\n     * Returns the moment of inertia (second moment of area) of the set of vertices given the total mass.\n     * @method inertia\n     * @param {vertices} vertices\n     * @param {number} mass\n     * @return {number} The polygon's moment of inertia\n     */\n    Vertices.inertia = function(vertices, mass) {\n        var numerator = 0,\n            denominator = 0,\n            v = vertices,\n            cross,\n            j;\n\n        // find the polygon's moment of inertia, using second moment of area\n        // from equations at http://www.physicsforums.com/showthread.php?t=25293\n        for (var n = 0; n < v.length; n++) {\n            j = (n + 1) % v.length;\n            cross = Math.abs(Vector.cross(v[j], v[n]));\n            numerator += cross * (Vector.dot(v[j], v[j]) + Vector.dot(v[j], v[n]) + Vector.dot(v[n], v[n]));\n            denominator += cross;\n        }\n\n        return (mass / 6) * (numerator / denominator);\n    };\n\n    /**\n     * Translates the set of vertices in-place.\n     * @method translate\n     * @param {vertices} vertices\n     * @param {vector} vector\n     * @param {number} scalar\n     */\n    Vertices.translate = function(vertices, vector, scalar) {\n        scalar = typeof scalar !== 'undefined' ? scalar : 1;\n\n        var verticesLength = vertices.length,\n            translateX = vector.x * scalar,\n            translateY = vector.y * scalar,\n            i;\n        \n        for (i = 0; i < verticesLength; i++) {\n            vertices[i].x += translateX;\n            vertices[i].y += translateY;\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Rotates the set of vertices in-place.\n     * @method rotate\n     * @param {vertices} vertices\n     * @param {number} angle\n     * @param {vector} point\n     */\n    Vertices.rotate = function(vertices, angle, point) {\n        if (angle === 0)\n            return;\n\n        var cos = Math.cos(angle),\n            sin = Math.sin(angle),\n            pointX = point.x,\n            pointY = point.y,\n            verticesLength = vertices.length,\n            vertex,\n            dx,\n            dy,\n            i;\n\n        for (i = 0; i < verticesLength; i++) {\n            vertex = vertices[i];\n            dx = vertex.x - pointX;\n            dy = vertex.y - pointY;\n            vertex.x = pointX + (dx * cos - dy * sin);\n            vertex.y = pointY + (dx * sin + dy * cos);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Returns `true` if the `point` is inside the set of `vertices`.\n     * @method contains\n     * @param {vertices} vertices\n     * @param {vector} point\n     * @return {boolean} True if the vertices contains point, otherwise false\n     */\n    Vertices.contains = function(vertices, point) {\n        var pointX = point.x,\n            pointY = point.y,\n            verticesLength = vertices.length,\n            vertex = vertices[verticesLength - 1],\n            nextVertex;\n\n        for (var i = 0; i < verticesLength; i++) {\n            nextVertex = vertices[i];\n\n            if ((pointX - vertex.x) * (nextVertex.y - vertex.y) \n                + (pointY - vertex.y) * (vertex.x - nextVertex.x) > 0) {\n                return false;\n            }\n\n            vertex = nextVertex;\n        }\n\n        return true;\n    };\n\n    /**\n     * Scales the vertices from a point (default is centre) in-place.\n     * @method scale\n     * @param {vertices} vertices\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     */\n    Vertices.scale = function(vertices, scaleX, scaleY, point) {\n        if (scaleX === 1 && scaleY === 1)\n            return vertices;\n\n        point = point || Vertices.centre(vertices);\n\n        var vertex,\n            delta;\n\n        for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            delta = Vector.sub(vertex, point);\n            vertices[i].x = point.x + delta.x * scaleX;\n            vertices[i].y = point.y + delta.y * scaleY;\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Chamfers a set of vertices by giving them rounded corners, returns a new set of vertices.\n     * The radius parameter is a single number or an array to specify the radius for each vertex.\n     * @method chamfer\n     * @param {vertices} vertices\n     * @param {number[]} radius\n     * @param {number} quality\n     * @param {number} qualityMin\n     * @param {number} qualityMax\n     */\n    Vertices.chamfer = function(vertices, radius, quality, qualityMin, qualityMax) {\n        if (typeof radius === 'number') {\n            radius = [radius];\n        } else {\n            radius = radius || [8];\n        }\n\n        // quality defaults to -1, which is auto\n        quality = (typeof quality !== 'undefined') ? quality : -1;\n        qualityMin = qualityMin || 2;\n        qualityMax = qualityMax || 14;\n\n        var newVertices = [];\n\n        for (var i = 0; i < vertices.length; i++) {\n            var prevVertex = vertices[i - 1 >= 0 ? i - 1 : vertices.length - 1],\n                vertex = vertices[i],\n                nextVertex = vertices[(i + 1) % vertices.length],\n                currentRadius = radius[i < radius.length ? i : radius.length - 1];\n\n            if (currentRadius === 0) {\n                newVertices.push(vertex);\n                continue;\n            }\n\n            var prevNormal = Vector.normalise({ \n                x: vertex.y - prevVertex.y, \n                y: prevVertex.x - vertex.x\n            });\n\n            var nextNormal = Vector.normalise({ \n                x: nextVertex.y - vertex.y, \n                y: vertex.x - nextVertex.x\n            });\n\n            var diagonalRadius = Math.sqrt(2 * Math.pow(currentRadius, 2)),\n                radiusVector = Vector.mult(Common.clone(prevNormal), currentRadius),\n                midNormal = Vector.normalise(Vector.mult(Vector.add(prevNormal, nextNormal), 0.5)),\n                scaledVertex = Vector.sub(vertex, Vector.mult(midNormal, diagonalRadius));\n\n            var precision = quality;\n\n            if (quality === -1) {\n                // automatically decide precision\n                precision = Math.pow(currentRadius, 0.32) * 1.75;\n            }\n\n            precision = Common.clamp(precision, qualityMin, qualityMax);\n\n            // use an even value for precision, more likely to reduce axes by using symmetry\n            if (precision % 2 === 1)\n                precision += 1;\n\n            var alpha = Math.acos(Vector.dot(prevNormal, nextNormal)),\n                theta = alpha / precision;\n\n            for (var j = 0; j < precision; j++) {\n                newVertices.push(Vector.add(Vector.rotate(radiusVector, theta * j), scaledVertex));\n            }\n        }\n\n        return newVertices;\n    };\n\n    /**\n     * Sorts the input vertices into clockwise order in place.\n     * @method clockwiseSort\n     * @param {vertices} vertices\n     * @return {vertices} vertices\n     */\n    Vertices.clockwiseSort = function(vertices) {\n        var centre = Vertices.mean(vertices);\n\n        vertices.sort(function(vertexA, vertexB) {\n            return Vector.angle(centre, vertexA) - Vector.angle(centre, vertexB);\n        });\n\n        return vertices;\n    };\n\n    /**\n     * Returns true if the vertices form a convex shape (vertices must be in clockwise order).\n     * @method isConvex\n     * @param {vertices} vertices\n     * @return {bool} `true` if the `vertices` are convex, `false` if not (or `null` if not computable).\n     */\n    Vertices.isConvex = function(vertices) {\n        // http://paulbourke.net/geometry/polygonmesh/\n        // Copyright (c) Paul Bourke (use permitted)\n\n        var flag = 0,\n            n = vertices.length,\n            i,\n            j,\n            k,\n            z;\n\n        if (n < 3)\n            return null;\n\n        for (i = 0; i < n; i++) {\n            j = (i + 1) % n;\n            k = (i + 2) % n;\n            z = (vertices[j].x - vertices[i].x) * (vertices[k].y - vertices[j].y);\n            z -= (vertices[j].y - vertices[i].y) * (vertices[k].x - vertices[j].x);\n\n            if (z < 0) {\n                flag |= 1;\n            } else if (z > 0) {\n                flag |= 2;\n            }\n\n            if (flag === 3) {\n                return false;\n            }\n        }\n\n        if (flag !== 0){\n            return true;\n        } else {\n            return null;\n        }\n    };\n\n    /**\n     * Returns the convex hull of the input vertices as a new array of points.\n     * @method hull\n     * @param {vertices} vertices\n     * @return [vertex] vertices\n     */\n    Vertices.hull = function(vertices) {\n        // http://geomalgorithms.com/a10-_hull-1.html\n\n        var upper = [],\n            lower = [], \n            vertex,\n            i;\n\n        // sort vertices on x-axis (y-axis for ties)\n        vertices = vertices.slice(0);\n        vertices.sort(function(vertexA, vertexB) {\n            var dx = vertexA.x - vertexB.x;\n            return dx !== 0 ? dx : vertexA.y - vertexB.y;\n        });\n\n        // build lower hull\n        for (i = 0; i < vertices.length; i += 1) {\n            vertex = vertices[i];\n\n            while (lower.length >= 2 \n                   && Vector.cross3(lower[lower.length - 2], lower[lower.length - 1], vertex) <= 0) {\n                lower.pop();\n            }\n\n            lower.push(vertex);\n        }\n\n        // build upper hull\n        for (i = vertices.length - 1; i >= 0; i -= 1) {\n            vertex = vertices[i];\n\n            while (upper.length >= 2 \n                   && Vector.cross3(upper[upper.length - 2], upper[upper.length - 1], vertex) <= 0) {\n                upper.pop();\n            }\n\n            upper.push(vertex);\n        }\n\n        // concatenation of the lower and upper hulls gives the convex hull\n        // omit last points because they are repeated at the beginning of the other list\n        upper.pop();\n        lower.pop();\n\n        return upper.concat(lower);\n    };\n\n})();\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Events` module contains methods to fire and listen to events on other objects.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Events\n*/\n\nvar Events = {};\n\nmodule.exports = Events;\n\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Subscribes a callback function to the given object's `eventName`.\n     * @method on\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.on = function(object, eventNames, callback) {\n        var names = eventNames.split(' '),\n            name;\n\n        for (var i = 0; i < names.length; i++) {\n            name = names[i];\n            object.events = object.events || {};\n            object.events[name] = object.events[name] || [];\n            object.events[name].push(callback);\n        }\n\n        return callback;\n    };\n\n    /**\n     * Removes the given event callback. If no callback, clears all callbacks in `eventNames`. If no `eventNames`, clears all events.\n     * @method off\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.off = function(object, eventNames, callback) {\n        if (!eventNames) {\n            object.events = {};\n            return;\n        }\n\n        // handle Events.off(object, callback)\n        if (typeof eventNames === 'function') {\n            callback = eventNames;\n            eventNames = Common.keys(object.events).join(' ');\n        }\n\n        var names = eventNames.split(' ');\n\n        for (var i = 0; i < names.length; i++) {\n            var callbacks = object.events[names[i]],\n                newCallbacks = [];\n\n            if (callback && callbacks) {\n                for (var j = 0; j < callbacks.length; j++) {\n                    if (callbacks[j] !== callback)\n                        newCallbacks.push(callbacks[j]);\n                }\n            }\n\n            object.events[names[i]] = newCallbacks;\n        }\n    };\n\n    /**\n     * Fires all the callbacks subscribed to the given object's `eventName`, in the order they subscribed, if any.\n     * @method trigger\n     * @param {} object\n     * @param {string} eventNames\n     * @param {} event\n     */\n    Events.trigger = function(object, eventNames, event) {\n        var names,\n            name,\n            callbacks,\n            eventClone;\n\n        var events = object.events;\n        \n        if (events && Common.keys(events).length > 0) {\n            if (!event)\n                event = {};\n\n            names = eventNames.split(' ');\n\n            for (var i = 0; i < names.length; i++) {\n                name = names[i];\n                callbacks = events[name];\n\n                if (callbacks) {\n                    eventClone = Common.clone(event, false);\n                    eventClone.name = name;\n                    eventClone.source = object;\n\n                    for (var j = 0; j < callbacks.length; j++) {\n                        callbacks[j].apply(object, [eventClone]);\n                    }\n                }\n            }\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* A composite is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite` objects.\n*\n* They are a container that can represent complex objects made of multiple parts, even if they are not physically connected.\n* A composite could contain anything from a single body all the way up to a whole world.\n* \n* When making any changes to composites, use the included functions rather than changing their properties directly.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composite\n*/\n\nvar Composite = {};\n\nmodule.exports = Composite;\n\nvar Events = __webpack_require__(4);\nvar Common = __webpack_require__(0);\nvar Bounds = __webpack_require__(1);\nvar Body = __webpack_require__(6);\n\n(function() {\n\n    /**\n     * Creates a new composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properites section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} [options]\n     * @return {composite} A new composite\n     */\n    Composite.create = function(options) {\n        return Common.extend({ \n            id: Common.nextId(),\n            type: 'composite',\n            parent: null,\n            isModified: false,\n            bodies: [], \n            constraints: [], \n            composites: [],\n            label: 'Composite',\n            plugin: {},\n            cache: {\n                allBodies: null,\n                allConstraints: null,\n                allComposites: null\n            }\n        }, options);\n    };\n\n    /**\n     * Sets the composite's `isModified` flag. \n     * If `updateParents` is true, all parents will be set (default: false).\n     * If `updateChildren` is true, all children will be set (default: false).\n     * @private\n     * @method setModified\n     * @param {composite} composite\n     * @param {boolean} isModified\n     * @param {boolean} [updateParents=false]\n     * @param {boolean} [updateChildren=false]\n     */\n    Composite.setModified = function(composite, isModified, updateParents, updateChildren) {\n        composite.isModified = isModified;\n\n        if (isModified && composite.cache) {\n            composite.cache.allBodies = null;\n            composite.cache.allConstraints = null;\n            composite.cache.allComposites = null;\n        }\n\n        if (updateParents && composite.parent) {\n            Composite.setModified(composite.parent, isModified, updateParents, updateChildren);\n        }\n\n        if (updateChildren) {\n            for (var i = 0; i < composite.composites.length; i++) {\n                var childComposite = composite.composites[i];\n                Composite.setModified(childComposite, isModified, updateParents, updateChildren);\n            }\n        }\n    };\n\n    /**\n     * Generic single or multi-add function. Adds a single or an array of body(s), constraint(s) or composite(s) to the given composite.\n     * Triggers `beforeAdd` and `afterAdd` events on the `composite`.\n     * @method add\n     * @param {composite} composite\n     * @param {object|array} object A single or an array of body(s), constraint(s) or composite(s)\n     * @return {composite} The original composite with the objects added\n     */\n    Composite.add = function(composite, object) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeAdd', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                // skip adding compound parts\n                if (obj.parent !== obj) {\n                    Common.warn('Composite.add: skipped adding a compound body part (you must add its parent instead)');\n                    break;\n                }\n\n                Composite.addBody(composite, obj);\n                break;\n            case 'constraint':\n                Composite.addConstraint(composite, obj);\n                break;\n            case 'composite':\n                Composite.addComposite(composite, obj);\n                break;\n            case 'mouseConstraint':\n                Composite.addConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterAdd', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Generic remove function. Removes one or many body(s), constraint(s) or a composite(s) to the given composite.\n     * Optionally searching its children recursively.\n     * Triggers `beforeRemove` and `afterRemove` events on the `composite`.\n     * @method remove\n     * @param {composite} composite\n     * @param {object|array} object\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the objects removed\n     */\n    Composite.remove = function(composite, object, deep) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeRemove', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                Composite.removeBody(composite, obj, deep);\n                break;\n            case 'constraint':\n                Composite.removeConstraint(composite, obj, deep);\n                break;\n            case 'composite':\n                Composite.removeComposite(composite, obj, deep);\n                break;\n            case 'mouseConstraint':\n                Composite.removeConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterRemove', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Adds a composite to the given composite.\n     * @private\n     * @method addComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @return {composite} The original compositeA with the objects from compositeB added\n     */\n    Composite.addComposite = function(compositeA, compositeB) {\n        compositeA.composites.push(compositeB);\n        compositeB.parent = compositeA;\n        Composite.setModified(compositeA, true, true, false);\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @param {boolean} [deep=false]\n     * @return {composite} The original compositeA with the composite removed\n     */\n    Composite.removeComposite = function(compositeA, compositeB, deep) {\n        var position = Common.indexOf(compositeA.composites, compositeB);\n        if (position !== -1) {\n            Composite.removeCompositeAt(compositeA, position);\n        }\n\n        if (deep) {\n            for (var i = 0; i < compositeA.composites.length; i++){\n                Composite.removeComposite(compositeA.composites[i], compositeB, true);\n            }\n        }\n\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite.\n     * @private\n     * @method removeCompositeAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the composite removed\n     */\n    Composite.removeCompositeAt = function(composite, position) {\n        composite.composites.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a body to the given composite.\n     * @private\n     * @method addBody\n     * @param {composite} composite\n     * @param {body} body\n     * @return {composite} The original composite with the body added\n     */\n    Composite.addBody = function(composite, body) {\n        composite.bodies.push(body);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeBody\n     * @param {composite} composite\n     * @param {body} body\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBody = function(composite, body, deep) {\n        var position = Common.indexOf(composite.bodies, body);\n        if (position !== -1) {\n            Composite.removeBodyAt(composite, position);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeBody(composite.composites[i], body, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeBodyAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBodyAt = function(composite, position) {\n        composite.bodies.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a constraint to the given composite.\n     * @private\n     * @method addConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @return {composite} The original composite with the constraint added\n     */\n    Composite.addConstraint = function(composite, constraint) {\n        composite.constraints.push(constraint);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a constraint from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraint = function(composite, constraint, deep) {\n        var position = Common.indexOf(composite.constraints, constraint);\n        if (position !== -1) {\n            Composite.removeConstraintAt(composite, position);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeConstraint(composite.composites[i], constraint, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeConstraintAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraintAt = function(composite, position) {\n        composite.constraints.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes all bodies, constraints and composites from the given composite.\n     * Optionally clearing its children recursively.\n     * @method clear\n     * @param {composite} composite\n     * @param {boolean} keepStatic\n     * @param {boolean} [deep=false]\n     */\n    Composite.clear = function(composite, keepStatic, deep) {\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.clear(composite.composites[i], keepStatic, true);\n            }\n        }\n        \n        if (keepStatic) {\n            composite.bodies = composite.bodies.filter(function(body) { return body.isStatic; });\n        } else {\n            composite.bodies.length = 0;\n        }\n\n        composite.constraints.length = 0;\n        composite.composites.length = 0;\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Returns all bodies in the given composite, including all bodies in its children, recursively.\n     * @method allBodies\n     * @param {composite} composite\n     * @return {body[]} All the bodies\n     */\n    Composite.allBodies = function(composite) {\n        if (composite.cache && composite.cache.allBodies) {\n            return composite.cache.allBodies;\n        }\n\n        var bodies = [].concat(composite.bodies);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            bodies = bodies.concat(Composite.allBodies(composite.composites[i]));\n\n        if (composite.cache) {\n            composite.cache.allBodies = bodies;\n        }\n\n        return bodies;\n    };\n\n    /**\n     * Returns all constraints in the given composite, including all constraints in its children, recursively.\n     * @method allConstraints\n     * @param {composite} composite\n     * @return {constraint[]} All the constraints\n     */\n    Composite.allConstraints = function(composite) {\n        if (composite.cache && composite.cache.allConstraints) {\n            return composite.cache.allConstraints;\n        }\n\n        var constraints = [].concat(composite.constraints);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            constraints = constraints.concat(Composite.allConstraints(composite.composites[i]));\n\n        if (composite.cache) {\n            composite.cache.allConstraints = constraints;\n        }\n\n        return constraints;\n    };\n\n    /**\n     * Returns all composites in the given composite, including all composites in its children, recursively.\n     * @method allComposites\n     * @param {composite} composite\n     * @return {composite[]} All the composites\n     */\n    Composite.allComposites = function(composite) {\n        if (composite.cache && composite.cache.allComposites) {\n            return composite.cache.allComposites;\n        }\n\n        var composites = [].concat(composite.composites);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            composites = composites.concat(Composite.allComposites(composite.composites[i]));\n\n        if (composite.cache) {\n            composite.cache.allComposites = composites;\n        }\n\n        return composites;\n    };\n\n    /**\n     * Searches the composite recursively for an object matching the type and id supplied, null if not found.\n     * @method get\n     * @param {composite} composite\n     * @param {number} id\n     * @param {string} type\n     * @return {object} The requested object, if found\n     */\n    Composite.get = function(composite, id, type) {\n        var objects,\n            object;\n\n        switch (type) {\n        case 'body':\n            objects = Composite.allBodies(composite);\n            break;\n        case 'constraint':\n            objects = Composite.allConstraints(composite);\n            break;\n        case 'composite':\n            objects = Composite.allComposites(composite).concat(composite);\n            break;\n        }\n\n        if (!objects)\n            return null;\n\n        object = objects.filter(function(object) { \n            return object.id.toString() === id.toString(); \n        });\n\n        return object.length === 0 ? null : object[0];\n    };\n\n    /**\n     * Moves the given object(s) from compositeA to compositeB (equal to a remove followed by an add).\n     * @method move\n     * @param {compositeA} compositeA\n     * @param {object[]} objects\n     * @param {compositeB} compositeB\n     * @return {composite} Returns compositeA\n     */\n    Composite.move = function(compositeA, objects, compositeB) {\n        Composite.remove(compositeA, objects);\n        Composite.add(compositeB, objects);\n        return compositeA;\n    };\n\n    /**\n     * Assigns new ids for all objects in the composite, recursively.\n     * @method rebase\n     * @param {composite} composite\n     * @return {composite} Returns composite\n     */\n    Composite.rebase = function(composite) {\n        var objects = Composite.allBodies(composite)\n            .concat(Composite.allConstraints(composite))\n            .concat(Composite.allComposites(composite));\n\n        for (var i = 0; i < objects.length; i++) {\n            objects[i].id = Common.nextId();\n        }\n\n        return composite;\n    };\n\n    /**\n     * Translates all children in the composite by a given vector relative to their current positions, \n     * without imparting any velocity.\n     * @method translate\n     * @param {composite} composite\n     * @param {vector} translation\n     * @param {bool} [recursive=true]\n     */\n    Composite.translate = function(composite, translation, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            Body.translate(bodies[i], translation);\n        }\n\n        return composite;\n    };\n\n    /**\n     * Rotates all children in the composite by a given angle about the given point, without imparting any angular velocity.\n     * @method rotate\n     * @param {composite} composite\n     * @param {number} rotation\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.rotate = function(composite, rotation, point, recursive) {\n        var cos = Math.cos(rotation),\n            sin = Math.sin(rotation),\n            bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.rotate(body, rotation);\n        }\n\n        return composite;\n    };\n\n    /**\n     * Scales all children in the composite, including updating physical properties (mass, area, axes, inertia), from a world-space point.\n     * @method scale\n     * @param {composite} composite\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.scale = function(composite, scaleX, scaleY, point, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + dx * scaleX,\n                y: point.y + dy * scaleY\n            });\n\n            Body.scale(body, scaleX, scaleY);\n        }\n\n        return composite;\n    };\n\n    /**\n     * Returns the union of the bounds of all of the composite's bodies.\n     * @method bounds\n     * @param {composite} composite The composite.\n     * @returns {bounds} The composite bounds.\n     */\n    Composite.bounds = function(composite) {\n        var bodies = Composite.allBodies(composite),\n            vertices = [];\n\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i];\n            vertices.push(body.bounds.min, body.bounds.max);\n        }\n\n        return Bounds.create(vertices);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, before objects have been added.\n    *\n    * @event beforeAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, after objects have been added.\n    *\n    * @event afterAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, before objects have been removed.\n    *\n    * @event beforeRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, after objects have been removed.\n    *\n    * @event afterRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"composite\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage composites.\n     *\n     * @property label\n     * @type string\n     * @default \"Composite\"\n     */\n\n    /**\n     * A flag that specifies whether the composite has been modified during the current step.\n     * This is automatically managed when bodies, constraints or composites are added or removed.\n     *\n     * @property isModified\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * The `Composite` that is the parent of this composite. It is automatically managed by the `Matter.Composite` methods.\n     *\n     * @property parent\n     * @type composite\n     * @default null\n     */\n\n    /**\n     * An array of `Body` that are _direct_ children of this composite.\n     * To add or remove bodies you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allBodies` method.\n     *\n     * @property bodies\n     * @type body[]\n     * @default []\n     */\n\n    /**\n     * An array of `Constraint` that are _direct_ children of this composite.\n     * To add or remove constraints you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allConstraints` method.\n     *\n     * @property constraints\n     * @type constraint[]\n     * @default []\n     */\n\n    /**\n     * An array of `Composite` that are _direct_ children of this composite.\n     * To add or remove composites you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allComposites` method.\n     *\n     * @property composites\n     * @type composite[]\n     * @default []\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * An object used for storing cached results for performance reasons.\n     * This is used internally only and is automatically managed.\n     *\n     * @private\n     * @property cache\n     * @type {}\n     */\n\n})();\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Body` module contains methods for creating and manipulating body models.\n* A `Matter.Body` is a rigid body that can be simulated by a `Matter.Engine`.\n* Factories for commonly used body configurations (such as rectangles, circles and other polygons) can be found in the module `Matter.Bodies`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n\n* @class Body\n*/\n\nvar Body = {};\n\nmodule.exports = Body;\n\nvar Vertices = __webpack_require__(3);\nvar Vector = __webpack_require__(2);\nvar Sleeping = __webpack_require__(7);\nvar Render = __webpack_require__(16);\nvar Common = __webpack_require__(0);\nvar Bounds = __webpack_require__(1);\nvar Axes = __webpack_require__(11);\n\n(function() {\n\n    Body._inertiaScale = 4;\n    Body._nextCollidingGroupId = 1;\n    Body._nextNonCollidingGroupId = -1;\n    Body._nextCategory = 0x0001;\n\n    /**\n     * Creates a new rigid body model. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * Vertices must be specified in clockwise order.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {body} body\n     */\n    Body.create = function(options) {\n        var defaults = {\n            id: Common.nextId(),\n            type: 'body',\n            label: 'Body',\n            parts: [],\n            plugin: {},\n            angle: 0,\n            vertices: Vertices.fromPath('L 0 0 L 40 0 L 40 40 L 0 40'),\n            position: { x: 0, y: 0 },\n            force: { x: 0, y: 0 },\n            torque: 0,\n            positionImpulse: { x: 0, y: 0 },\n            constraintImpulse: { x: 0, y: 0, angle: 0 },\n            totalContacts: 0,\n            speed: 0,\n            angularSpeed: 0,\n            velocity: { x: 0, y: 0 },\n            angularVelocity: 0,\n            isSensor: false,\n            isStatic: false,\n            isSleeping: false,\n            motion: 0,\n            sleepThreshold: 60,\n            density: 0.001,\n            restitution: 0,\n            friction: 0.1,\n            frictionStatic: 0.5,\n            frictionAir: 0.01,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            },\n            slop: 0.05,\n            timeScale: 1,\n            render: {\n                visible: true,\n                opacity: 1,\n                strokeStyle: null,\n                fillStyle: null,\n                lineWidth: null,\n                sprite: {\n                    xScale: 1,\n                    yScale: 1,\n                    xOffset: 0,\n                    yOffset: 0\n                }\n            },\n            events: null,\n            bounds: null,\n            chamfer: null,\n            circleRadius: 0,\n            positionPrev: null,\n            anglePrev: 0,\n            parent: null,\n            axes: null,\n            area: 0,\n            mass: 0,\n            inertia: 0,\n            _original: null\n        };\n\n        var body = Common.extend(defaults, options);\n\n        _initProperties(body, options);\n\n        return body;\n    };\n\n    /**\n     * Returns the next unique group index for which bodies will collide.\n     * If `isNonColliding` is `true`, returns the next unique group index for which bodies will _not_ collide.\n     * See `body.collisionFilter` for more information.\n     * @method nextGroup\n     * @param {bool} [isNonColliding=false]\n     * @return {Number} Unique group index\n     */\n    Body.nextGroup = function(isNonColliding) {\n        if (isNonColliding)\n            return Body._nextNonCollidingGroupId--;\n\n        return Body._nextCollidingGroupId++;\n    };\n\n    /**\n     * Returns the next unique category bitfield (starting after the initial default category `0x0001`).\n     * There are 32 available. See `body.collisionFilter` for more information.\n     * @method nextCategory\n     * @return {Number} Unique category bitfield\n     */\n    Body.nextCategory = function() {\n        Body._nextCategory = Body._nextCategory << 1;\n        return Body._nextCategory;\n    };\n\n    /**\n     * Initialises body properties.\n     * @method _initProperties\n     * @private\n     * @param {body} body\n     * @param {} [options]\n     */\n    var _initProperties = function(body, options) {\n        options = options || {};\n\n        // init required properties (order is important)\n        Body.set(body, {\n            bounds: body.bounds || Bounds.create(body.vertices),\n            positionPrev: body.positionPrev || Vector.clone(body.position),\n            anglePrev: body.anglePrev || body.angle,\n            vertices: body.vertices,\n            parts: body.parts || [body],\n            isStatic: body.isStatic,\n            isSleeping: body.isSleeping,\n            parent: body.parent || body\n        });\n\n        Vertices.rotate(body.vertices, body.angle, body.position);\n        Axes.rotate(body.axes, body.angle);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n\n        // allow options to override the automatically calculated properties\n        Body.set(body, {\n            axes: options.axes || body.axes,\n            area: options.area || body.area,\n            mass: options.mass || body.mass,\n            inertia: options.inertia || body.inertia\n        });\n\n        // render properties\n        var defaultFillStyle = (body.isStatic ? '#14151f' : Common.choose(['#f19648', '#f5d259', '#f55a3c', '#063e7b', '#ececd1'])),\n            defaultStrokeStyle = body.isStatic ? '#555' : '#ccc',\n            defaultLineWidth = body.isStatic && body.render.fillStyle === null ? 1 : 0;\n        body.render.fillStyle = body.render.fillStyle || defaultFillStyle;\n        body.render.strokeStyle = body.render.strokeStyle || defaultStrokeStyle;\n        body.render.lineWidth = body.render.lineWidth || defaultLineWidth;\n        body.render.sprite.xOffset += -(body.bounds.min.x - body.position.x) / (body.bounds.max.x - body.bounds.min.x);\n        body.render.sprite.yOffset += -(body.bounds.min.y - body.position.y) / (body.bounds.max.y - body.bounds.min.y);\n    };\n\n    /**\n     * Given a property and a value (or map of), sets the property(s) on the body, using the appropriate setter functions if they exist.\n     * Prefer to use the actual setter functions in performance critical situations.\n     * @method set\n     * @param {body} body\n     * @param {} settings A property name (or map of properties and values) to set on the body.\n     * @param {} value The value to set if `settings` is a single property name.\n     */\n    Body.set = function(body, settings, value) {\n        var property;\n\n        if (typeof settings === 'string') {\n            property = settings;\n            settings = {};\n            settings[property] = value;\n        }\n\n        for (property in settings) {\n            if (!Object.prototype.hasOwnProperty.call(settings, property))\n                continue;\n\n            value = settings[property];\n            switch (property) {\n\n            case 'isStatic':\n                Body.setStatic(body, value);\n                break;\n            case 'isSleeping':\n                Sleeping.set(body, value);\n                break;\n            case 'mass':\n                Body.setMass(body, value);\n                break;\n            case 'density':\n                Body.setDensity(body, value);\n                break;\n            case 'inertia':\n                Body.setInertia(body, value);\n                break;\n            case 'vertices':\n                Body.setVertices(body, value);\n                break;\n            case 'position':\n                Body.setPosition(body, value);\n                break;\n            case 'angle':\n                Body.setAngle(body, value);\n                break;\n            case 'velocity':\n                Body.setVelocity(body, value);\n                break;\n            case 'angularVelocity':\n                Body.setAngularVelocity(body, value);\n                break;\n            case 'parts':\n                Body.setParts(body, value);\n                break;\n            case 'centre':\n                Body.setCentre(body, value);\n                break;\n            default:\n                body[property] = value;\n\n            }\n        }\n    };\n\n    /**\n     * Sets the body as static, including isStatic flag and setting mass and inertia to Infinity.\n     * @method setStatic\n     * @param {body} body\n     * @param {bool} isStatic\n     */\n    Body.setStatic = function(body, isStatic) {\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.isStatic = isStatic;\n\n            if (isStatic) {\n                part._original = {\n                    restitution: part.restitution,\n                    friction: part.friction,\n                    mass: part.mass,\n                    inertia: part.inertia,\n                    density: part.density,\n                    inverseMass: part.inverseMass,\n                    inverseInertia: part.inverseInertia\n                };\n\n                part.restitution = 0;\n                part.friction = 1;\n                part.mass = part.inertia = part.density = Infinity;\n                part.inverseMass = part.inverseInertia = 0;\n\n                part.positionPrev.x = part.position.x;\n                part.positionPrev.y = part.position.y;\n                part.anglePrev = part.angle;\n                part.angularVelocity = 0;\n                part.speed = 0;\n                part.angularSpeed = 0;\n                part.motion = 0;\n            } else if (part._original) {\n                part.restitution = part._original.restitution;\n                part.friction = part._original.friction;\n                part.mass = part._original.mass;\n                part.inertia = part._original.inertia;\n                part.density = part._original.density;\n                part.inverseMass = part._original.inverseMass;\n                part.inverseInertia = part._original.inverseInertia;\n\n                part._original = null;\n            }\n        }\n    };\n\n    /**\n     * Sets the mass of the body. Inverse mass, density and inertia are automatically updated to reflect the change.\n     * @method setMass\n     * @param {body} body\n     * @param {number} mass\n     */\n    Body.setMass = function(body, mass) {\n        var moment = body.inertia / (body.mass / 6);\n        body.inertia = moment * (mass / 6);\n        body.inverseInertia = 1 / body.inertia;\n\n        body.mass = mass;\n        body.inverseMass = 1 / body.mass;\n        body.density = body.mass / body.area;\n    };\n\n    /**\n     * Sets the density of the body. Mass and inertia are automatically updated to reflect the change.\n     * @method setDensity\n     * @param {body} body\n     * @param {number} density\n     */\n    Body.setDensity = function(body, density) {\n        Body.setMass(body, density * body.area);\n        body.density = density;\n    };\n\n    /**\n     * Sets the moment of inertia (i.e. second moment of area) of the body. \n     * Inverse inertia is automatically updated to reflect the change. Mass is not changed.\n     * @method setInertia\n     * @param {body} body\n     * @param {number} inertia\n     */\n    Body.setInertia = function(body, inertia) {\n        body.inertia = inertia;\n        body.inverseInertia = 1 / body.inertia;\n    };\n\n    /**\n     * Sets the body's vertices and updates body properties accordingly, including inertia, area and mass (with respect to `body.density`).\n     * Vertices will be automatically transformed to be orientated around their centre of mass as the origin.\n     * They are then automatically translated to world space based on `body.position`.\n     *\n     * The `vertices` argument should be passed as an array of `Matter.Vector` points (or a `Matter.Vertices` array).\n     * Vertices must form a convex hull, concave hulls are not supported.\n     *\n     * @method setVertices\n     * @param {body} body\n     * @param {vector[]} vertices\n     */\n    Body.setVertices = function(body, vertices) {\n        // change vertices\n        if (vertices[0].body === body) {\n            body.vertices = vertices;\n        } else {\n            body.vertices = Vertices.create(vertices, body);\n        }\n\n        // update properties\n        body.axes = Axes.fromVertices(body.vertices);\n        body.area = Vertices.area(body.vertices);\n        Body.setMass(body, body.density * body.area);\n\n        // orient vertices around the centre of mass at origin (0, 0)\n        var centre = Vertices.centre(body.vertices);\n        Vertices.translate(body.vertices, centre, -1);\n\n        // update inertia while vertices are at origin (0, 0)\n        Body.setInertia(body, Body._inertiaScale * Vertices.inertia(body.vertices, body.mass));\n\n        // update geometry\n        Vertices.translate(body.vertices, body.position);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n    };\n\n    /**\n     * Sets the parts of the `body` and updates mass, inertia and centroid.\n     * Each part will have its parent set to `body`.\n     * By default the convex hull will be automatically computed and set on `body`, unless `autoHull` is set to `false.`\n     * Note that this method will ensure that the first part in `body.parts` will always be the `body`.\n     * @method setParts\n     * @param {body} body\n     * @param [body] parts\n     * @param {bool} [autoHull=true]\n     */\n    Body.setParts = function(body, parts, autoHull) {\n        var i;\n\n        // add all the parts, ensuring that the first part is always the parent body\n        parts = parts.slice(0);\n        body.parts.length = 0;\n        body.parts.push(body);\n        body.parent = body;\n\n        for (i = 0; i < parts.length; i++) {\n            var part = parts[i];\n            if (part !== body) {\n                part.parent = body;\n                body.parts.push(part);\n            }\n        }\n\n        if (body.parts.length === 1)\n            return;\n\n        autoHull = typeof autoHull !== 'undefined' ? autoHull : true;\n\n        // find the convex hull of all parts to set on the parent body\n        if (autoHull) {\n            var vertices = [];\n            for (i = 0; i < parts.length; i++) {\n                vertices = vertices.concat(parts[i].vertices);\n            }\n\n            Vertices.clockwiseSort(vertices);\n\n            var hull = Vertices.hull(vertices),\n                hullCentre = Vertices.centre(hull);\n\n            Body.setVertices(body, hull);\n            Vertices.translate(body.vertices, hullCentre);\n        }\n\n        // sum the properties of all compound parts of the parent body\n        var total = Body._totalProperties(body);\n\n        body.area = total.area;\n        body.parent = body;\n        body.position.x = total.centre.x;\n        body.position.y = total.centre.y;\n        body.positionPrev.x = total.centre.x;\n        body.positionPrev.y = total.centre.y;\n\n        Body.setMass(body, total.mass);\n        Body.setInertia(body, total.inertia);\n        Body.setPosition(body, total.centre);\n    };\n\n    /**\n     * Set the centre of mass of the body. \n     * The `centre` is a vector in world-space unless `relative` is set, in which case it is a translation.\n     * The centre of mass is the point the body rotates about and can be used to simulate non-uniform density.\n     * This is equal to moving `body.position` but not the `body.vertices`.\n     * Invalid if the `centre` falls outside the body's convex hull.\n     * @method setCentre\n     * @param {body} body\n     * @param {vector} centre\n     * @param {bool} relative\n     */\n    Body.setCentre = function(body, centre, relative) {\n        if (!relative) {\n            body.positionPrev.x = centre.x - (body.position.x - body.positionPrev.x);\n            body.positionPrev.y = centre.y - (body.position.y - body.positionPrev.y);\n            body.position.x = centre.x;\n            body.position.y = centre.y;\n        } else {\n            body.positionPrev.x += centre.x;\n            body.positionPrev.y += centre.y;\n            body.position.x += centre.x;\n            body.position.y += centre.y;\n        }\n    };\n\n    /**\n     * Sets the position of the body instantly. Velocity, angle, force etc. are unchanged.\n     * @method setPosition\n     * @param {body} body\n     * @param {vector} position\n     */\n    Body.setPosition = function(body, position) {\n        var delta = Vector.sub(position, body.position);\n        body.positionPrev.x += delta.x;\n        body.positionPrev.y += delta.y;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.position.x += delta.x;\n            part.position.y += delta.y;\n            Vertices.translate(part.vertices, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Sets the angle of the body instantly. Angular velocity, position, force etc. are unchanged.\n     * @method setAngle\n     * @param {body} body\n     * @param {number} angle\n     */\n    Body.setAngle = function(body, angle) {\n        var delta = angle - body.angle;\n        body.anglePrev += delta;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.angle += delta;\n            Vertices.rotate(part.vertices, delta, body.position);\n            Axes.rotate(part.axes, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n            if (i > 0) {\n                Vector.rotateAbout(part.position, delta, body.position, part.position);\n            }\n        }\n    };\n\n    /**\n     * Sets the linear velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setVelocity\n     * @param {body} body\n     * @param {vector} velocity\n     */\n    Body.setVelocity = function(body, velocity) {\n        body.positionPrev.x = body.position.x - velocity.x;\n        body.positionPrev.y = body.position.y - velocity.y;\n        body.velocity.x = velocity.x;\n        body.velocity.y = velocity.y;\n        body.speed = Vector.magnitude(body.velocity);\n    };\n\n    /**\n     * Sets the angular velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setAngularVelocity\n     * @param {body} body\n     * @param {number} velocity\n     */\n    Body.setAngularVelocity = function(body, velocity) {\n        body.anglePrev = body.angle - velocity;\n        body.angularVelocity = velocity;\n        body.angularSpeed = Math.abs(body.angularVelocity);\n    };\n\n    /**\n     * Moves a body by a given vector relative to its current position, without imparting any velocity.\n     * @method translate\n     * @param {body} body\n     * @param {vector} translation\n     */\n    Body.translate = function(body, translation) {\n        Body.setPosition(body, Vector.add(body.position, translation));\n    };\n\n    /**\n     * Rotates a body by a given angle relative to its current angle, without imparting any angular velocity.\n     * @method rotate\n     * @param {body} body\n     * @param {number} rotation\n     * @param {vector} [point]\n     */\n    Body.rotate = function(body, rotation, point) {\n        if (!point) {\n            Body.setAngle(body, body.angle + rotation);\n        } else {\n            var cos = Math.cos(rotation),\n                sin = Math.sin(rotation),\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.setAngle(body, body.angle + rotation);\n        }\n    };\n\n    /**\n     * Scales the body, including updating physical properties (mass, area, axes, inertia), from a world-space point (default is body centre).\n     * @method scale\n     * @param {body} body\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} [point]\n     */\n    Body.scale = function(body, scaleX, scaleY, point) {\n        var totalArea = 0,\n            totalInertia = 0;\n\n        point = point || body.position;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            // scale vertices\n            Vertices.scale(part.vertices, scaleX, scaleY, point);\n\n            // update properties\n            part.axes = Axes.fromVertices(part.vertices);\n            part.area = Vertices.area(part.vertices);\n            Body.setMass(part, body.density * part.area);\n\n            // update inertia (requires vertices to be at origin)\n            Vertices.translate(part.vertices, { x: -part.position.x, y: -part.position.y });\n            Body.setInertia(part, Body._inertiaScale * Vertices.inertia(part.vertices, part.mass));\n            Vertices.translate(part.vertices, { x: part.position.x, y: part.position.y });\n\n            if (i > 0) {\n                totalArea += part.area;\n                totalInertia += part.inertia;\n            }\n\n            // scale position\n            part.position.x = point.x + (part.position.x - point.x) * scaleX;\n            part.position.y = point.y + (part.position.y - point.y) * scaleY;\n\n            // update bounds\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n\n        // handle parent body\n        if (body.parts.length > 1) {\n            body.area = totalArea;\n\n            if (!body.isStatic) {\n                Body.setMass(body, body.density * totalArea);\n                Body.setInertia(body, totalInertia);\n            }\n        }\n\n        // handle circles\n        if (body.circleRadius) { \n            if (scaleX === scaleY) {\n                body.circleRadius *= scaleX;\n            } else {\n                // body is no longer a circle\n                body.circleRadius = null;\n            }\n        }\n    };\n\n    /**\n     * Performs a simulation step for the given `body`, including updating position and angle using Verlet integration.\n     * @method update\n     * @param {body} body\n     * @param {number} deltaTime\n     * @param {number} timeScale\n     * @param {number} correction\n     */\n    Body.update = function(body, deltaTime, timeScale, correction) {\n        var deltaTimeSquared = Math.pow(deltaTime * timeScale * body.timeScale, 2);\n\n        // from the previous step\n        var frictionAir = 1 - body.frictionAir * timeScale * body.timeScale,\n            velocityPrevX = body.position.x - body.positionPrev.x,\n            velocityPrevY = body.position.y - body.positionPrev.y;\n\n        // update velocity with Verlet integration\n        body.velocity.x = (velocityPrevX * frictionAir * correction) + (body.force.x / body.mass) * deltaTimeSquared;\n        body.velocity.y = (velocityPrevY * frictionAir * correction) + (body.force.y / body.mass) * deltaTimeSquared;\n\n        body.positionPrev.x = body.position.x;\n        body.positionPrev.y = body.position.y;\n        body.position.x += body.velocity.x;\n        body.position.y += body.velocity.y;\n\n        // update angular velocity with Verlet integration\n        body.angularVelocity = ((body.angle - body.anglePrev) * frictionAir * correction) + (body.torque / body.inertia) * deltaTimeSquared;\n        body.anglePrev = body.angle;\n        body.angle += body.angularVelocity;\n\n        // track speed and acceleration\n        body.speed = Vector.magnitude(body.velocity);\n        body.angularSpeed = Math.abs(body.angularVelocity);\n\n        // transform the body geometry\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            Vertices.translate(part.vertices, body.velocity);\n            \n            if (i > 0) {\n                part.position.x += body.velocity.x;\n                part.position.y += body.velocity.y;\n            }\n\n            if (body.angularVelocity !== 0) {\n                Vertices.rotate(part.vertices, body.angularVelocity, body.position);\n                Axes.rotate(part.axes, body.angularVelocity);\n                if (i > 0) {\n                    Vector.rotateAbout(part.position, body.angularVelocity, body.position, part.position);\n                }\n            }\n\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Applies a force to a body from a given world-space position, including resulting torque.\n     * @method applyForce\n     * @param {body} body\n     * @param {vector} position\n     * @param {vector} force\n     */\n    Body.applyForce = function(body, position, force) {\n        body.force.x += force.x;\n        body.force.y += force.y;\n        var offset = { x: position.x - body.position.x, y: position.y - body.position.y };\n        body.torque += offset.x * force.y - offset.y * force.x;\n    };\n\n    /**\n     * Returns the sums of the properties of all compound parts of the parent body.\n     * @method _totalProperties\n     * @private\n     * @param {body} body\n     * @return {}\n     */\n    Body._totalProperties = function(body) {\n        // from equations at:\n        // https://ecourses.ou.edu/cgi-bin/ebook.cgi?doc=&topic=st&chap_sec=07.2&page=theory\n        // http://output.to/sideway/default.asp?qno=121100087\n\n        var properties = {\n            mass: 0,\n            area: 0,\n            inertia: 0,\n            centre: { x: 0, y: 0 }\n        };\n\n        // sum the properties of all compound parts of the parent body\n        for (var i = body.parts.length === 1 ? 0 : 1; i < body.parts.length; i++) {\n            var part = body.parts[i],\n                mass = part.mass !== Infinity ? part.mass : 1;\n\n            properties.mass += mass;\n            properties.area += part.area;\n            properties.inertia += part.inertia;\n            properties.centre = Vector.add(properties.centre, Vector.mult(part.position, mass));\n        }\n\n        properties.centre = Vector.div(properties.centre, properties.mass);\n\n        return properties;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a body starts sleeping (where `this` is the body).\n    *\n    * @event sleepStart\n    * @this {body} The body that has started sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a body ends sleeping (where `this` is the body).\n    *\n    * @event sleepEnd\n    * @this {body} The body that has ended sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Body.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"body\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Body\"\n     */\n\n    /**\n     * An array of bodies that make up this body. \n     * The first body in the array must always be a self reference to the current body instance.\n     * All bodies in the `parts` array together form a single rigid compound body.\n     * Parts are allowed to overlap, have gaps or holes or even form concave bodies.\n     * Parts themselves should never be added to a `World`, only the parent body should be.\n     * Use `Body.setParts` when setting parts to ensure correct updates of all properties.\n     *\n     * @property parts\n     * @type body[]\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * A self reference if the body is _not_ a part of another body.\n     * Otherwise this is a reference to the body that this is a part of.\n     * See `body.parts`.\n     *\n     * @property parent\n     * @type body\n     */\n\n    /**\n     * A `Number` specifying the angle of the body, in radians.\n     *\n     * @property angle\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * An array of `Vector` objects that specify the convex hull of the rigid body.\n     * These should be provided about the origin `(0, 0)`. E.g.\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * When passed via `Body.create`, the vertices are translated relative to `body.position` (i.e. world-space, and constantly updated by `Body.update` during simulation).\n     * The `Vector` objects are also augmented with additional properties required for efficient collision detection. \n     *\n     * Other properties such as `inertia` and `bounds` are automatically calculated from the passed vertices (unless provided via `options`).\n     * Concave hulls are not currently supported. The module `Matter.Vertices` contains useful methods for working with vertices.\n     *\n     * @property vertices\n     * @type vector[]\n     */\n\n    /**\n     * A `Vector` that specifies the current world-space position of the body.\n     *\n     * @property position\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the force to apply in the current step. It is zeroed after every `Body.update`. See also `Body.applyForce`.\n     *\n     * @property force\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the torque (turning force) to apply in the current step. It is zeroed after every `Body.update`.\n     *\n     * @property torque\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that _measures_ the current speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.velocity`).\n     *\n     * @readOnly\n     * @property speed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that _measures_ the current angular speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.angularVelocity`).\n     *\n     * @readOnly\n     * @property angularSpeed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Vector` that _measures_ the current velocity of the body after the last `Body.update`. It is read-only. \n     * If you need to modify a body's velocity directly, you should either apply a force or simply change the body's `position` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property velocity\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that _measures_ the current angular velocity of the body after the last `Body.update`. It is read-only. \n     * If you need to modify a body's angular velocity directly, you should apply a torque or simply change the body's `angle` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property angularVelocity\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A flag that indicates whether a body is considered static. A static body can never change position or angle and is completely fixed.\n     * If you need to set a body as static after its creation, you should use `Body.setStatic` as this requires more than just setting this flag.\n     *\n     * @property isStatic\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether a body is a sensor. Sensor triggers collision events, but doesn't react with colliding body physically.\n     *\n     * @property isSensor\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether the body is considered sleeping. A sleeping body acts similar to a static body, except it is only temporary and can be awoken.\n     * If you need to set a body as sleeping, you should use `Sleeping.set` as this requires more than just setting this flag.\n     *\n     * @property isSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that _measures_ the amount of movement a body currently has (a combination of `speed` and `angularSpeed`). It is read-only and always positive.\n     * It is used and updated by the `Matter.Sleeping` module during simulation to decide if a body has come to rest.\n     *\n     * @readOnly\n     * @property motion\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the number of updates in which this body must have near-zero velocity before it is set as sleeping by the `Matter.Sleeping` module (if sleeping is enabled by the engine).\n     *\n     * @property sleepThreshold\n     * @type number\n     * @default 60\n     */\n\n    /**\n     * A `Number` that defines the density of the body, that is its mass per unit area.\n     * If you pass the density via `Body.create` the `mass` property is automatically calculated for you based on the size (area) of the object.\n     * This is generally preferable to simply setting mass and allows for more intuitive definition of materials (e.g. rock has a higher density than wood).\n     *\n     * @property density\n     * @type number\n     * @default 0.001\n     */\n\n    /**\n     * A `Number` that defines the mass of the body, although it may be more appropriate to specify the `density` property instead.\n     * If you modify this value, you must also modify the `body.inverseMass` property (`1 / mass`).\n     *\n     * @property mass\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the inverse mass of the body (`1 / mass`).\n     * If you modify this value, you must also modify the `body.mass` property.\n     *\n     * @property inverseMass\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the moment of inertia (i.e. second moment of area) of the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) and density in `Body.create`.\n     * If you modify this value, you must also modify the `body.inverseInertia` property (`1 / inertia`).\n     *\n     * @property inertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the inverse moment of inertia of the body (`1 / inertia`).\n     * If you modify this value, you must also modify the `body.inertia` property.\n     *\n     * @property inverseInertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the restitution (elasticity) of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means collisions may be perfectly inelastic and no bouncing may occur. \n     * A value of `0.8` means the body may bounce back with approximately 80% of its kinetic energy.\n     * Note that collision response is based on _pairs_ of bodies, and that `restitution` values are _combined_ with the following formula:\n     *\n     *     Math.max(bodyA.restitution, bodyB.restitution)\n     *\n     * @property restitution\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the friction of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means that the body may slide indefinitely.\n     * A value of `1` means the body may come to a stop almost instantly after a force is applied.\n     *\n     * The effects of the value may be non-linear. \n     * High values may be unstable depending on the body.\n     * The engine uses a Coulomb friction model including static and kinetic friction.\n     * Note that collision response is based on _pairs_ of bodies, and that `friction` values are _combined_ with the following formula:\n     *\n     *     Math.min(bodyA.friction, bodyB.friction)\n     *\n     * @property friction\n     * @type number\n     * @default 0.1\n     */\n\n    /**\n     * A `Number` that defines the static friction of the body (in the Coulomb friction model). \n     * A value of `0` means the body will never 'stick' when it is nearly stationary and only dynamic `friction` is used.\n     * The higher the value (e.g. `10`), the more force it will take to initially get the body moving when nearly stationary.\n     * This value is multiplied with the `friction` property to make it easier to change `friction` and maintain an appropriate amount of static friction.\n     *\n     * @property frictionStatic\n     * @type number\n     * @default 0.5\n     */\n\n    /**\n     * A `Number` that defines the air friction of the body (air resistance). \n     * A value of `0` means the body will never slow as it moves through space.\n     * The higher the value, the faster a body slows when moving through space.\n     * The effects of the value are non-linear. \n     *\n     * @property frictionAir\n     * @type number\n     * @default 0.01\n     */\n\n    /**\n     * An `Object` that specifies the collision filtering properties of this body.\n     *\n     * Collisions between two bodies will obey the following rules:\n     * - If the two bodies have the same non-zero value of `collisionFilter.group`,\n     *   they will always collide if the value is positive, and they will never collide\n     *   if the value is negative.\n     * - If the two bodies have different values of `collisionFilter.group` or if one\n     *   (or both) of the bodies has a value of 0, then the category/mask rules apply as follows:\n     *\n     * Each body belongs to a collision category, given by `collisionFilter.category`. This\n     * value is used as a bit field and the category should have only one bit set, meaning that\n     * the value of this property is a power of two in the range [1, 2^31]. Thus, there are 32\n     * different collision categories available.\n     *\n     * Each body also defines a collision bitmask, given by `collisionFilter.mask` which specifies\n     * the categories it collides with (the value is the bitwise AND value of all these categories).\n     *\n     * Using the category/mask rules, two bodies `A` and `B` collide if each includes the other's\n     * category in its mask, i.e. `(categoryA & maskB) !== 0` and `(categoryB & maskA) !== 0`\n     * are both true.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n    /**\n     * An Integer `Number`, that specifies the collision group this body belongs to.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.group\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * A bit field that specifies the collision category this body belongs to.\n     * The category value should have only one bit set, for example `0x0001`.\n     * This means there are up to 32 unique collision categories available.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.category\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * A bit mask that specifies the collision categories this body may collide with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.mask\n     * @type object\n     * @default -1\n     */\n\n    /**\n     * A `Number` that specifies a tolerance on how far a body is allowed to 'sink' or rotate into other bodies.\n     * Avoid changing this value unless you understand the purpose of `slop` in physics engines.\n     * The default should generally suffice, although very large bodies may require larger values for stable stacking.\n     *\n     * @property slop\n     * @type number\n     * @default 0.05\n     */\n\n    /**\n     * A `Number` that allows per-body time scaling, e.g. a force-field where bodies inside are in slow-motion, while others are at full speed.\n     *\n     * @property timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the body should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * Sets the opacity to use when rendering.\n     *\n     * @property render.opacity\n     * @type number\n     * @default 1\n    */\n\n    /**\n     * An `Object` that defines the sprite properties to use when rendering, if any.\n     *\n     * @property render.sprite\n     * @type object\n     */\n\n    /**\n     * An `String` that defines the path to the image to use as the sprite texture, if any.\n     *\n     * @property render.sprite.texture\n     * @type string\n     */\n     \n    /**\n     * A `Number` that defines the scaling in the x-axis for the sprite, if any.\n     *\n     * @property render.sprite.xScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that defines the scaling in the y-axis for the sprite, if any.\n     *\n     * @property render.sprite.yScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n      * A `Number` that defines the offset in the x-axis for the sprite (normalised by texture width).\n      *\n      * @property render.sprite.xOffset\n      * @type number\n      * @default 0\n      */\n\n    /**\n      * A `Number` that defines the offset in the y-axis for the sprite (normalised by texture height).\n      *\n      * @property render.sprite.yOffset\n      * @type number\n      * @default 0\n      */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the body outline (if a sprite is not defined).\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `String` that defines the fill style to use when rendering the body (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.fillStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the body outline (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * An array of unique axis vectors (edge normals) used for collision detection.\n     * These are automatically calculated from the given convex hull (`vertices` array) in `Body.create`.\n     * They are constantly updated by `Body.update` during the simulation.\n     *\n     * @property axes\n     * @type vector[]\n     */\n     \n    /**\n     * A `Number` that _measures_ the area of the body's convex hull, calculated at creation by `Body.create`.\n     *\n     * @property area\n     * @type string\n     * @default \n     */\n\n    /**\n     * A `Bounds` object that defines the AABB region for the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) in `Body.create` and constantly updated by `Body.update` during simulation.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n})();\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Sleeping` module contains methods to manage the sleeping state of bodies.\n*\n* @class Sleeping\n*/\n\nvar Sleeping = {};\n\nmodule.exports = Sleeping;\n\nvar Events = __webpack_require__(4);\n\n(function() {\n\n    Sleeping._motionWakeThreshold = 0.18;\n    Sleeping._motionSleepThreshold = 0.08;\n    Sleeping._minBias = 0.9;\n\n    /**\n     * Puts bodies to sleep or wakes them up depending on their motion.\n     * @method update\n     * @param {body[]} bodies\n     * @param {number} timeScale\n     */\n    Sleeping.update = function(bodies, timeScale) {\n        var timeFactor = timeScale * timeScale * timeScale;\n\n        // update bodies sleeping status\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                motion = body.speed * body.speed + body.angularSpeed * body.angularSpeed;\n\n            // wake up bodies if they have a force applied\n            if (body.force.x !== 0 || body.force.y !== 0) {\n                Sleeping.set(body, false);\n                continue;\n            }\n\n            var minMotion = Math.min(body.motion, motion),\n                maxMotion = Math.max(body.motion, motion);\n        \n            // biased average motion estimation between frames\n            body.motion = Sleeping._minBias * minMotion + (1 - Sleeping._minBias) * maxMotion;\n            \n            if (body.sleepThreshold > 0 && body.motion < Sleeping._motionSleepThreshold * timeFactor) {\n                body.sleepCounter += 1;\n                \n                if (body.sleepCounter >= body.sleepThreshold)\n                    Sleeping.set(body, true);\n            } else if (body.sleepCounter > 0) {\n                body.sleepCounter -= 1;\n            }\n        }\n    };\n\n    /**\n     * Given a set of colliding pairs, wakes the sleeping bodies involved.\n     * @method afterCollisions\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Sleeping.afterCollisions = function(pairs, timeScale) {\n        var timeFactor = timeScale * timeScale * timeScale;\n\n        // wake up bodies involved in collisions\n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            \n            // don't wake inactive pairs\n            if (!pair.isActive)\n                continue;\n\n            var collision = pair.collision,\n                bodyA = collision.bodyA.parent, \n                bodyB = collision.bodyB.parent;\n        \n            // don't wake if at least one body is static\n            if ((bodyA.isSleeping && bodyB.isSleeping) || bodyA.isStatic || bodyB.isStatic)\n                continue;\n        \n            if (bodyA.isSleeping || bodyB.isSleeping) {\n                var sleepingBody = (bodyA.isSleeping && !bodyA.isStatic) ? bodyA : bodyB,\n                    movingBody = sleepingBody === bodyA ? bodyB : bodyA;\n\n                if (!sleepingBody.isStatic && movingBody.motion > Sleeping._motionWakeThreshold * timeFactor) {\n                    Sleeping.set(sleepingBody, false);\n                }\n            }\n        }\n    };\n  \n    /**\n     * Set a body as sleeping or awake.\n     * @method set\n     * @param {body} body\n     * @param {boolean} isSleeping\n     */\n    Sleeping.set = function(body, isSleeping) {\n        var wasSleeping = body.isSleeping;\n\n        if (isSleeping) {\n            body.isSleeping = true;\n            body.sleepCounter = body.sleepThreshold;\n\n            body.positionImpulse.x = 0;\n            body.positionImpulse.y = 0;\n\n            body.positionPrev.x = body.position.x;\n            body.positionPrev.y = body.position.y;\n\n            body.anglePrev = body.angle;\n            body.speed = 0;\n            body.angularSpeed = 0;\n            body.motion = 0;\n\n            if (!wasSleeping) {\n                Events.trigger(body, 'sleepStart');\n            }\n        } else {\n            body.isSleeping = false;\n            body.sleepCounter = 0;\n\n            if (wasSleeping) {\n                Events.trigger(body, 'sleepEnd');\n            }\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Collision` module contains methods for detecting collisions between a given pair of bodies.\n*\n* For efficient detection between a list of bodies, see `Matter.Detector` and `Matter.Query`.\n*\n* See `Matter.Engine` for collision events.\n*\n* @class Collision\n*/\n\nvar Collision = {};\n\nmodule.exports = Collision;\n\nvar Vertices = __webpack_require__(3);\nvar Pair = __webpack_require__(9);\n\n(function() {\n    var _supports = [];\n\n    var _overlapAB = {\n        overlap: 0,\n        axis: null\n    };\n\n    var _overlapBA = {\n        overlap: 0,\n        axis: null\n    };\n\n    /**\n     * Creates a new collision record.\n     * @method create\n     * @param {body} bodyA The first body part represented by the collision record\n     * @param {body} bodyB The second body part represented by the collision record\n     * @return {collision} A new collision record\n     */\n    Collision.create = function(bodyA, bodyB) {\n        return { \n            pair: null,\n            collided: false,\n            bodyA: bodyA,\n            bodyB: bodyB,\n            parentA: bodyA.parent,\n            parentB: bodyB.parent,\n            depth: 0,\n            normal: { x: 0, y: 0 },\n            tangent: { x: 0, y: 0 },\n            penetration: { x: 0, y: 0 },\n            supports: []\n        };\n    };\n\n    /**\n     * Detect collision between two bodies.\n     * @method collides\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @param {pairs} [pairs] Optionally reuse collision records from existing pairs.\n     * @return {collision|null} A collision record if detected, otherwise null\n     */\n    Collision.collides = function(bodyA, bodyB, pairs) {\n        Collision._overlapAxes(_overlapAB, bodyA.vertices, bodyB.vertices, bodyA.axes);\n\n        if (_overlapAB.overlap <= 0) {\n            return null;\n        }\n\n        Collision._overlapAxes(_overlapBA, bodyB.vertices, bodyA.vertices, bodyB.axes);\n\n        if (_overlapBA.overlap <= 0) {\n            return null;\n        }\n\n        // reuse collision records for gc efficiency\n        var pair = pairs && pairs.table[Pair.id(bodyA, bodyB)],\n            collision;\n\n        if (!pair) {\n            collision = Collision.create(bodyA, bodyB);\n            collision.collided = true;\n            collision.bodyA = bodyA.id < bodyB.id ? bodyA : bodyB;\n            collision.bodyB = bodyA.id < bodyB.id ? bodyB : bodyA;\n            collision.parentA = collision.bodyA.parent;\n            collision.parentB = collision.bodyB.parent;\n        } else {\n            collision = pair.collision;\n        }\n\n        bodyA = collision.bodyA;\n        bodyB = collision.bodyB;\n\n        var minOverlap;\n\n        if (_overlapAB.overlap < _overlapBA.overlap) {\n            minOverlap = _overlapAB;\n        } else {\n            minOverlap = _overlapBA;\n        }\n\n        var normal = collision.normal,\n            supports = collision.supports,\n            minAxis = minOverlap.axis,\n            minAxisX = minAxis.x,\n            minAxisY = minAxis.y;\n\n        // ensure normal is facing away from bodyA\n        if (minAxisX * (bodyB.position.x - bodyA.position.x) + minAxisY * (bodyB.position.y - bodyA.position.y) < 0) {\n            normal.x = minAxisX;\n            normal.y = minAxisY;\n        } else {\n            normal.x = -minAxisX;\n            normal.y = -minAxisY;\n        }\n        \n        collision.tangent.x = -normal.y;\n        collision.tangent.y = normal.x;\n\n        collision.depth = minOverlap.overlap;\n\n        collision.penetration.x = normal.x * collision.depth;\n        collision.penetration.y = normal.y * collision.depth;\n\n        // find support points, there is always either exactly one or two\n        var supportsB = Collision._findSupports(bodyA, bodyB, normal, 1),\n            supportCount = 0;\n\n        // find the supports from bodyB that are inside bodyA\n        if (Vertices.contains(bodyA.vertices, supportsB[0])) {\n            supports[supportCount++] = supportsB[0];\n        }\n\n        if (Vertices.contains(bodyA.vertices, supportsB[1])) {\n            supports[supportCount++] = supportsB[1];\n        }\n\n        // find the supports from bodyA that are inside bodyB\n        if (supportCount < 2) {\n            var supportsA = Collision._findSupports(bodyB, bodyA, normal, -1);\n\n            if (Vertices.contains(bodyB.vertices, supportsA[0])) {\n                supports[supportCount++] = supportsA[0];\n            }\n\n            if (supportCount < 2 && Vertices.contains(bodyB.vertices, supportsA[1])) {\n                supports[supportCount++] = supportsA[1];\n            }\n        }\n\n        // account for the edge case of overlapping but no vertex containment\n        if (supportCount === 0) {\n            supports[supportCount++] = supportsB[0];\n        }\n\n        // update supports array size\n        supports.length = supportCount;\n\n        return collision;\n    };\n\n    /**\n     * Find the overlap between two sets of vertices.\n     * @method _overlapAxes\n     * @private\n     * @param {object} result\n     * @param {vertices} verticesA\n     * @param {vertices} verticesB\n     * @param {axes} axes\n     */\n    Collision._overlapAxes = function(result, verticesA, verticesB, axes) {\n        var verticesALength = verticesA.length,\n            verticesBLength = verticesB.length,\n            verticesAX = verticesA[0].x,\n            verticesAY = verticesA[0].y,\n            verticesBX = verticesB[0].x,\n            verticesBY = verticesB[0].y,\n            axesLength = axes.length,\n            overlapMin = Number.MAX_VALUE,\n            overlapAxisNumber = 0,\n            overlap,\n            overlapAB,\n            overlapBA,\n            dot,\n            i,\n            j;\n\n        for (i = 0; i < axesLength; i++) {\n            var axis = axes[i],\n                axisX = axis.x,\n                axisY = axis.y,\n                minA = verticesAX * axisX + verticesAY * axisY,\n                minB = verticesBX * axisX + verticesBY * axisY,\n                maxA = minA,\n                maxB = minB;\n            \n            for (j = 1; j < verticesALength; j += 1) {\n                dot = verticesA[j].x * axisX + verticesA[j].y * axisY;\n\n                if (dot > maxA) { \n                    maxA = dot;\n                } else if (dot < minA) { \n                    minA = dot;\n                }\n            }\n\n            for (j = 1; j < verticesBLength; j += 1) {\n                dot = verticesB[j].x * axisX + verticesB[j].y * axisY;\n\n                if (dot > maxB) { \n                    maxB = dot;\n                } else if (dot < minB) { \n                    minB = dot;\n                }\n            }\n\n            overlapAB = maxA - minB;\n            overlapBA = maxB - minA;\n            overlap = overlapAB < overlapBA ? overlapAB : overlapBA;\n\n            if (overlap < overlapMin) {\n                overlapMin = overlap;\n                overlapAxisNumber = i;\n\n                if (overlap <= 0) {\n                    // can not be intersecting\n                    break;\n                }\n            } \n        }\n\n        result.axis = axes[overlapAxisNumber];\n        result.overlap = overlapMin;\n    };\n\n    /**\n     * Projects vertices on an axis and returns an interval.\n     * @method _projectToAxis\n     * @private\n     * @param {} projection\n     * @param {} vertices\n     * @param {} axis\n     */\n    Collision._projectToAxis = function(projection, vertices, axis) {\n        var min = vertices[0].x * axis.x + vertices[0].y * axis.y,\n            max = min;\n\n        for (var i = 1; i < vertices.length; i += 1) {\n            var dot = vertices[i].x * axis.x + vertices[i].y * axis.y;\n\n            if (dot > max) { \n                max = dot; \n            } else if (dot < min) { \n                min = dot; \n            }\n        }\n\n        projection.min = min;\n        projection.max = max;\n    };\n\n    /**\n     * Finds supporting vertices given two bodies along a given direction using hill-climbing.\n     * @method _findSupports\n     * @private\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @param {vector} normal\n     * @param {number} direction\n     * @return [vector]\n     */\n    Collision._findSupports = function(bodyA, bodyB, normal, direction) {\n        var vertices = bodyB.vertices,\n            verticesLength = vertices.length,\n            bodyAPositionX = bodyA.position.x,\n            bodyAPositionY = bodyA.position.y,\n            normalX = normal.x * direction,\n            normalY = normal.y * direction,\n            nearestDistance = Number.MAX_VALUE,\n            vertexA,\n            vertexB,\n            vertexC,\n            distance,\n            j;\n\n        // find deepest vertex relative to the axis\n        for (j = 0; j < verticesLength; j += 1) {\n            vertexB = vertices[j];\n            distance = normalX * (bodyAPositionX - vertexB.x) + normalY * (bodyAPositionY - vertexB.y);\n\n            // convex hill-climbing\n            if (distance < nearestDistance) {\n                nearestDistance = distance;\n                vertexA = vertexB;\n            }\n        }\n\n        // measure next vertex\n        vertexC = vertices[(verticesLength + vertexA.index - 1) % verticesLength];\n        nearestDistance = normalX * (bodyAPositionX - vertexC.x) + normalY * (bodyAPositionY - vertexC.y);\n\n        // compare with previous vertex\n        vertexB = vertices[(vertexA.index + 1) % verticesLength];\n        if (normalX * (bodyAPositionX - vertexB.x) + normalY * (bodyAPositionY - vertexB.y) < nearestDistance) {\n            _supports[0] = vertexA;\n            _supports[1] = vertexB;\n\n            return _supports;\n        }\n\n        _supports[0] = vertexA;\n        _supports[1] = vertexC;\n\n        return _supports;\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A reference to the pair using this collision record, if there is one.\n     *\n     * @property pair\n     * @type {pair|null}\n     * @default null\n     */\n\n    /**\n     * A flag that indicates if the bodies were colliding when the collision was last updated.\n     * \n     * @property collided\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * The first body part represented by the collision (see also `collision.parentA`).\n     * \n     * @property bodyA\n     * @type body\n     */\n\n    /**\n     * The second body part represented by the collision (see also `collision.parentB`).\n     * \n     * @property bodyB\n     * @type body\n     */\n\n    /**\n     * The first body represented by the collision (i.e. `collision.bodyA.parent`).\n     * \n     * @property parentA\n     * @type body\n     */\n\n    /**\n     * The second body represented by the collision (i.e. `collision.bodyB.parent`).\n     * \n     * @property parentB\n     * @type body\n     */\n\n    /**\n     * A `Number` that represents the minimum separating distance between the bodies along the collision normal.\n     *\n     * @readOnly\n     * @property depth\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A normalised `Vector` that represents the direction between the bodies that provides the minimum separating distance.\n     *\n     * @property normal\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A normalised `Vector` that is the tangent direction to the collision normal.\n     *\n     * @property tangent\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that represents the direction and depth of the collision.\n     *\n     * @property penetration\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * An array of body vertices that represent the support points in the collision.\n     * These are the deepest vertices (along the collision normal) of each body that are contained by the other body's vertices.\n     *\n     * @property supports\n     * @type vector[]\n     * @default []\n     */\n\n})();\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Pair` module contains methods for creating and manipulating collision pairs.\n*\n* @class Pair\n*/\n\nvar Pair = {};\n\nmodule.exports = Pair;\n\nvar Contact = __webpack_require__(17);\n\n(function() {\n    \n    /**\n     * Creates a pair.\n     * @method create\n     * @param {collision} collision\n     * @param {number} timestamp\n     * @return {pair} A new pair\n     */\n    Pair.create = function(collision, timestamp) {\n        var bodyA = collision.bodyA,\n            bodyB = collision.bodyB;\n\n        var pair = {\n            id: Pair.id(bodyA, bodyB),\n            bodyA: bodyA,\n            bodyB: bodyB,\n            collision: collision,\n            contacts: [],\n            activeContacts: [],\n            separation: 0,\n            isActive: true,\n            confirmedActive: true,\n            isSensor: bodyA.isSensor || bodyB.isSensor,\n            timeCreated: timestamp,\n            timeUpdated: timestamp,\n            inverseMass: 0,\n            friction: 0,\n            frictionStatic: 0,\n            restitution: 0,\n            slop: 0\n        };\n\n        Pair.update(pair, collision, timestamp);\n\n        return pair;\n    };\n\n    /**\n     * Updates a pair given a collision.\n     * @method update\n     * @param {pair} pair\n     * @param {collision} collision\n     * @param {number} timestamp\n     */\n    Pair.update = function(pair, collision, timestamp) {\n        var contacts = pair.contacts,\n            supports = collision.supports,\n            activeContacts = pair.activeContacts,\n            parentA = collision.parentA,\n            parentB = collision.parentB,\n            parentAVerticesLength = parentA.vertices.length;\n        \n        pair.isActive = true;\n        pair.timeUpdated = timestamp;\n        pair.collision = collision;\n        pair.separation = collision.depth;\n        pair.inverseMass = parentA.inverseMass + parentB.inverseMass;\n        pair.friction = parentA.friction < parentB.friction ? parentA.friction : parentB.friction;\n        pair.frictionStatic = parentA.frictionStatic > parentB.frictionStatic ? parentA.frictionStatic : parentB.frictionStatic;\n        pair.restitution = parentA.restitution > parentB.restitution ? parentA.restitution : parentB.restitution;\n        pair.slop = parentA.slop > parentB.slop ? parentA.slop : parentB.slop;\n\n        collision.pair = pair;\n        activeContacts.length = 0;\n        \n        for (var i = 0; i < supports.length; i++) {\n            var support = supports[i],\n                contactId = support.body === parentA ? support.index : parentAVerticesLength + support.index,\n                contact = contacts[contactId];\n\n            if (contact) {\n                activeContacts.push(contact);\n            } else {\n                activeContacts.push(contacts[contactId] = Contact.create(support));\n            }\n        }\n    };\n    \n    /**\n     * Set a pair as active or inactive.\n     * @method setActive\n     * @param {pair} pair\n     * @param {bool} isActive\n     * @param {number} timestamp\n     */\n    Pair.setActive = function(pair, isActive, timestamp) {\n        if (isActive) {\n            pair.isActive = true;\n            pair.timeUpdated = timestamp;\n        } else {\n            pair.isActive = false;\n            pair.activeContacts.length = 0;\n        }\n    };\n\n    /**\n     * Get the id for the given pair.\n     * @method id\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {string} Unique pairId\n     */\n    Pair.id = function(bodyA, bodyB) {\n        if (bodyA.id < bodyB.id) {\n            return 'A' + bodyA.id + 'B' + bodyB.id;\n        } else {\n            return 'A' + bodyB.id + 'B' + bodyA.id;\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Constraint` module contains methods for creating and manipulating constraints.\n* Constraints are used for specifying that a fixed distance must be maintained between two bodies (or a body and a fixed world-space position).\n* The stiffness of constraints can be modified to create springs or elastic.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Constraint\n*/\n\nvar Constraint = {};\n\nmodule.exports = Constraint;\n\nvar Vertices = __webpack_require__(3);\nvar Vector = __webpack_require__(2);\nvar Sleeping = __webpack_require__(7);\nvar Bounds = __webpack_require__(1);\nvar Axes = __webpack_require__(11);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    Constraint._warming = 0.4;\n    Constraint._torqueDampen = 1;\n    Constraint._minLength = 0.000001;\n\n    /**\n     * Creates a new constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * To simulate a revolute constraint (or pin joint) set `length: 0` and a high `stiffness` value (e.g. `0.7` or above).\n     * If the constraint is unstable, try lowering the `stiffness` value and / or increasing `engine.constraintIterations`.\n     * For compound bodies, constraints must be applied to the parent body (not one of its parts).\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {constraint} constraint\n     */\n    Constraint.create = function(options) {\n        var constraint = options;\n\n        // if bodies defined but no points, use body centre\n        if (constraint.bodyA && !constraint.pointA)\n            constraint.pointA = { x: 0, y: 0 };\n        if (constraint.bodyB && !constraint.pointB)\n            constraint.pointB = { x: 0, y: 0 };\n\n        // calculate static length using initial world space points\n        var initialPointA = constraint.bodyA ? Vector.add(constraint.bodyA.position, constraint.pointA) : constraint.pointA,\n            initialPointB = constraint.bodyB ? Vector.add(constraint.bodyB.position, constraint.pointB) : constraint.pointB,\n            length = Vector.magnitude(Vector.sub(initialPointA, initialPointB));\n    \n        constraint.length = typeof constraint.length !== 'undefined' ? constraint.length : length;\n\n        // option defaults\n        constraint.id = constraint.id || Common.nextId();\n        constraint.label = constraint.label || 'Constraint';\n        constraint.type = 'constraint';\n        constraint.stiffness = constraint.stiffness || (constraint.length > 0 ? 1 : 0.7);\n        constraint.damping = constraint.damping || 0;\n        constraint.angularStiffness = constraint.angularStiffness || 0;\n        constraint.angleA = constraint.bodyA ? constraint.bodyA.angle : constraint.angleA;\n        constraint.angleB = constraint.bodyB ? constraint.bodyB.angle : constraint.angleB;\n        constraint.plugin = {};\n\n        // render\n        var render = {\n            visible: true,\n            lineWidth: 2,\n            strokeStyle: '#ffffff',\n            type: 'line',\n            anchors: true\n        };\n\n        if (constraint.length === 0 && constraint.stiffness > 0.1) {\n            render.type = 'pin';\n            render.anchors = false;\n        } else if (constraint.stiffness < 0.9) {\n            render.type = 'spring';\n        }\n\n        constraint.render = Common.extend(render, constraint.render);\n\n        return constraint;\n    };\n\n    /**\n     * Prepares for solving by constraint warming.\n     * @private\n     * @method preSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.preSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            body.position.x += impulse.x;\n            body.position.y += impulse.y;\n            body.angle += impulse.angle;\n        }\n    };\n\n    /**\n     * Solves all constraints in a list of collisions.\n     * @private\n     * @method solveAll\n     * @param {constraint[]} constraints\n     * @param {number} timeScale\n     */\n    Constraint.solveAll = function(constraints, timeScale) {\n        // Solve fixed constraints first.\n        for (var i = 0; i < constraints.length; i += 1) {\n            var constraint = constraints[i],\n                fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic),\n                fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (fixedA || fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n\n        // Solve free constraints last.\n        for (i = 0; i < constraints.length; i += 1) {\n            constraint = constraints[i];\n            fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic);\n            fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (!fixedA && !fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n    };\n\n    /**\n     * Solves a distance constraint with Gauss-Siedel method.\n     * @private\n     * @method solve\n     * @param {constraint} constraint\n     * @param {number} timeScale\n     */\n    Constraint.solve = function(constraint, timeScale) {\n        var bodyA = constraint.bodyA,\n            bodyB = constraint.bodyB,\n            pointA = constraint.pointA,\n            pointB = constraint.pointB;\n\n        if (!bodyA && !bodyB)\n            return;\n\n        // update reference angle\n        if (bodyA && !bodyA.isStatic) {\n            Vector.rotate(pointA, bodyA.angle - constraint.angleA, pointA);\n            constraint.angleA = bodyA.angle;\n        }\n        \n        // update reference angle\n        if (bodyB && !bodyB.isStatic) {\n            Vector.rotate(pointB, bodyB.angle - constraint.angleB, pointB);\n            constraint.angleB = bodyB.angle;\n        }\n\n        var pointAWorld = pointA,\n            pointBWorld = pointB;\n\n        if (bodyA) pointAWorld = Vector.add(bodyA.position, pointA);\n        if (bodyB) pointBWorld = Vector.add(bodyB.position, pointB);\n\n        if (!pointAWorld || !pointBWorld)\n            return;\n\n        var delta = Vector.sub(pointAWorld, pointBWorld),\n            currentLength = Vector.magnitude(delta);\n\n        // prevent singularity\n        if (currentLength < Constraint._minLength) {\n            currentLength = Constraint._minLength;\n        }\n\n        // solve distance constraint with Gauss-Siedel method\n        var difference = (currentLength - constraint.length) / currentLength,\n            stiffness = constraint.stiffness < 1 ? constraint.stiffness * timeScale : constraint.stiffness,\n            force = Vector.mult(delta, difference * stiffness),\n            massTotal = (bodyA ? bodyA.inverseMass : 0) + (bodyB ? bodyB.inverseMass : 0),\n            inertiaTotal = (bodyA ? bodyA.inverseInertia : 0) + (bodyB ? bodyB.inverseInertia : 0),\n            resistanceTotal = massTotal + inertiaTotal,\n            torque,\n            share,\n            normal,\n            normalVelocity,\n            relativeVelocity;\n\n        if (constraint.damping) {\n            var zero = Vector.create();\n            normal = Vector.div(delta, currentLength);\n\n            relativeVelocity = Vector.sub(\n                bodyB && Vector.sub(bodyB.position, bodyB.positionPrev) || zero,\n                bodyA && Vector.sub(bodyA.position, bodyA.positionPrev) || zero\n            );\n\n            normalVelocity = Vector.dot(normal, relativeVelocity);\n        }\n\n        if (bodyA && !bodyA.isStatic) {\n            share = bodyA.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyA.constraintImpulse.x -= force.x * share;\n            bodyA.constraintImpulse.y -= force.y * share;\n\n            // apply forces\n            bodyA.position.x -= force.x * share;\n            bodyA.position.y -= force.y * share;\n\n            // apply damping\n            if (constraint.damping) {\n                bodyA.positionPrev.x -= constraint.damping * normal.x * normalVelocity * share;\n                bodyA.positionPrev.y -= constraint.damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointA, force) / resistanceTotal) * Constraint._torqueDampen * bodyA.inverseInertia * (1 - constraint.angularStiffness);\n            bodyA.constraintImpulse.angle -= torque;\n            bodyA.angle -= torque;\n        }\n\n        if (bodyB && !bodyB.isStatic) {\n            share = bodyB.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyB.constraintImpulse.x += force.x * share;\n            bodyB.constraintImpulse.y += force.y * share;\n            \n            // apply forces\n            bodyB.position.x += force.x * share;\n            bodyB.position.y += force.y * share;\n\n            // apply damping\n            if (constraint.damping) {\n                bodyB.positionPrev.x += constraint.damping * normal.x * normalVelocity * share;\n                bodyB.positionPrev.y += constraint.damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointB, force) / resistanceTotal) * Constraint._torqueDampen * bodyB.inverseInertia * (1 - constraint.angularStiffness);\n            bodyB.constraintImpulse.angle += torque;\n            bodyB.angle += torque;\n        }\n\n    };\n\n    /**\n     * Performs body updates required after solving constraints.\n     * @private\n     * @method postSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.postSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            Sleeping.set(body, false);\n\n            // update geometry and reset\n            for (var j = 0; j < body.parts.length; j++) {\n                var part = body.parts[j];\n                \n                Vertices.translate(part.vertices, impulse);\n\n                if (j > 0) {\n                    part.position.x += impulse.x;\n                    part.position.y += impulse.y;\n                }\n\n                if (impulse.angle !== 0) {\n                    Vertices.rotate(part.vertices, impulse.angle, body.position);\n                    Axes.rotate(part.axes, impulse.angle);\n                    if (j > 0) {\n                        Vector.rotateAbout(part.position, impulse.angle, body.position, part.position);\n                    }\n                }\n\n                Bounds.update(part.bounds, part.vertices, body.velocity);\n            }\n\n            // dampen the cached impulse for warming next step\n            impulse.angle *= Constraint._warming;\n            impulse.x *= Constraint._warming;\n            impulse.y *= Constraint._warming;\n        }\n    };\n\n    /**\n     * Returns the world-space position of `constraint.pointA`, accounting for `constraint.bodyA`.\n     * @method pointAWorld\n     * @param {constraint} constraint\n     * @returns {vector} the world-space position\n     */\n    Constraint.pointAWorld = function(constraint) {\n        return {\n            x: (constraint.bodyA ? constraint.bodyA.position.x : 0) + constraint.pointA.x,\n            y: (constraint.bodyA ? constraint.bodyA.position.y : 0) + constraint.pointA.y\n        };\n    };\n\n    /**\n     * Returns the world-space position of `constraint.pointB`, accounting for `constraint.bodyB`.\n     * @method pointBWorld\n     * @param {constraint} constraint\n     * @returns {vector} the world-space position\n     */\n    Constraint.pointBWorld = function(constraint) {\n        return {\n            x: (constraint.bodyB ? constraint.bodyB.position.x : 0) + constraint.pointB.x,\n            y: (constraint.bodyB ? constraint.bodyB.position.y : 0) + constraint.pointB.y\n        };\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Constraint\"\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the constraint should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the constraint outline.\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the constraint outline.\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the constraint rendering type. \n     * The possible values are 'line', 'pin', 'spring'.\n     * An appropriate render type will be automatically chosen unless one is given in options.\n     *\n     * @property render.type\n     * @type string\n     * @default 'line'\n     */\n\n    /**\n     * A `Boolean` that defines if the constraint's anchor points should be rendered.\n     *\n     * @property render.anchors\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * The first possible `Body` that this constraint is attached to.\n     *\n     * @property bodyA\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The second possible `Body` that this constraint is attached to.\n     *\n     * @property bodyB\n     * @type body\n     * @default null\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.\n     *\n     * @property pointA\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyB` if defined, otherwise a world-space position.\n     *\n     * @property pointB\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the stiffness of the constraint, i.e. the rate at which it returns to its resting `constraint.length`.\n     * A value of `1` means the constraint should be very stiff.\n     * A value of `0.2` means the constraint acts like a soft spring.\n     *\n     * @property stiffness\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the damping of the constraint, \n     * i.e. the amount of resistance applied to each body based on their velocities to limit the amount of oscillation.\n     * Damping will only be apparent when the constraint also has a very low `stiffness`.\n     * A value of `0.1` means the constraint will apply heavy damping, resulting in little to no oscillation.\n     * A value of `0` means the constraint will apply no damping.\n     *\n     * @property damping\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that specifies the target resting length of the constraint. \n     * It is calculated automatically in `Constraint.create` from initial positions of the `constraint.bodyA` and `constraint.bodyB`.\n     *\n     * @property length\n     * @type number\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Axes` module contains methods for creating and manipulating sets of axes.\n*\n* @class Axes\n*/\n\nvar Axes = {};\n\nmodule.exports = Axes;\n\nvar Vector = __webpack_require__(2);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Creates a new set of axes from the given vertices.\n     * @method fromVertices\n     * @param {vertices} vertices\n     * @return {axes} A new axes from the given vertices\n     */\n    Axes.fromVertices = function(vertices) {\n        var axes = {};\n\n        // find the unique axes, using edge normal gradients\n        for (var i = 0; i < vertices.length; i++) {\n            var j = (i + 1) % vertices.length, \n                normal = Vector.normalise({ \n                    x: vertices[j].y - vertices[i].y, \n                    y: vertices[i].x - vertices[j].x\n                }),\n                gradient = (normal.y === 0) ? Infinity : (normal.x / normal.y);\n            \n            // limit precision\n            gradient = gradient.toFixed(3).toString();\n            axes[gradient] = normal;\n        }\n\n        return Common.values(axes);\n    };\n\n    /**\n     * Rotates a set of axes by the given angle.\n     * @method rotate\n     * @param {axes} axes\n     * @param {number} angle\n     */\n    Axes.rotate = function(axes, angle) {\n        if (angle === 0)\n            return;\n        \n        var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n\n        for (var i = 0; i < axes.length; i++) {\n            var axis = axes[i],\n                xx;\n            xx = axis.x * cos - axis.y * sin;\n            axis.y = axis.x * sin + axis.y * cos;\n            axis.x = xx;\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Bodies` module contains factory methods for creating rigid body models \n* with commonly used body configurations (such as rectangles, circles and other polygons).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Bodies\n*/\n\n// TODO: true circle bodies\n\nvar Bodies = {};\n\nmodule.exports = Bodies;\n\nvar Vertices = __webpack_require__(3);\nvar Common = __webpack_require__(0);\nvar Body = __webpack_require__(6);\nvar Bounds = __webpack_require__(1);\nvar Vector = __webpack_require__(2);\n\n(function() {\n\n    /**\n     * Creates a new rigid body model with a rectangle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method rectangle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {object} [options]\n     * @return {body} A new rectangle body\n     */\n    Bodies.rectangle = function(x, y, width, height, options) {\n        options = options || {};\n\n        var rectangle = { \n            label: 'Rectangle Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath('L 0 0 L ' + width + ' 0 L ' + width + ' ' + height + ' L 0 ' + height)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            rectangle.vertices = Vertices.chamfer(rectangle.vertices, chamfer.radius, \n                chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, rectangle, options));\n    };\n    \n    /**\n     * Creates a new rigid body model with a trapezoid hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method trapezoid\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {number} slope\n     * @param {object} [options]\n     * @return {body} A new trapezoid body\n     */\n    Bodies.trapezoid = function(x, y, width, height, slope, options) {\n        options = options || {};\n\n        slope *= 0.5;\n        var roof = (1 - (slope * 2)) * width;\n        \n        var x1 = width * slope,\n            x2 = x1 + roof,\n            x3 = x2 + x1,\n            verticesPath;\n\n        if (slope < 0.5) {\n            verticesPath = 'L 0 0 L ' + x1 + ' ' + (-height) + ' L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        } else {\n            verticesPath = 'L 0 0 L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        }\n\n        var trapezoid = { \n            label: 'Trapezoid Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(verticesPath)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            trapezoid.vertices = Vertices.chamfer(trapezoid.vertices, chamfer.radius, \n                chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, trapezoid, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a circle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method circle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} radius\n     * @param {object} [options]\n     * @param {number} [maxSides]\n     * @return {body} A new circle body\n     */\n    Bodies.circle = function(x, y, radius, options, maxSides) {\n        options = options || {};\n\n        var circle = {\n            label: 'Circle Body',\n            circleRadius: radius\n        };\n        \n        // approximate circles with polygons until true circles implemented in SAT\n        maxSides = maxSides || 25;\n        var sides = Math.ceil(Math.max(10, Math.min(maxSides, radius)));\n\n        // optimisation: always use even number of sides (half the number of unique axes)\n        if (sides % 2 === 1)\n            sides += 1;\n\n        return Bodies.polygon(x, y, sides, radius, Common.extend({}, circle, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a regular polygon hull with the given number of sides. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method polygon\n     * @param {number} x\n     * @param {number} y\n     * @param {number} sides\n     * @param {number} radius\n     * @param {object} [options]\n     * @return {body} A new regular polygon body\n     */\n    Bodies.polygon = function(x, y, sides, radius, options) {\n        options = options || {};\n\n        if (sides < 3)\n            return Bodies.circle(x, y, radius, options);\n\n        var theta = 2 * Math.PI / sides,\n            path = '',\n            offset = theta * 0.5;\n\n        for (var i = 0; i < sides; i += 1) {\n            var angle = offset + (i * theta),\n                xx = Math.cos(angle) * radius,\n                yy = Math.sin(angle) * radius;\n\n            path += 'L ' + xx.toFixed(3) + ' ' + yy.toFixed(3) + ' ';\n        }\n\n        var polygon = { \n            label: 'Polygon Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(path)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            polygon.vertices = Vertices.chamfer(polygon.vertices, chamfer.radius, \n                chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, polygon, options));\n    };\n\n    /**\n     * Utility to create a compound body based on set(s) of vertices.\n     * \n     * _Note:_ To optionally enable automatic concave vertices decomposition the [poly-decomp](https://github.com/schteppe/poly-decomp.js) \n     * package must be first installed and provided see `Common.setDecomp`, otherwise the convex hull of each vertex set will be used.\n     * \n     * The resulting vertices are reorientated about their centre of mass,\n     * and offset such that `body.position` corresponds to this point.\n     * \n     * The resulting offset may be found if needed by subtracting `body.bounds` from the original input bounds.\n     * To later move the centre of mass see `Body.setCentre`.\n     * \n     * Note that automatic conconcave decomposition results are not always optimal. \n     * For best results, simplify the input vertices as much as possible first.\n     * By default this function applies some addtional simplification to help.\n     * \n     * Some outputs may also require further manual processing afterwards to be robust.\n     * In particular some parts may need to be overlapped to avoid collision gaps.\n     * Thin parts and sharp points should be avoided or removed where possible.\n     *\n     * The options parameter object specifies any `Matter.Body` properties you wish to override the defaults.\n     * \n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method fromVertices\n     * @param {number} x\n     * @param {number} y\n     * @param {array} vertexSets One or more arrays of vertex points e.g. `[[{ x: 0, y: 0 }...], ...]`.\n     * @param {object} [options] The body options.\n     * @param {bool} [flagInternal=false] Optionally marks internal edges with `isInternal`.\n     * @param {number} [removeCollinear=0.01] Threshold when simplifying vertices along the same edge.\n     * @param {number} [minimumArea=10] Threshold when removing small parts.\n     * @param {number} [removeDuplicatePoints=0.01] Threshold when simplifying nearby vertices.\n     * @return {body}\n     */\n    Bodies.fromVertices = function(x, y, vertexSets, options, flagInternal, removeCollinear, minimumArea, removeDuplicatePoints) {\n        var decomp = Common.getDecomp(),\n            canDecomp,\n            body,\n            parts,\n            isConvex,\n            isConcave,\n            vertices,\n            i,\n            j,\n            k,\n            v,\n            z;\n\n        // check decomp is as expected\n        canDecomp = Boolean(decomp && decomp.quickDecomp);\n\n        options = options || {};\n        parts = [];\n\n        flagInternal = typeof flagInternal !== 'undefined' ? flagInternal : false;\n        removeCollinear = typeof removeCollinear !== 'undefined' ? removeCollinear : 0.01;\n        minimumArea = typeof minimumArea !== 'undefined' ? minimumArea : 10;\n        removeDuplicatePoints = typeof removeDuplicatePoints !== 'undefined' ? removeDuplicatePoints : 0.01;\n\n        // ensure vertexSets is an array of arrays\n        if (!Common.isArray(vertexSets[0])) {\n            vertexSets = [vertexSets];\n        }\n\n        for (v = 0; v < vertexSets.length; v += 1) {\n            vertices = vertexSets[v];\n            isConvex = Vertices.isConvex(vertices);\n            isConcave = !isConvex;\n\n            if (isConcave && !canDecomp) {\n                Common.warnOnce(\n                    'Bodies.fromVertices: Install the \\'poly-decomp\\' library and use Common.setDecomp or provide \\'decomp\\' as a global to decompose concave vertices.'\n                );\n            }\n\n            if (isConvex || !canDecomp) {\n                if (isConvex) {\n                    vertices = Vertices.clockwiseSort(vertices);\n                } else {\n                    // fallback to convex hull when decomposition is not possible\n                    vertices = Vertices.hull(vertices);\n                }\n\n                parts.push({\n                    position: { x: x, y: y },\n                    vertices: vertices\n                });\n            } else {\n                // initialise a decomposition\n                var concave = vertices.map(function(vertex) {\n                    return [vertex.x, vertex.y];\n                });\n\n                // vertices are concave and simple, we can decompose into parts\n                decomp.makeCCW(concave);\n                if (removeCollinear !== false)\n                    decomp.removeCollinearPoints(concave, removeCollinear);\n                if (removeDuplicatePoints !== false && decomp.removeDuplicatePoints)\n                    decomp.removeDuplicatePoints(concave, removeDuplicatePoints);\n\n                // use the quick decomposition algorithm (Bayazit)\n                var decomposed = decomp.quickDecomp(concave);\n\n                // for each decomposed chunk\n                for (i = 0; i < decomposed.length; i++) {\n                    var chunk = decomposed[i];\n\n                    // convert vertices into the correct structure\n                    var chunkVertices = chunk.map(function(vertices) {\n                        return {\n                            x: vertices[0],\n                            y: vertices[1]\n                        };\n                    });\n\n                    // skip small chunks\n                    if (minimumArea > 0 && Vertices.area(chunkVertices) < minimumArea)\n                        continue;\n\n                    // create a compound part\n                    parts.push({\n                        position: Vertices.centre(chunkVertices),\n                        vertices: chunkVertices\n                    });\n                }\n            }\n        }\n\n        // create body parts\n        for (i = 0; i < parts.length; i++) {\n            parts[i] = Body.create(Common.extend(parts[i], options));\n        }\n\n        // flag internal edges (coincident part edges)\n        if (flagInternal) {\n            var coincident_max_dist = 5;\n\n            for (i = 0; i < parts.length; i++) {\n                var partA = parts[i];\n\n                for (j = i + 1; j < parts.length; j++) {\n                    var partB = parts[j];\n\n                    if (Bounds.overlaps(partA.bounds, partB.bounds)) {\n                        var pav = partA.vertices,\n                            pbv = partB.vertices;\n\n                        // iterate vertices of both parts\n                        for (k = 0; k < partA.vertices.length; k++) {\n                            for (z = 0; z < partB.vertices.length; z++) {\n                                // find distances between the vertices\n                                var da = Vector.magnitudeSquared(Vector.sub(pav[(k + 1) % pav.length], pbv[z])),\n                                    db = Vector.magnitudeSquared(Vector.sub(pav[k], pbv[(z + 1) % pbv.length]));\n\n                                // if both vertices are very close, consider the edge concident (internal)\n                                if (da < coincident_max_dist && db < coincident_max_dist) {\n                                    pav[k].isInternal = true;\n                                    pbv[z].isInternal = true;\n                                }\n                            }\n                        }\n\n                    }\n                }\n            }\n        }\n\n        if (parts.length > 1) {\n            // create the parent body to be returned, that contains generated compound parts\n            body = Body.create(Common.extend({ parts: parts.slice(0) }, options));\n\n            // offset such that body.position is at the centre off mass\n            Body.setPosition(body, { x: x, y: y });\n\n            return body;\n        } else {\n            return parts[0];\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Mouse` module contains methods for creating and manipulating mouse inputs.\n*\n* @class Mouse\n*/\n\nvar Mouse = {};\n\nmodule.exports = Mouse;\n\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Creates a mouse input.\n     * @method create\n     * @param {HTMLElement} element\n     * @return {mouse} A new mouse\n     */\n    Mouse.create = function(element) {\n        var mouse = {};\n\n        if (!element) {\n            Common.log('Mouse.create: element was undefined, defaulting to document.body', 'warn');\n        }\n        \n        mouse.element = element || document.body;\n        mouse.absolute = { x: 0, y: 0 };\n        mouse.position = { x: 0, y: 0 };\n        mouse.mousedownPosition = { x: 0, y: 0 };\n        mouse.mouseupPosition = { x: 0, y: 0 };\n        mouse.offset = { x: 0, y: 0 };\n        mouse.scale = { x: 1, y: 1 };\n        mouse.wheelDelta = 0;\n        mouse.button = -1;\n        mouse.pixelRatio = parseInt(mouse.element.getAttribute('data-pixel-ratio'), 10) || 1;\n\n        mouse.sourceEvents = {\n            mousemove: null,\n            mousedown: null,\n            mouseup: null,\n            mousewheel: null\n        };\n        \n        mouse.mousemove = function(event) { \n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.sourceEvents.mousemove = event;\n        };\n        \n        mouse.mousedown = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            } else {\n                mouse.button = event.button;\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mousedownPosition.x = mouse.position.x;\n            mouse.mousedownPosition.y = mouse.position.y;\n            mouse.sourceEvents.mousedown = event;\n        };\n        \n        mouse.mouseup = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                event.preventDefault();\n            }\n            \n            mouse.button = -1;\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mouseupPosition.x = mouse.position.x;\n            mouse.mouseupPosition.y = mouse.position.y;\n            mouse.sourceEvents.mouseup = event;\n        };\n\n        mouse.mousewheel = function(event) {\n            mouse.wheelDelta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail));\n            event.preventDefault();\n        };\n\n        Mouse.setElement(mouse, mouse.element);\n\n        return mouse;\n    };\n\n    /**\n     * Sets the element the mouse is bound to (and relative to).\n     * @method setElement\n     * @param {mouse} mouse\n     * @param {HTMLElement} element\n     */\n    Mouse.setElement = function(mouse, element) {\n        mouse.element = element;\n\n        element.addEventListener('mousemove', mouse.mousemove);\n        element.addEventListener('mousedown', mouse.mousedown);\n        element.addEventListener('mouseup', mouse.mouseup);\n        \n        element.addEventListener('mousewheel', mouse.mousewheel);\n        element.addEventListener('DOMMouseScroll', mouse.mousewheel);\n\n        element.addEventListener('touchmove', mouse.mousemove);\n        element.addEventListener('touchstart', mouse.mousedown);\n        element.addEventListener('touchend', mouse.mouseup);\n    };\n\n    /**\n     * Clears all captured source events.\n     * @method clearSourceEvents\n     * @param {mouse} mouse\n     */\n    Mouse.clearSourceEvents = function(mouse) {\n        mouse.sourceEvents.mousemove = null;\n        mouse.sourceEvents.mousedown = null;\n        mouse.sourceEvents.mouseup = null;\n        mouse.sourceEvents.mousewheel = null;\n        mouse.wheelDelta = 0;\n    };\n\n    /**\n     * Sets the mouse position offset.\n     * @method setOffset\n     * @param {mouse} mouse\n     * @param {vector} offset\n     */\n    Mouse.setOffset = function(mouse, offset) {\n        mouse.offset.x = offset.x;\n        mouse.offset.y = offset.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n\n    /**\n     * Sets the mouse position scale.\n     * @method setScale\n     * @param {mouse} mouse\n     * @param {vector} scale\n     */\n    Mouse.setScale = function(mouse, scale) {\n        mouse.scale.x = scale.x;\n        mouse.scale.y = scale.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n    \n    /**\n     * Gets the mouse position relative to an element given a screen pixel ratio.\n     * @method _getRelativeMousePosition\n     * @private\n     * @param {} event\n     * @param {} element\n     * @param {number} pixelRatio\n     * @return {}\n     */\n    Mouse._getRelativeMousePosition = function(event, element, pixelRatio) {\n        var elementBounds = element.getBoundingClientRect(),\n            rootNode = (document.documentElement || document.body.parentNode || document.body),\n            scrollX = (window.pageXOffset !== undefined) ? window.pageXOffset : rootNode.scrollLeft,\n            scrollY = (window.pageYOffset !== undefined) ? window.pageYOffset : rootNode.scrollTop,\n            touches = event.changedTouches,\n            x, y;\n        \n        if (touches) {\n            x = touches[0].pageX - elementBounds.left - scrollX;\n            y = touches[0].pageY - elementBounds.top - scrollY;\n        } else {\n            x = event.pageX - elementBounds.left - scrollX;\n            y = event.pageY - elementBounds.top - scrollY;\n        }\n\n        return { \n            x: x / (element.clientWidth / (element.width || element.clientWidth) * pixelRatio),\n            y: y / (element.clientHeight / (element.height || element.clientHeight) * pixelRatio)\n        };\n    };\n\n})();\n\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Detector` module contains methods for efficiently detecting collisions between a list of bodies using a broadphase algorithm.\n*\n* @class Detector\n*/\n\nvar Detector = {};\n\nmodule.exports = Detector;\n\nvar Common = __webpack_require__(0);\nvar Collision = __webpack_require__(8);\n\n(function() {\n\n    /**\n     * Creates a new collision detector.\n     * @method create\n     * @param {} options\n     * @return {detector} A new collision detector\n     */\n    Detector.create = function(options) {\n        var defaults = {\n            bodies: [],\n            pairs: null\n        };\n\n        return Common.extend(defaults, options);\n    };\n\n    /**\n     * Sets the list of bodies in the detector.\n     * @method setBodies\n     * @param {detector} detector\n     * @param {body[]} bodies\n     */\n    Detector.setBodies = function(detector, bodies) {\n        detector.bodies = bodies.slice(0);\n    };\n\n    /**\n     * Clears the detector including its list of bodies.\n     * @method clear\n     * @param {detector} detector\n     */\n    Detector.clear = function(detector) {\n        detector.bodies = [];\n    };\n\n    /**\n     * Efficiently finds all collisions among all the bodies in `detector.bodies` using a broadphase algorithm.\n     * \n     * _Note:_ The specific ordering of collisions returned is not guaranteed between releases and may change for performance reasons.\n     * If a specific ordering is required then apply a sort to the resulting array.\n     * @method collisions\n     * @param {detector} detector\n     * @return {collision[]} collisions\n     */\n    Detector.collisions = function(detector) {\n        var collisions = [],\n            pairs = detector.pairs,\n            bodies = detector.bodies,\n            bodiesLength = bodies.length,\n            canCollide = Detector.canCollide,\n            collides = Collision.collides,\n            i,\n            j;\n\n        bodies.sort(Detector._compareBoundsX);\n\n        for (i = 0; i < bodiesLength; i++) {\n            var bodyA = bodies[i],\n                boundsA = bodyA.bounds,\n                boundXMax = bodyA.bounds.max.x,\n                boundYMax = bodyA.bounds.max.y,\n                boundYMin = bodyA.bounds.min.y,\n                bodyAStatic = bodyA.isStatic || bodyA.isSleeping,\n                partsALength = bodyA.parts.length,\n                partsASingle = partsALength === 1;\n\n            for (j = i + 1; j < bodiesLength; j++) {\n                var bodyB = bodies[j],\n                    boundsB = bodyB.bounds;\n\n                if (boundsB.min.x > boundXMax) {\n                    break;\n                }\n\n                if (boundYMax < boundsB.min.y || boundYMin > boundsB.max.y) {\n                    continue;\n                }\n\n                if (bodyAStatic && (bodyB.isStatic || bodyB.isSleeping)) {\n                    continue;\n                }\n\n                if (!canCollide(bodyA.collisionFilter, bodyB.collisionFilter)) {\n                    continue;\n                }\n\n                var partsBLength = bodyB.parts.length;\n\n                if (partsASingle && partsBLength === 1) {\n                    var collision = collides(bodyA, bodyB, pairs);\n\n                    if (collision) {\n                        collisions.push(collision);\n                    }\n                } else {\n                    var partsAStart = partsALength > 1 ? 1 : 0,\n                        partsBStart = partsBLength > 1 ? 1 : 0;\n                    \n                    for (var k = partsAStart; k < partsALength; k++) {\n                        var partA = bodyA.parts[k],\n                            boundsA = partA.bounds;\n\n                        for (var z = partsBStart; z < partsBLength; z++) {\n                            var partB = bodyB.parts[z],\n                                boundsB = partB.bounds;\n\n                            if (boundsA.min.x > boundsB.max.x || boundsA.max.x < boundsB.min.x\n                                || boundsA.max.y < boundsB.min.y || boundsA.min.y > boundsB.max.y) {\n                                continue;\n                            }\n\n                            var collision = collides(partA, partB, pairs);\n\n                            if (collision) {\n                                collisions.push(collision);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns `true` if both supplied collision filters will allow a collision to occur.\n     * See `body.collisionFilter` for more information.\n     * @method canCollide\n     * @param {} filterA\n     * @param {} filterB\n     * @return {bool} `true` if collision can occur\n     */\n    Detector.canCollide = function(filterA, filterB) {\n        if (filterA.group === filterB.group && filterA.group !== 0)\n            return filterA.group > 0;\n\n        return (filterA.mask & filterB.category) !== 0 && (filterB.mask & filterA.category) !== 0;\n    };\n\n    /**\n     * The comparison function used in the broadphase algorithm.\n     * Returns the signed delta of the bodies bounds on the x-axis.\n     * @private\n     * @method _sortCompare\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {number} The signed delta used for sorting\n     */\n    Detector._compareBoundsX = function(bodyA, bodyB) {\n        return bodyA.bounds.min.x - bodyB.bounds.min.x;\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * The array of `Matter.Body` between which the detector finds collisions.\n     * \n     * _Note:_ The order of bodies in this array _is not fixed_ and will be continually managed by the detector.\n     * @property bodies\n     * @type body[]\n     * @default []\n     */\n\n    /**\n     * Optional. A `Matter.Pairs` object from which previous collision objects may be reused. Intended for internal `Matter.Engine` usage.\n     * @property pairs\n     * @type {pairs|null}\n     * @default null\n     */\n\n})();\n\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Plugin` module contains functions for registering and installing plugins on modules.\n*\n* @class Plugin\n*/\n\nvar Plugin = {};\n\nmodule.exports = Plugin;\n\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    Plugin._registry = {};\n\n    /**\n     * Registers a plugin object so it can be resolved later by name.\n     * @method register\n     * @param plugin {} The plugin to register.\n     * @return {object} The plugin.\n     */\n    Plugin.register = function(plugin) {\n        if (!Plugin.isPlugin(plugin)) {\n            Common.warn('Plugin.register:', Plugin.toString(plugin), 'does not implement all required fields.');\n        }\n\n        if (plugin.name in Plugin._registry) {\n            var registered = Plugin._registry[plugin.name],\n                pluginVersion = Plugin.versionParse(plugin.version).number,\n                registeredVersion = Plugin.versionParse(registered.version).number;\n\n            if (pluginVersion > registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'was upgraded to', Plugin.toString(plugin));\n                Plugin._registry[plugin.name] = plugin;\n            } else if (pluginVersion < registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'can not be downgraded to', Plugin.toString(plugin));\n            } else if (plugin !== registered) {\n                Common.warn('Plugin.register:', Plugin.toString(plugin), 'is already registered to different plugin object');\n            }\n        } else {\n            Plugin._registry[plugin.name] = plugin;\n        }\n\n        return plugin;\n    };\n\n    /**\n     * Resolves a dependency to a plugin object from the registry if it exists. \n     * The `dependency` may contain a version, but only the name matters when resolving.\n     * @method resolve\n     * @param dependency {string} The dependency.\n     * @return {object} The plugin if resolved, otherwise `undefined`.\n     */\n    Plugin.resolve = function(dependency) {\n        return Plugin._registry[Plugin.dependencyParse(dependency).name];\n    };\n\n    /**\n     * Returns a pretty printed plugin name and version.\n     * @method toString\n     * @param plugin {} The plugin.\n     * @return {string} Pretty printed plugin name and version.\n     */\n    Plugin.toString = function(plugin) {\n        return typeof plugin === 'string' ? plugin : (plugin.name || 'anonymous') + '@' + (plugin.version || plugin.range || '0.0.0');\n    };\n\n    /**\n     * Returns `true` if the object meets the minimum standard to be considered a plugin.\n     * This means it must define the following properties:\n     * - `name`\n     * - `version`\n     * - `install`\n     * @method isPlugin\n     * @param obj {} The obj to test.\n     * @return {boolean} `true` if the object can be considered a plugin otherwise `false`.\n     */\n    Plugin.isPlugin = function(obj) {\n        return obj && obj.name && obj.version && obj.install;\n    };\n\n    /**\n     * Returns `true` if a plugin with the given `name` been installed on `module`.\n     * @method isUsed\n     * @param module {} The module.\n     * @param name {string} The plugin name.\n     * @return {boolean} `true` if a plugin with the given `name` been installed on `module`, otherwise `false`.\n     */\n    Plugin.isUsed = function(module, name) {\n        return module.used.indexOf(name) > -1;\n    };\n\n    /**\n     * Returns `true` if `plugin.for` is applicable to `module` by comparing against `module.name` and `module.version`.\n     * If `plugin.for` is not specified then it is assumed to be applicable.\n     * The value of `plugin.for` is a string of the format `'module-name'` or `'module-name@version'`.\n     * @method isFor\n     * @param plugin {} The plugin.\n     * @param module {} The module.\n     * @return {boolean} `true` if `plugin.for` is applicable to `module`, otherwise `false`.\n     */\n    Plugin.isFor = function(plugin, module) {\n        var parsed = plugin.for && Plugin.dependencyParse(plugin.for);\n        return !plugin.for || (module.name === parsed.name && Plugin.versionSatisfies(module.version, parsed.range));\n    };\n\n    /**\n     * Installs the plugins by calling `plugin.install` on each plugin specified in `plugins` if passed, otherwise `module.uses`.\n     * For installing plugins on `Matter` see the convenience function `Matter.use`.\n     * Plugins may be specified either by their name or a reference to the plugin object.\n     * Plugins themselves may specify further dependencies, but each plugin is installed only once.\n     * Order is important, a topological sort is performed to find the best resulting order of installation.\n     * This sorting attempts to satisfy every dependency's requested ordering, but may not be exact in all cases.\n     * This function logs the resulting status of each dependency in the console, along with any warnings.\n     * - A green tick ✅ indicates a dependency was resolved and installed.\n     * - An orange diamond 🔶 indicates a dependency was resolved but a warning was thrown for it or one if its dependencies.\n     * - A red cross ❌ indicates a dependency could not be resolved.\n     * Avoid calling this function multiple times on the same module unless you intend to manually control installation order.\n     * @method use\n     * @param module {} The module install plugins on.\n     * @param [plugins=module.uses] {} The plugins to install on module (optional, defaults to `module.uses`).\n     */\n    Plugin.use = function(module, plugins) {\n        module.uses = (module.uses || []).concat(plugins || []);\n\n        if (module.uses.length === 0) {\n            Common.warn('Plugin.use:', Plugin.toString(module), 'does not specify any dependencies to install.');\n            return;\n        }\n\n        var dependencies = Plugin.dependencies(module),\n            sortedDependencies = Common.topologicalSort(dependencies),\n            status = [];\n\n        for (var i = 0; i < sortedDependencies.length; i += 1) {\n            if (sortedDependencies[i] === module.name) {\n                continue;\n            }\n\n            var plugin = Plugin.resolve(sortedDependencies[i]);\n\n            if (!plugin) {\n                status.push('❌ ' + sortedDependencies[i]);\n                continue;\n            }\n\n            if (Plugin.isUsed(module, plugin.name)) {\n                continue;\n            }\n\n            if (!Plugin.isFor(plugin, module)) {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'is for', plugin.for, 'but installed on', Plugin.toString(module) + '.');\n                plugin._warned = true;\n            }\n\n            if (plugin.install) {\n                plugin.install(module);\n            } else {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'does not specify an install function.');\n                plugin._warned = true;\n            }\n\n            if (plugin._warned) {\n                status.push('🔶 ' + Plugin.toString(plugin));\n                delete plugin._warned;\n            } else {\n                status.push('✅ ' + Plugin.toString(plugin));\n            }\n\n            module.used.push(plugin.name);\n        }\n\n        if (status.length > 0) {\n            Common.info(status.join('  '));\n        }\n    };\n\n    /**\n     * Recursively finds all of a module's dependencies and returns a flat dependency graph.\n     * @method dependencies\n     * @param module {} The module.\n     * @return {object} A dependency graph.\n     */\n    Plugin.dependencies = function(module, tracked) {\n        var parsedBase = Plugin.dependencyParse(module),\n            name = parsedBase.name;\n\n        tracked = tracked || {};\n\n        if (name in tracked) {\n            return;\n        }\n\n        module = Plugin.resolve(module) || module;\n\n        tracked[name] = Common.map(module.uses || [], function(dependency) {\n            if (Plugin.isPlugin(dependency)) {\n                Plugin.register(dependency);\n            }\n\n            var parsed = Plugin.dependencyParse(dependency),\n                resolved = Plugin.resolve(dependency);\n\n            if (resolved && !Plugin.versionSatisfies(resolved.version, parsed.range)) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(resolved), 'does not satisfy',\n                    Plugin.toString(parsed), 'used by', Plugin.toString(parsedBase) + '.'\n                );\n\n                resolved._warned = true;\n                module._warned = true;\n            } else if (!resolved) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(dependency), 'used by',\n                    Plugin.toString(parsedBase), 'could not be resolved.'\n                );\n\n                module._warned = true;\n            }\n\n            return parsed.name;\n        });\n\n        for (var i = 0; i < tracked[name].length; i += 1) {\n            Plugin.dependencies(tracked[name][i], tracked);\n        }\n\n        return tracked;\n    };\n\n    /**\n     * Parses a dependency string into its components.\n     * The `dependency` is a string of the format `'module-name'` or `'module-name@version'`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * This function can also handle dependencies that are already resolved (e.g. a module object).\n     * @method dependencyParse\n     * @param dependency {string} The dependency of the format `'module-name'` or `'module-name@version'`.\n     * @return {object} The dependency parsed into its components.\n     */\n    Plugin.dependencyParse = function(dependency) {\n        if (Common.isString(dependency)) {\n            var pattern = /^[\\w-]+(@(\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-+]+)?))?$/;\n\n            if (!pattern.test(dependency)) {\n                Common.warn('Plugin.dependencyParse:', dependency, 'is not a valid dependency string.');\n            }\n\n            return {\n                name: dependency.split('@')[0],\n                range: dependency.split('@')[1] || '*'\n            };\n        }\n\n        return {\n            name: dependency.name,\n            range: dependency.range || dependency.version\n        };\n    };\n\n    /**\n     * Parses a version string into its components.  \n     * Versions are strictly of the format `x.y.z` (as in [semver](http://semver.org/)).\n     * Versions may optionally have a prerelease tag in the format `x.y.z-alpha`.\n     * Ranges are a strict subset of [npm ranges](https://docs.npmjs.com/misc/semver#advanced-range-syntax).\n     * Only the following range types are supported:\n     * - Tilde ranges e.g. `~1.2.3`\n     * - Caret ranges e.g. `^1.2.3`\n     * - Greater than ranges e.g. `>1.2.3`\n     * - Greater than or equal ranges e.g. `>=1.2.3`\n     * - Exact version e.g. `1.2.3`\n     * - Any version `*`\n     * @method versionParse\n     * @param range {string} The version string.\n     * @return {object} The version range parsed into its components.\n     */\n    Plugin.versionParse = function(range) {\n        var pattern = /^(\\*)|(\\^|~|>=|>)?\\s*((\\d+)\\.(\\d+)\\.(\\d+))(-[0-9A-Za-z-+]+)?$/;\n\n        if (!pattern.test(range)) {\n            Common.warn('Plugin.versionParse:', range, 'is not a valid version or range.');\n        }\n\n        var parts = pattern.exec(range);\n        var major = Number(parts[4]);\n        var minor = Number(parts[5]);\n        var patch = Number(parts[6]);\n\n        return {\n            isRange: Boolean(parts[1] || parts[2]),\n            version: parts[3],\n            range: range,\n            operator: parts[1] || parts[2] || '',\n            major: major,\n            minor: minor,\n            patch: patch,\n            parts: [major, minor, patch],\n            prerelease: parts[7],\n            number: major * 1e8 + minor * 1e4 + patch\n        };\n    };\n\n    /**\n     * Returns `true` if `version` satisfies the given `range`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * If a version or range is not specified, then any version (`*`) is assumed to satisfy.\n     * @method versionSatisfies\n     * @param version {string} The version string.\n     * @param range {string} The range string.\n     * @return {boolean} `true` if `version` satisfies `range`, otherwise `false`.\n     */\n    Plugin.versionSatisfies = function(version, range) {\n        range = range || '*';\n\n        var r = Plugin.versionParse(range),\n            v = Plugin.versionParse(version);\n\n        if (r.isRange) {\n            if (r.operator === '*' || version === '*') {\n                return true;\n            }\n\n            if (r.operator === '>') {\n                return v.number > r.number;\n            }\n\n            if (r.operator === '>=') {\n                return v.number >= r.number;\n            }\n\n            if (r.operator === '~') {\n                return v.major === r.major && v.minor === r.minor && v.patch >= r.patch;\n            }\n\n            if (r.operator === '^') {\n                if (r.major > 0) {\n                    return v.major === r.major && v.number >= r.number;\n                }\n\n                if (r.minor > 0) {\n                    return v.minor === r.minor && v.patch >= r.patch;\n                }\n\n                return v.patch === r.patch;\n            }\n        }\n\n        return version === range || version === '*';\n    };\n\n})();\n\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Render` module is a simple canvas based renderer for visualising instances of `Matter.Engine`.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* It includes a number of drawing options including wireframe, vector with support for sprites and viewports.\n*\n* @class Render\n*/\n\nvar Render = {};\n\nmodule.exports = Render;\n\nvar Common = __webpack_require__(0);\nvar Composite = __webpack_require__(5);\nvar Bounds = __webpack_require__(1);\nvar Events = __webpack_require__(4);\nvar Vector = __webpack_require__(2);\nvar Mouse = __webpack_require__(13);\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame\n                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\n\n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame\n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    Render._goodFps = 30;\n    Render._goodDelta = 1000 / 60;\n\n    /**\n     * Creates a new renderer. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {render} A new renderer\n     */\n    Render.create = function(options) {\n        var defaults = {\n            controller: Render,\n            engine: null,\n            element: null,\n            canvas: null,\n            mouse: null,\n            frameRequestId: null,\n            timing: {\n                historySize: 60,\n                delta: 0,\n                deltaHistory: [],\n                lastTime: 0,\n                lastTimestamp: 0,\n                lastElapsed: 0,\n                timestampElapsed: 0,\n                timestampElapsedHistory: [],\n                engineDeltaHistory: [],\n                engineElapsedHistory: [],\n                elapsedHistory: []\n            },\n            options: {\n                width: 800,\n                height: 600,\n                pixelRatio: 1,\n                background: '#14151f',\n                wireframeBackground: '#14151f',\n                hasBounds: !!options.bounds,\n                enabled: true,\n                wireframes: true,\n                showSleeping: true,\n                showDebug: false,\n                showStats: false,\n                showPerformance: false,\n                showBounds: false,\n                showVelocity: false,\n                showCollisions: false,\n                showSeparations: false,\n                showAxes: false,\n                showPositions: false,\n                showAngleIndicator: false,\n                showIds: false,\n                showVertexNumbers: false,\n                showConvexHulls: false,\n                showInternalEdges: false,\n                showMousePosition: false\n            }\n        };\n\n        var render = Common.extend(defaults, options);\n\n        if (render.canvas) {\n            render.canvas.width = render.options.width || render.canvas.width;\n            render.canvas.height = render.options.height || render.canvas.height;\n        }\n\n        render.mouse = options.mouse;\n        render.engine = options.engine;\n        render.canvas = render.canvas || _createCanvas(render.options.width, render.options.height);\n        render.context = render.canvas.getContext('2d');\n        render.textures = {};\n\n        render.bounds = render.bounds || {\n            min: {\n                x: 0,\n                y: 0\n            },\n            max: {\n                x: render.canvas.width,\n                y: render.canvas.height\n            }\n        };\n\n        // for temporary back compatibility only\n        render.options.showBroadphase = false;\n\n        if (render.options.pixelRatio !== 1) {\n            Render.setPixelRatio(render, render.options.pixelRatio);\n        }\n\n        if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n        } else if (!render.canvas.parentNode) {\n            Common.log('Render.create: options.element was undefined, render.canvas was created but not appended', 'warn');\n        }\n\n        return render;\n    };\n\n    /**\n     * Continuously updates the render canvas on the `requestAnimationFrame` event.\n     * @method run\n     * @param {render} render\n     */\n    Render.run = function(render) {\n        (function loop(time){\n            render.frameRequestId = _requestAnimationFrame(loop);\n            \n            _updateTiming(render, time);\n\n            Render.world(render, time);\n\n            if (render.options.showStats || render.options.showDebug) {\n                Render.stats(render, render.context, time);\n            }\n\n            if (render.options.showPerformance || render.options.showDebug) {\n                Render.performance(render, render.context, time);\n            }\n        })();\n    };\n\n    /**\n     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n     * @method stop\n     * @param {render} render\n     */\n    Render.stop = function(render) {\n        _cancelAnimationFrame(render.frameRequestId);\n    };\n\n    /**\n     * Sets the pixel ratio of the renderer and updates the canvas.\n     * To automatically detect the correct ratio, pass the string `'auto'` for `pixelRatio`.\n     * @method setPixelRatio\n     * @param {render} render\n     * @param {number} pixelRatio\n     */\n    Render.setPixelRatio = function(render, pixelRatio) {\n        var options = render.options,\n            canvas = render.canvas;\n\n        if (pixelRatio === 'auto') {\n            pixelRatio = _getPixelRatio(canvas);\n        }\n\n        options.pixelRatio = pixelRatio;\n        canvas.setAttribute('data-pixel-ratio', pixelRatio);\n        canvas.width = options.width * pixelRatio;\n        canvas.height = options.height * pixelRatio;\n        canvas.style.width = options.width + 'px';\n        canvas.style.height = options.height + 'px';\n    };\n\n    /**\n     * Positions and sizes the viewport around the given object bounds.\n     * Objects must have at least one of the following properties:\n     * - `object.bounds`\n     * - `object.position`\n     * - `object.min` and `object.max`\n     * - `object.x` and `object.y`\n     * @method lookAt\n     * @param {render} render\n     * @param {object[]} objects\n     * @param {vector} [padding]\n     * @param {bool} [center=true]\n     */\n    Render.lookAt = function(render, objects, padding, center) {\n        center = typeof center !== 'undefined' ? center : true;\n        objects = Common.isArray(objects) ? objects : [objects];\n        padding = padding || {\n            x: 0,\n            y: 0\n        };\n\n        // find bounds of all objects\n        var bounds = {\n            min: { x: Infinity, y: Infinity },\n            max: { x: -Infinity, y: -Infinity }\n        };\n\n        for (var i = 0; i < objects.length; i += 1) {\n            var object = objects[i],\n                min = object.bounds ? object.bounds.min : (object.min || object.position || object),\n                max = object.bounds ? object.bounds.max : (object.max || object.position || object);\n\n            if (min && max) {\n                if (min.x < bounds.min.x)\n                    bounds.min.x = min.x;\n\n                if (max.x > bounds.max.x)\n                    bounds.max.x = max.x;\n\n                if (min.y < bounds.min.y)\n                    bounds.min.y = min.y;\n\n                if (max.y > bounds.max.y)\n                    bounds.max.y = max.y;\n            }\n        }\n\n        // find ratios\n        var width = (bounds.max.x - bounds.min.x) + 2 * padding.x,\n            height = (bounds.max.y - bounds.min.y) + 2 * padding.y,\n            viewHeight = render.canvas.height,\n            viewWidth = render.canvas.width,\n            outerRatio = viewWidth / viewHeight,\n            innerRatio = width / height,\n            scaleX = 1,\n            scaleY = 1;\n\n        // find scale factor\n        if (innerRatio > outerRatio) {\n            scaleY = innerRatio / outerRatio;\n        } else {\n            scaleX = outerRatio / innerRatio;\n        }\n\n        // enable bounds\n        render.options.hasBounds = true;\n\n        // position and size\n        render.bounds.min.x = bounds.min.x;\n        render.bounds.max.x = bounds.min.x + width * scaleX;\n        render.bounds.min.y = bounds.min.y;\n        render.bounds.max.y = bounds.min.y + height * scaleY;\n\n        // center\n        if (center) {\n            render.bounds.min.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.max.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.min.y += height * 0.5 - (height * scaleY) * 0.5;\n            render.bounds.max.y += height * 0.5 - (height * scaleY) * 0.5;\n        }\n\n        // padding\n        render.bounds.min.x -= padding.x;\n        render.bounds.max.x -= padding.x;\n        render.bounds.min.y -= padding.y;\n        render.bounds.max.y -= padding.y;\n\n        // update mouse\n        if (render.mouse) {\n            Mouse.setScale(render.mouse, {\n                x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n                y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n            });\n\n            Mouse.setOffset(render.mouse, render.bounds.min);\n        }\n    };\n\n    /**\n     * Applies viewport transforms based on `render.bounds` to a render context.\n     * @method startViewTransform\n     * @param {render} render\n     */\n    Render.startViewTransform = function(render) {\n        var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n            boundsHeight = render.bounds.max.y - render.bounds.min.y,\n            boundsScaleX = boundsWidth / render.options.width,\n            boundsScaleY = boundsHeight / render.options.height;\n\n        render.context.setTransform(\n            render.options.pixelRatio / boundsScaleX, 0, 0, \n            render.options.pixelRatio / boundsScaleY, 0, 0\n        );\n        \n        render.context.translate(-render.bounds.min.x, -render.bounds.min.y);\n    };\n\n    /**\n     * Resets all transforms on the render context.\n     * @method endViewTransform\n     * @param {render} render\n     */\n    Render.endViewTransform = function(render) {\n        render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n    };\n\n    /**\n     * Renders the given `engine`'s `Matter.World` object.\n     * This is the entry point for all rendering and should be called every time the scene changes.\n     * @method world\n     * @param {render} render\n     */\n    Render.world = function(render, time) {\n        var startTime = Common.now(),\n            engine = render.engine,\n            world = engine.world,\n            canvas = render.canvas,\n            context = render.context,\n            options = render.options,\n            timing = render.timing;\n\n        var allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world),\n            background = options.wireframes ? options.wireframeBackground : options.background,\n            bodies = [],\n            constraints = [],\n            i;\n\n        var event = {\n            timestamp: engine.timing.timestamp\n        };\n\n        Events.trigger(render, 'beforeRender', event);\n\n        // apply background if it has changed\n        if (render.currentBackground !== background)\n            _applyBackground(render, background);\n\n        // clear the canvas with a transparent fill, to allow the canvas background to show\n        context.globalCompositeOperation = 'source-in';\n        context.fillStyle = \"transparent\";\n        context.fillRect(0, 0, canvas.width, canvas.height);\n        context.globalCompositeOperation = 'source-over';\n\n        // handle bounds\n        if (options.hasBounds) {\n            // filter out bodies that are not in view\n            for (i = 0; i < allBodies.length; i++) {\n                var body = allBodies[i];\n                if (Bounds.overlaps(body.bounds, render.bounds))\n                    bodies.push(body);\n            }\n\n            // filter out constraints that are not in view\n            for (i = 0; i < allConstraints.length; i++) {\n                var constraint = allConstraints[i],\n                    bodyA = constraint.bodyA,\n                    bodyB = constraint.bodyB,\n                    pointAWorld = constraint.pointA,\n                    pointBWorld = constraint.pointB;\n\n                if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n                if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n\n                if (!pointAWorld || !pointBWorld)\n                    continue;\n\n                if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld))\n                    constraints.push(constraint);\n            }\n\n            // transform the view\n            Render.startViewTransform(render);\n\n            // update mouse\n            if (render.mouse) {\n                Mouse.setScale(render.mouse, {\n                    x: (render.bounds.max.x - render.bounds.min.x) / render.options.width,\n                    y: (render.bounds.max.y - render.bounds.min.y) / render.options.height\n                });\n\n                Mouse.setOffset(render.mouse, render.bounds.min);\n            }\n        } else {\n            constraints = allConstraints;\n            bodies = allBodies;\n\n            if (render.options.pixelRatio !== 1) {\n                render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n            }\n        }\n\n        if (!options.wireframes || (engine.enableSleeping && options.showSleeping)) {\n            // fully featured rendering of bodies\n            Render.bodies(render, bodies, context);\n        } else {\n            if (options.showConvexHulls)\n                Render.bodyConvexHulls(render, bodies, context);\n\n            // optimised method for wireframes only\n            Render.bodyWireframes(render, bodies, context);\n        }\n\n        if (options.showBounds)\n            Render.bodyBounds(render, bodies, context);\n\n        if (options.showAxes || options.showAngleIndicator)\n            Render.bodyAxes(render, bodies, context);\n\n        if (options.showPositions)\n            Render.bodyPositions(render, bodies, context);\n\n        if (options.showVelocity)\n            Render.bodyVelocity(render, bodies, context);\n\n        if (options.showIds)\n            Render.bodyIds(render, bodies, context);\n\n        if (options.showSeparations)\n            Render.separations(render, engine.pairs.list, context);\n\n        if (options.showCollisions)\n            Render.collisions(render, engine.pairs.list, context);\n\n        if (options.showVertexNumbers)\n            Render.vertexNumbers(render, bodies, context);\n\n        if (options.showMousePosition)\n            Render.mousePosition(render, render.mouse, context);\n\n        Render.constraints(constraints, context);\n\n        if (options.hasBounds) {\n            // revert view transforms\n            Render.endViewTransform(render);\n        }\n\n        Events.trigger(render, 'afterRender', event);\n\n        // log the time elapsed computing this update\n        timing.lastElapsed = Common.now() - startTime;\n    };\n\n    /**\n     * Renders statistics about the engine and world useful for debugging.\n     * @private\n     * @method stats\n     * @param {render} render\n     * @param {RenderingContext} context\n     * @param {Number} time\n     */\n    Render.stats = function(render, context, time) {\n        var engine = render.engine,\n            world = engine.world,\n            bodies = Composite.allBodies(world),\n            parts = 0,\n            width = 55,\n            height = 44,\n            x = 0,\n            y = 0;\n        \n        // count parts\n        for (var i = 0; i < bodies.length; i += 1) {\n            parts += bodies[i].parts.length;\n        }\n\n        // sections\n        var sections = {\n            'Part': parts,\n            'Body': bodies.length,\n            'Cons': Composite.allConstraints(world).length,\n            'Comp': Composite.allComposites(world).length,\n            'Pair': engine.pairs.list.length\n        };\n\n        // background\n        context.fillStyle = '#0e0f19';\n        context.fillRect(x, y, width * 5.5, height);\n\n        context.font = '12px Arial';\n        context.textBaseline = 'top';\n        context.textAlign = 'right';\n\n        // sections\n        for (var key in sections) {\n            var section = sections[key];\n            // label\n            context.fillStyle = '#aaa';\n            context.fillText(key, x + width, y + 8);\n\n            // value\n            context.fillStyle = '#eee';\n            context.fillText(section, x + width, y + 26);\n\n            x += width;\n        }\n    };\n\n    /**\n     * Renders engine and render performance information.\n     * @private\n     * @method performance\n     * @param {render} render\n     * @param {RenderingContext} context\n     */\n    Render.performance = function(render, context) {\n        var engine = render.engine,\n            timing = render.timing,\n            deltaHistory = timing.deltaHistory,\n            elapsedHistory = timing.elapsedHistory,\n            timestampElapsedHistory = timing.timestampElapsedHistory,\n            engineDeltaHistory = timing.engineDeltaHistory,\n            engineElapsedHistory = timing.engineElapsedHistory,\n            lastEngineDelta = engine.timing.lastDelta;\n        \n        var deltaMean = _mean(deltaHistory),\n            elapsedMean = _mean(elapsedHistory),\n            engineDeltaMean = _mean(engineDeltaHistory),\n            engineElapsedMean = _mean(engineElapsedHistory),\n            timestampElapsedMean = _mean(timestampElapsedHistory),\n            rateMean = (timestampElapsedMean / deltaMean) || 0,\n            fps = (1000 / deltaMean) || 0;\n\n        var graphHeight = 4,\n            gap = 12,\n            width = 60,\n            height = 34,\n            x = 10,\n            y = 69;\n\n        // background\n        context.fillStyle = '#0e0f19';\n        context.fillRect(0, 50, gap * 4 + width * 5 + 22, height);\n\n        // show FPS\n        Render.status(\n            context, x, y, width, graphHeight, deltaHistory.length, \n            Math.round(fps) + ' fps', \n            fps / Render._goodFps,\n            function(i) { return (deltaHistory[i] / deltaMean) - 1; }\n        );\n\n        // show engine delta\n        Render.status(\n            context, x + gap + width, y, width, graphHeight, engineDeltaHistory.length,\n            lastEngineDelta.toFixed(2) + ' dt', \n            Render._goodDelta / lastEngineDelta,\n            function(i) { return (engineDeltaHistory[i] / engineDeltaMean) - 1; }\n        );\n\n        // show engine update time\n        Render.status(\n            context, x + (gap + width) * 2, y, width, graphHeight, engineElapsedHistory.length,\n            engineElapsedMean.toFixed(2) + ' ut', \n            1 - (engineElapsedMean / Render._goodFps),\n            function(i) { return (engineElapsedHistory[i] / engineElapsedMean) - 1; }\n        );\n\n        // show render time\n        Render.status(\n            context, x + (gap + width) * 3, y, width, graphHeight, elapsedHistory.length,\n            elapsedMean.toFixed(2) + ' rt', \n            1 - (elapsedMean / Render._goodFps),\n            function(i) { return (elapsedHistory[i] / elapsedMean) - 1; }\n        );\n\n        // show effective speed\n        Render.status(\n            context, x + (gap + width) * 4, y, width, graphHeight, timestampElapsedHistory.length, \n            rateMean.toFixed(2) + ' x', \n            rateMean * rateMean * rateMean,\n            function(i) { return (((timestampElapsedHistory[i] / deltaHistory[i]) / rateMean) || 0) - 1; }\n        );\n    };\n\n    /**\n     * Renders a label, indicator and a chart.\n     * @private\n     * @method status\n     * @param {RenderingContext} context\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {number} count\n     * @param {string} label\n     * @param {string} indicator\n     * @param {function} plotY\n     */\n    Render.status = function(context, x, y, width, height, count, label, indicator, plotY) {\n        // background\n        context.strokeStyle = '#888';\n        context.fillStyle = '#444';\n        context.lineWidth = 1;\n        context.fillRect(x, y + 7, width, 1);\n\n        // chart\n        context.beginPath();\n        context.moveTo(x, y + 7 - height * Common.clamp(0.4 * plotY(0), -2, 2));\n        for (var i = 0; i < width; i += 1) {\n            context.lineTo(x + i, y + 7 - (i < count ? height * Common.clamp(0.4 * plotY(i), -2, 2) : 0));\n        }\n        context.stroke();\n\n        // indicator\n        context.fillStyle = 'hsl(' + Common.clamp(25 + 95 * indicator, 0, 120) + ',100%,60%)';\n        context.fillRect(x, y - 7, 4, 4);\n\n        // label\n        context.font = '12px Arial';\n        context.textBaseline = 'middle';\n        context.textAlign = 'right';\n        context.fillStyle = '#eee';\n        context.fillText(label, x + width, y - 5);\n    };\n\n    /**\n     * Description\n     * @private\n     * @method constraints\n     * @param {constraint[]} constraints\n     * @param {RenderingContext} context\n     */\n    Render.constraints = function(constraints, context) {\n        var c = context;\n\n        for (var i = 0; i < constraints.length; i++) {\n            var constraint = constraints[i];\n\n            if (!constraint.render.visible || !constraint.pointA || !constraint.pointB)\n                continue;\n\n            var bodyA = constraint.bodyA,\n                bodyB = constraint.bodyB,\n                start,\n                end;\n\n            if (bodyA) {\n                start = Vector.add(bodyA.position, constraint.pointA);\n            } else {\n                start = constraint.pointA;\n            }\n\n            if (constraint.render.type === 'pin') {\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n            } else {\n                if (bodyB) {\n                    end = Vector.add(bodyB.position, constraint.pointB);\n                } else {\n                    end = constraint.pointB;\n                }\n\n                c.beginPath();\n                c.moveTo(start.x, start.y);\n\n                if (constraint.render.type === 'spring') {\n                    var delta = Vector.sub(end, start),\n                        normal = Vector.perp(Vector.normalise(delta)),\n                        coils = Math.ceil(Common.clamp(constraint.length / 5, 12, 20)),\n                        offset;\n\n                    for (var j = 1; j < coils; j += 1) {\n                        offset = j % 2 === 0 ? 1 : -1;\n\n                        c.lineTo(\n                            start.x + delta.x * (j / coils) + normal.x * offset * 4,\n                            start.y + delta.y * (j / coils) + normal.y * offset * 4\n                        );\n                    }\n                }\n\n                c.lineTo(end.x, end.y);\n            }\n\n            if (constraint.render.lineWidth) {\n                c.lineWidth = constraint.render.lineWidth;\n                c.strokeStyle = constraint.render.strokeStyle;\n                c.stroke();\n            }\n\n            if (constraint.render.anchors) {\n                c.fillStyle = constraint.render.strokeStyle;\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.arc(end.x, end.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n                c.fill();\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method bodies\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodies = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            showInternalEdges = options.showInternalEdges || !options.wireframes,\n            body,\n            part,\n            i,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                if (!part.render.visible)\n                    continue;\n\n                if (options.showSleeping && body.isSleeping) {\n                    c.globalAlpha = 0.5 * part.render.opacity;\n                } else if (part.render.opacity !== 1) {\n                    c.globalAlpha = part.render.opacity;\n                }\n\n                if (part.render.sprite && part.render.sprite.texture && !options.wireframes) {\n                    // part sprite\n                    var sprite = part.render.sprite,\n                        texture = _getTexture(render, sprite.texture);\n\n                    c.translate(part.position.x, part.position.y);\n                    c.rotate(part.angle);\n\n                    c.drawImage(\n                        texture,\n                        texture.width * -sprite.xOffset * sprite.xScale,\n                        texture.height * -sprite.yOffset * sprite.yScale,\n                        texture.width * sprite.xScale,\n                        texture.height * sprite.yScale\n                    );\n\n                    // revert translation, hopefully faster than save / restore\n                    c.rotate(-part.angle);\n                    c.translate(-part.position.x, -part.position.y);\n                } else {\n                    // part polygon\n                    if (part.circleRadius) {\n                        c.beginPath();\n                        c.arc(part.position.x, part.position.y, part.circleRadius, 0, 2 * Math.PI);\n                    } else {\n                        c.beginPath();\n                        c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                        for (var j = 1; j < part.vertices.length; j++) {\n                            if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                                c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                            } else {\n                                c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                            }\n\n                            if (part.vertices[j].isInternal && !showInternalEdges) {\n                                c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                            }\n                        }\n\n                        c.lineTo(part.vertices[0].x, part.vertices[0].y);\n                        c.closePath();\n                    }\n\n                    if (!options.wireframes) {\n                        c.fillStyle = part.render.fillStyle;\n\n                        if (part.render.lineWidth) {\n                            c.lineWidth = part.render.lineWidth;\n                            c.strokeStyle = part.render.strokeStyle;\n                            c.stroke();\n                        }\n\n                        c.fill();\n                    } else {\n                        c.lineWidth = 1;\n                        c.strokeStyle = '#bbb';\n                        c.stroke();\n                    }\n                }\n\n                c.globalAlpha = 1;\n            }\n        }\n    };\n\n    /**\n     * Optimised method for drawing body wireframes in one pass\n     * @private\n     * @method bodyWireframes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyWireframes = function(render, bodies, context) {\n        var c = context,\n            showInternalEdges = render.options.showInternalEdges,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render all bodies\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                for (j = 1; j < part.vertices.length; j++) {\n                    if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                        c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                    } else {\n                        c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                    }\n\n                    if (part.vertices[j].isInternal && !showInternalEdges) {\n                        c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                    }\n                }\n\n                c.lineTo(part.vertices[0].x, part.vertices[0].y);\n            }\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = '#bbb';\n        c.stroke();\n    };\n\n    /**\n     * Optimised method for drawing body convex hull wireframes in one pass\n     * @private\n     * @method bodyConvexHulls\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyConvexHulls = function(render, bodies, context) {\n        var c = context,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render convex hulls\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible || body.parts.length === 1)\n                continue;\n\n            c.moveTo(body.vertices[0].x, body.vertices[0].y);\n\n            for (j = 1; j < body.vertices.length; j++) {\n                c.lineTo(body.vertices[j].x, body.vertices[j].y);\n            }\n\n            c.lineTo(body.vertices[0].x, body.vertices[0].y);\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = 'rgba(255,255,255,0.2)';\n        c.stroke();\n    };\n\n    /**\n     * Renders body vertex numbers.\n     * @private\n     * @method vertexNumbers\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.vertexNumbers = function(render, bodies, context) {\n        var c = context,\n            i,\n            j,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            var parts = bodies[i].parts;\n            for (k = parts.length > 1 ? 1 : 0; k < parts.length; k++) {\n                var part = parts[k];\n                for (j = 0; j < part.vertices.length; j++) {\n                    c.fillStyle = 'rgba(255,255,255,0.2)';\n                    c.fillText(i + '_' + j, part.position.x + (part.vertices[j].x - part.position.x) * 0.8, part.position.y + (part.vertices[j].y - part.position.y) * 0.8);\n                }\n            }\n        }\n    };\n\n    /**\n     * Renders mouse position.\n     * @private\n     * @method mousePosition\n     * @param {render} render\n     * @param {mouse} mouse\n     * @param {RenderingContext} context\n     */\n    Render.mousePosition = function(render, mouse, context) {\n        var c = context;\n        c.fillStyle = 'rgba(255,255,255,0.8)';\n        c.fillText(mouse.position.x + '  ' + mouse.position.y, mouse.position.x + 5, mouse.position.y - 5);\n    };\n\n    /**\n     * Draws body bounds\n     * @private\n     * @method bodyBounds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyBounds = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.render.visible) {\n                var parts = bodies[i].parts;\n                for (var j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    var part = parts[j];\n                    c.rect(part.bounds.min.x, part.bounds.min.y, part.bounds.max.x - part.bounds.min.x, part.bounds.max.y - part.bounds.min.y);\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,255,255,0.08)';\n        } else {\n            c.strokeStyle = 'rgba(0,0,0,0.1)';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Draws body angle indicators and axes\n     * @private\n     * @method bodyAxes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyAxes = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                parts = body.parts;\n\n            if (!body.render.visible)\n                continue;\n\n            if (options.showAxes) {\n                // render all axes\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        var axis = part.axes[k];\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo(part.position.x + axis.x * 20, part.position.y + axis.y * 20);\n                    }\n                }\n            } else {\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        // render a single axis indicator\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo((part.vertices[0].x + part.vertices[part.vertices.length-1].x) / 2,\n                            (part.vertices[0].y + part.vertices[part.vertices.length-1].y) / 2);\n                    }\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'indianred';\n            c.lineWidth = 1;\n        } else {\n            c.strokeStyle = 'rgba(255, 255, 255, 0.4)';\n            c.globalCompositeOperation = 'overlay';\n            c.lineWidth = 2;\n        }\n\n        c.stroke();\n        c.globalCompositeOperation = 'source-over';\n    };\n\n    /**\n     * Draws body positions\n     * @private\n     * @method bodyPositions\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyPositions = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            body,\n            part,\n            i,\n            k;\n\n        c.beginPath();\n\n        // render current positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n                c.arc(part.position.x, part.position.y, 3, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'indianred';\n        } else {\n            c.fillStyle = 'rgba(0,0,0,0.5)';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render previous positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (body.render.visible) {\n                c.arc(body.positionPrev.x, body.positionPrev.y, 2, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        c.fillStyle = 'rgba(255,165,0,0.8)';\n        c.fill();\n    };\n\n    /**\n     * Draws body velocity\n     * @private\n     * @method bodyVelocity\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyVelocity = function(render, bodies, context) {\n        var c = context;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            c.moveTo(body.position.x, body.position.y);\n            c.lineTo(body.position.x + (body.position.x - body.positionPrev.x) * 2, body.position.y + (body.position.y - body.positionPrev.y) * 2);\n        }\n\n        c.lineWidth = 3;\n        c.strokeStyle = 'cornflowerblue';\n        c.stroke();\n    };\n\n    /**\n     * Draws body ids\n     * @private\n     * @method bodyIds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyIds = function(render, bodies, context) {\n        var c = context,\n            i,\n            j;\n\n        for (i = 0; i < bodies.length; i++) {\n            if (!bodies[i].render.visible)\n                continue;\n\n            var parts = bodies[i].parts;\n            for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                var part = parts[j];\n                c.font = \"12px Arial\";\n                c.fillStyle = 'rgba(255,255,255,0.5)';\n                c.fillText(part.id, part.position.x + 10, part.position.y - 10);\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method collisions\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.collisions = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render collision positions\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            for (j = 0; j < pair.activeContacts.length; j++) {\n                var contact = pair.activeContacts[j],\n                    vertex = contact.vertex;\n                c.rect(vertex.x - 1.5, vertex.y - 1.5, 3.5, 3.5);\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'rgba(255,255,255,0.7)';\n        } else {\n            c.fillStyle = 'orange';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render collision normals\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n\n            if (pair.activeContacts.length > 0) {\n                var normalPosX = pair.activeContacts[0].vertex.x,\n                    normalPosY = pair.activeContacts[0].vertex.y;\n\n                if (pair.activeContacts.length === 2) {\n                    normalPosX = (pair.activeContacts[0].vertex.x + pair.activeContacts[1].vertex.x) / 2;\n                    normalPosY = (pair.activeContacts[0].vertex.y + pair.activeContacts[1].vertex.y) / 2;\n                }\n\n                if (collision.bodyB === collision.supports[0].body || collision.bodyA.isStatic === true) {\n                    c.moveTo(normalPosX - collision.normal.x * 8, normalPosY - collision.normal.y * 8);\n                } else {\n                    c.moveTo(normalPosX + collision.normal.x * 8, normalPosY + collision.normal.y * 8);\n                }\n\n                c.lineTo(normalPosX, normalPosY);\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.7)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method separations\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.separations = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render separations\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.bodyA;\n            bodyB = collision.bodyB;\n\n            var k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyB.isStatic) k = 0;\n\n            c.moveTo(bodyB.position.x, bodyB.position.y);\n            c.lineTo(bodyB.position.x - collision.penetration.x * k, bodyB.position.y - collision.penetration.y * k);\n\n            k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyA.isStatic) k = 0;\n\n            c.moveTo(bodyA.position.x, bodyA.position.y);\n            c.lineTo(bodyA.position.x + collision.penetration.x * k, bodyA.position.y + collision.penetration.y * k);\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.5)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method inspector\n     * @param {inspector} inspector\n     * @param {RenderingContext} context\n     */\n    Render.inspector = function(inspector, context) {\n        var engine = inspector.engine,\n            selected = inspector.selected,\n            render = inspector.render,\n            options = render.options,\n            bounds;\n\n        if (options.hasBounds) {\n            var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n                boundsHeight = render.bounds.max.y - render.bounds.min.y,\n                boundsScaleX = boundsWidth / render.options.width,\n                boundsScaleY = boundsHeight / render.options.height;\n\n            context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n            context.translate(-render.bounds.min.x, -render.bounds.min.y);\n        }\n\n        for (var i = 0; i < selected.length; i++) {\n            var item = selected[i].data;\n\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.9)';\n            context.setLineDash([1,2]);\n\n            switch (item.type) {\n\n            case 'body':\n\n                // render body selections\n                bounds = item.bounds;\n                context.beginPath();\n                context.rect(Math.floor(bounds.min.x - 3), Math.floor(bounds.min.y - 3),\n                    Math.floor(bounds.max.x - bounds.min.x + 6), Math.floor(bounds.max.y - bounds.min.y + 6));\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            case 'constraint':\n\n                // render constraint selections\n                var point = item.pointA;\n                if (item.bodyA)\n                    point = item.pointB;\n                context.beginPath();\n                context.arc(point.x, point.y, 10, 0, 2 * Math.PI);\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            }\n\n            context.setLineDash([]);\n            context.translate(-0.5, -0.5);\n        }\n\n        // render selection region\n        if (inspector.selectStart !== null) {\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.6)';\n            context.fillStyle = 'rgba(255,165,0,0.1)';\n            bounds = inspector.selectBounds;\n            context.beginPath();\n            context.rect(Math.floor(bounds.min.x), Math.floor(bounds.min.y),\n                Math.floor(bounds.max.x - bounds.min.x), Math.floor(bounds.max.y - bounds.min.y));\n            context.closePath();\n            context.stroke();\n            context.fill();\n            context.translate(-0.5, -0.5);\n        }\n\n        if (options.hasBounds)\n            context.setTransform(1, 0, 0, 1, 0, 0);\n    };\n\n    /**\n     * Updates render timing.\n     * @method _updateTiming\n     * @private\n     * @param {render} render\n     * @param {number} time\n     */\n    var _updateTiming = function(render, time) {\n        var engine = render.engine,\n            timing = render.timing,\n            historySize = timing.historySize,\n            timestamp = engine.timing.timestamp;\n\n        timing.delta = time - timing.lastTime || Render._goodDelta;\n        timing.lastTime = time;\n\n        timing.timestampElapsed = timestamp - timing.lastTimestamp || 0;\n        timing.lastTimestamp = timestamp;\n\n        timing.deltaHistory.unshift(timing.delta);\n        timing.deltaHistory.length = Math.min(timing.deltaHistory.length, historySize);\n\n        timing.engineDeltaHistory.unshift(engine.timing.lastDelta);\n        timing.engineDeltaHistory.length = Math.min(timing.engineDeltaHistory.length, historySize);\n\n        timing.timestampElapsedHistory.unshift(timing.timestampElapsed);\n        timing.timestampElapsedHistory.length = Math.min(timing.timestampElapsedHistory.length, historySize);\n\n        timing.engineElapsedHistory.unshift(engine.timing.lastElapsed);\n        timing.engineElapsedHistory.length = Math.min(timing.engineElapsedHistory.length, historySize);\n\n        timing.elapsedHistory.unshift(timing.lastElapsed);\n        timing.elapsedHistory.length = Math.min(timing.elapsedHistory.length, historySize);\n    };\n\n    /**\n     * Returns the mean value of the given numbers.\n     * @method _mean\n     * @private\n     * @param {Number[]} values\n     * @return {Number} the mean of given values\n     */\n    var _mean = function(values) {\n        var result = 0;\n        for (var i = 0; i < values.length; i += 1) {\n            result += values[i];\n        }\n        return (result / values.length) || 0;\n    };\n\n    /**\n     * @method _createCanvas\n     * @private\n     * @param {} width\n     * @param {} height\n     * @return canvas\n     */\n    var _createCanvas = function(width, height) {\n        var canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        canvas.oncontextmenu = function() { return false; };\n        canvas.onselectstart = function() { return false; };\n        return canvas;\n    };\n\n    /**\n     * Gets the pixel ratio of the canvas.\n     * @method _getPixelRatio\n     * @private\n     * @param {HTMLElement} canvas\n     * @return {Number} pixel ratio\n     */\n    var _getPixelRatio = function(canvas) {\n        var context = canvas.getContext('2d'),\n            devicePixelRatio = window.devicePixelRatio || 1,\n            backingStorePixelRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio\n                                      || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio\n                                      || context.backingStorePixelRatio || 1;\n\n        return devicePixelRatio / backingStorePixelRatio;\n    };\n\n    /**\n     * Gets the requested texture (an Image) via its path\n     * @method _getTexture\n     * @private\n     * @param {render} render\n     * @param {string} imagePath\n     * @return {Image} texture\n     */\n    var _getTexture = function(render, imagePath) {\n        var image = render.textures[imagePath];\n\n        if (image)\n            return image;\n\n        image = render.textures[imagePath] = new Image();\n        image.src = imagePath;\n\n        return image;\n    };\n\n    /**\n     * Applies the background to the canvas using CSS.\n     * @method applyBackground\n     * @private\n     * @param {render} render\n     * @param {string} background\n     */\n    var _applyBackground = function(render, background) {\n        var cssBackground = background;\n\n        if (/(jpg|gif|png)$/.test(background))\n            cssBackground = 'url(' + background + ')';\n\n        render.canvas.style.background = cssBackground;\n        render.canvas.style.backgroundSize = \"contain\";\n        render.currentBackground = background;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired before rendering\n    *\n    * @event beforeRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after rendering\n    *\n    * @event afterRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A back-reference to the `Matter.Render` module.\n     *\n     * @property controller\n     * @type render\n     */\n\n    /**\n     * A reference to the `Matter.Engine` instance to be used.\n     *\n     * @property engine\n     * @type engine\n     */\n\n    /**\n     * A reference to the element where the canvas is to be inserted (if `render.canvas` has not been specified)\n     *\n     * @property element\n     * @type HTMLElement\n     * @default null\n     */\n\n    /**\n     * The canvas element to render to. If not specified, one will be created if `render.element` has been specified.\n     *\n     * @property canvas\n     * @type HTMLCanvasElement\n     * @default null\n     */\n\n    /**\n     * A `Bounds` object that specifies the drawing view region.\n     * Rendering will be automatically transformed and scaled to fit within the canvas size (`render.options.width` and `render.options.height`).\n     * This allows for creating views that can pan or zoom around the scene.\n     * You must also set `render.options.hasBounds` to `true` to enable bounded rendering.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n    /**\n     * The 2d rendering context from the `render.canvas` element.\n     *\n     * @property context\n     * @type CanvasRenderingContext2D\n     */\n\n    /**\n     * The sprite texture cache.\n     *\n     * @property textures\n     * @type {}\n     */\n\n    /**\n     * The mouse to render if `render.options.showMousePosition` is enabled.\n     *\n     * @property mouse\n     * @type mouse\n     * @default null\n     */\n\n    /**\n     * The configuration options of the renderer.\n     *\n     * @property options\n     * @type {}\n     */\n\n    /**\n     * The target width in pixels of the `render.canvas` to be created.\n     * See also the `options.pixelRatio` property to change render quality.\n     *\n     * @property options.width\n     * @type number\n     * @default 800\n     */\n\n    /**\n     * The target height in pixels of the `render.canvas` to be created.\n     * See also the `options.pixelRatio` property to change render quality.\n     *\n     * @property options.height\n     * @type number\n     * @default 600\n     */\n\n    /**\n     * The [pixel ratio](https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio) to use when rendering.\n     *\n     * @property options.pixelRatio\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A CSS background color string to use when `render.options.wireframes` is disabled.\n     * This may be also set to `'transparent'` or equivalent.\n     *\n     * @property options.background\n     * @type string\n     * @default '#14151f'\n     */\n\n    /**\n     * A CSS background color string to use when `render.options.wireframes` is enabled.\n     * This may be also set to `'transparent'` or equivalent.\n     *\n     * @property options.wireframeBackground\n     * @type string\n     * @default '#14151f'\n     */\n\n    /**\n     * A flag that specifies if `render.bounds` should be used when rendering.\n     *\n     * @property options.hasBounds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable all debug information overlays together.  \n     * This includes and has priority over the values of:\n     *\n     * - `render.options.showStats`\n     * - `render.options.showPerformance`\n     *\n     * @property options.showDebug\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the engine stats info overlay.  \n     * From left to right, the values shown are:\n     *\n     * - body parts total\n     * - body total\n     * - constraints total\n     * - composites total\n     * - collision pairs total\n     *\n     * @property options.showStats\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable performance charts.  \n     * From left to right, the values shown are:\n     *\n     * - average render frequency (e.g. 60 fps)\n     * - exact engine delta time used for last update (e.g. 16.66ms)\n     * - average engine execution duration (e.g. 5.00ms)\n     * - average render execution duration (e.g. 0.40ms)\n     * - average effective play speed (e.g. '1.00x' is 'real-time')\n     *\n     * Each value is recorded over a fixed sample of past frames (60 frames).\n     *\n     * A chart shown below each value indicates the variance from the average over the sample.\n     * The more stable or fixed the value is the flatter the chart will appear.\n     *\n     * @property options.showPerformance\n     * @type boolean\n     * @default false\n     */\n    \n    /**\n     * A flag to enable or disable rendering entirely.\n     *\n     * @property options.enabled\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to toggle wireframe rendering otherwise solid fill rendering is used.\n     *\n     * @property options.wireframes\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A flag to enable or disable sleeping bodies indicators.\n     *\n     * @property options.showSleeping\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A flag to enable or disable the debug information overlay.\n     *\n     * @property options.showDebug\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the collision broadphase debug overlay.\n     *\n     * @deprecated no longer implemented\n     * @property options.showBroadphase\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body bounds debug overlay.\n     *\n     * @property options.showBounds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body velocity debug overlay.\n     *\n     * @property options.showVelocity\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body collisions debug overlay.\n     *\n     * @property options.showCollisions\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the collision resolver separations debug overlay.\n     *\n     * @property options.showSeparations\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body axes debug overlay.\n     *\n     * @property options.showAxes\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body positions debug overlay.\n     *\n     * @property options.showPositions\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body angle debug overlay.\n     *\n     * @property options.showAngleIndicator\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body and part ids debug overlay.\n     *\n     * @property options.showIds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body vertex numbers debug overlay.\n     *\n     * @property options.showVertexNumbers\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body convex hulls debug overlay.\n     *\n     * @property options.showConvexHulls\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body internal edges debug overlay.\n     *\n     * @property options.showInternalEdges\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the mouse position debug overlay.\n     *\n     * @property options.showMousePosition\n     * @type boolean\n     * @default false\n     */\n\n})();\n\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Contact` module contains methods for creating and manipulating collision contacts.\n*\n* @class Contact\n*/\n\nvar Contact = {};\n\nmodule.exports = Contact;\n\n(function() {\n\n    /**\n     * Creates a new contact.\n     * @method create\n     * @param {vertex} vertex\n     * @return {contact} A new contact\n     */\n    Contact.create = function(vertex) {\n        return {\n            vertex: vertex,\n            normalImpulse: 0,\n            tangentImpulse: 0\n        };\n    };\n\n})();\n\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Engine` module contains methods for creating and manipulating engines.\n* An engine is a controller that manages updating the simulation of the world.\n* See `Matter.Runner` for an optional game loop utility.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Engine\n*/\n\nvar Engine = {};\n\nmodule.exports = Engine;\n\nvar Sleeping = __webpack_require__(7);\nvar Resolver = __webpack_require__(19);\nvar Detector = __webpack_require__(14);\nvar Pairs = __webpack_require__(20);\nvar Events = __webpack_require__(4);\nvar Composite = __webpack_require__(5);\nvar Constraint = __webpack_require__(10);\nvar Common = __webpack_require__(0);\nvar Body = __webpack_require__(6);\n\n(function() {\n\n    /**\n     * Creates a new engine. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {engine} engine\n     */\n    Engine.create = function(options) {\n        options = options || {};\n\n        var defaults = {\n            positionIterations: 6,\n            velocityIterations: 4,\n            constraintIterations: 2,\n            enableSleeping: false,\n            events: [],\n            plugin: {},\n            gravity: {\n                x: 0,\n                y: 1,\n                scale: 0.001\n            },\n            timing: {\n                timestamp: 0,\n                timeScale: 1,\n                lastDelta: 0,\n                lastElapsed: 0\n            }\n        };\n\n        var engine = Common.extend(defaults, options);\n\n        engine.world = options.world || Composite.create({ label: 'World' });\n        engine.pairs = options.pairs || Pairs.create();\n        engine.detector = options.detector || Detector.create();\n\n        // for temporary back compatibility only\n        engine.grid = { buckets: [] };\n        engine.world.gravity = engine.gravity;\n        engine.broadphase = engine.grid;\n        engine.metrics = {};\n        \n        return engine;\n    };\n\n    /**\n     * Moves the simulation forward in time by `delta` ms.\n     * The `correction` argument is an optional `Number` that specifies the time correction factor to apply to the update.\n     * This can help improve the accuracy of the simulation in cases where `delta` is changing between updates.\n     * The value of `correction` is defined as `delta / lastDelta`, i.e. the percentage change of `delta` over the last step.\n     * Therefore the value is always `1` (no correction) when `delta` constant (or when no correction is desired, which is the default).\n     * See the paper on <a href=\"http://lonesock.net/article/verlet.html\">Time Corrected Verlet</a> for more information.\n     *\n     * Triggers `beforeUpdate` and `afterUpdate` events.\n     * Triggers `collisionStart`, `collisionActive` and `collisionEnd` events.\n     * @method update\n     * @param {engine} engine\n     * @param {number} [delta=16.666]\n     * @param {number} [correction=1]\n     */\n    Engine.update = function(engine, delta, correction) {\n        var startTime = Common.now();\n\n        delta = delta || 1000 / 60;\n        correction = correction || 1;\n\n        var world = engine.world,\n            detector = engine.detector,\n            pairs = engine.pairs,\n            timing = engine.timing,\n            timestamp = timing.timestamp,\n            i;\n\n        // increment timestamp\n        timing.timestamp += delta * timing.timeScale;\n        timing.lastDelta = delta * timing.timeScale;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(engine, 'beforeUpdate', event);\n\n        // get all bodies and all constraints in the world\n        var allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world);\n\n        // update the detector bodies if they have changed\n        if (world.isModified) {\n            Detector.setBodies(detector, allBodies);\n        }\n\n        // reset all composite modified flags\n        if (world.isModified) {\n            Composite.setModified(world, false, false, true);\n        }\n\n        // update sleeping if enabled\n        if (engine.enableSleeping)\n            Sleeping.update(allBodies, timing.timeScale);\n\n        // apply gravity to all bodies\n        Engine._bodiesApplyGravity(allBodies, engine.gravity);\n\n        // update all body position and rotation by integration\n        Engine._bodiesUpdate(allBodies, delta, timing.timeScale, correction, world.bounds);\n\n        // update all constraints (first pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // find all collisions\n        detector.pairs = engine.pairs;\n        var collisions = Detector.collisions(detector);\n\n        // update collision pairs\n        Pairs.update(pairs, collisions, timestamp);\n\n        // wake up bodies involved in collisions\n        if (engine.enableSleeping)\n            Sleeping.afterCollisions(pairs.list, timing.timeScale);\n\n        // trigger collision events\n        if (pairs.collisionStart.length > 0)\n            Events.trigger(engine, 'collisionStart', { pairs: pairs.collisionStart });\n\n        // iteratively resolve position between collisions\n        Resolver.preSolvePosition(pairs.list);\n        for (i = 0; i < engine.positionIterations; i++) {\n            Resolver.solvePosition(pairs.list, timing.timeScale);\n        }\n        Resolver.postSolvePosition(allBodies);\n\n        // update all constraints (second pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // iteratively resolve velocity between collisions\n        Resolver.preSolveVelocity(pairs.list);\n        for (i = 0; i < engine.velocityIterations; i++) {\n            Resolver.solveVelocity(pairs.list, timing.timeScale);\n        }\n\n        // trigger collision events\n        if (pairs.collisionActive.length > 0)\n            Events.trigger(engine, 'collisionActive', { pairs: pairs.collisionActive });\n\n        if (pairs.collisionEnd.length > 0)\n            Events.trigger(engine, 'collisionEnd', { pairs: pairs.collisionEnd });\n\n        // clear force buffers\n        Engine._bodiesClearForces(allBodies);\n\n        Events.trigger(engine, 'afterUpdate', event);\n\n        // log the time elapsed computing this update\n        engine.timing.lastElapsed = Common.now() - startTime;\n\n        return engine;\n    };\n    \n    /**\n     * Merges two engines by keeping the configuration of `engineA` but replacing the world with the one from `engineB`.\n     * @method merge\n     * @param {engine} engineA\n     * @param {engine} engineB\n     */\n    Engine.merge = function(engineA, engineB) {\n        Common.extend(engineA, engineB);\n        \n        if (engineB.world) {\n            engineA.world = engineB.world;\n\n            Engine.clear(engineA);\n\n            var bodies = Composite.allBodies(engineA.world);\n\n            for (var i = 0; i < bodies.length; i++) {\n                var body = bodies[i];\n                Sleeping.set(body, false);\n                body.id = Common.nextId();\n            }\n        }\n    };\n\n    /**\n     * Clears the engine pairs and detector.\n     * @method clear\n     * @param {engine} engine\n     */\n    Engine.clear = function(engine) {\n        Pairs.clear(engine.pairs);\n        Detector.clear(engine.detector);\n    };\n\n    /**\n     * Zeroes the `body.force` and `body.torque` force buffers.\n     * @method _bodiesClearForces\n     * @private\n     * @param {body[]} bodies\n     */\n    Engine._bodiesClearForces = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            // reset force buffers\n            body.force.x = 0;\n            body.force.y = 0;\n            body.torque = 0;\n        }\n    };\n\n    /**\n     * Applys a mass dependant force to all given bodies.\n     * @method _bodiesApplyGravity\n     * @private\n     * @param {body[]} bodies\n     * @param {vector} gravity\n     */\n    Engine._bodiesApplyGravity = function(bodies, gravity) {\n        var gravityScale = typeof gravity.scale !== 'undefined' ? gravity.scale : 0.001;\n\n        if ((gravity.x === 0 && gravity.y === 0) || gravityScale === 0) {\n            return;\n        }\n        \n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            // apply gravity\n            body.force.y += body.mass * gravity.y * gravityScale;\n            body.force.x += body.mass * gravity.x * gravityScale;\n        }\n    };\n\n    /**\n     * Applys `Body.update` to all given `bodies`.\n     * @method _bodiesUpdate\n     * @private\n     * @param {body[]} bodies\n     * @param {number} deltaTime \n     * The amount of time elapsed between updates\n     * @param {number} timeScale\n     * @param {number} correction \n     * The Verlet correction factor (deltaTime / lastDeltaTime)\n     * @param {bounds} worldBounds\n     */\n    Engine._bodiesUpdate = function(bodies, deltaTime, timeScale, correction, worldBounds) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            Body.update(body, deltaTime, timeScale, correction);\n        }\n    };\n\n    /**\n     * A deprecated alias for `Runner.run`, use `Matter.Runner.run(engine)` instead and see `Matter.Runner` for more information.\n     * @deprecated use Matter.Runner.run(engine) instead\n     * @method run\n     * @param {engine} engine\n     */\n\n    /**\n    * Fired just before an update\n    *\n    * @event beforeUpdate\n    * @param {object} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update and all collision events\n    *\n    * @event afterUpdate\n    * @param {object} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have started to collide in the current tick (if any)\n    *\n    * @event collisionStart\n    * @param {object} event An event object\n    * @param {pair[]} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that are colliding in the current tick (if any)\n    *\n    * @event collisionActive\n    * @param {object} event An event object\n    * @param {pair[]} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have ended collision in the current tick (if any)\n    *\n    * @event collisionEnd\n    * @param {object} event An event object\n    * @param {pair[]} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` that specifies the number of position iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property positionIterations\n     * @type number\n     * @default 6\n     */\n\n    /**\n     * An integer `Number` that specifies the number of velocity iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property velocityIterations\n     * @type number\n     * @default 4\n     */\n\n    /**\n     * An integer `Number` that specifies the number of constraint iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     * The default value of `2` is usually very adequate.\n     *\n     * @property constraintIterations\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A flag that specifies whether the engine should allow sleeping via the `Matter.Sleeping` module.\n     * Sleeping can improve stability and performance, but often at the expense of accuracy.\n     *\n     * @property enableSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * An `Object` containing properties regarding the timing systems of the engine. \n     *\n     * @property timing\n     * @type object\n     */\n\n    /**\n     * A `Number` that specifies the global scaling factor of time for all bodies.\n     * A value of `0` freezes the simulation.\n     * A value of `0.1` gives a slow-motion effect.\n     * A value of `1.2` gives a speed-up effect.\n     *\n     * @property timing.timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the current simulation-time in milliseconds starting from `0`. \n     * It is incremented on every `Engine.update` by the given `delta` argument. \n     *\n     * @property timing.timestamp\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that represents the total execution time elapsed during the last `Engine.update` in milliseconds.\n     * It is updated by timing from the start of the last `Engine.update` call until it ends.\n     *\n     * This value will also include the total execution time of all event handlers directly or indirectly triggered by the engine update.\n     *\n     * @property timing.lastElapsed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that represents the `delta` value used in the last engine update.\n     *\n     * @property timing.lastDelta\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Matter.Detector` instance.\n     *\n     * @property detector\n     * @type detector\n     * @default a Matter.Detector instance\n     */\n\n    /**\n     * A `Matter.Grid` instance.\n     *\n     * @deprecated replaced by `engine.detector`\n     * @property grid\n     * @type grid\n     * @default a Matter.Grid instance\n     */\n\n    /**\n     * Replaced by and now alias for `engine.grid`.\n     *\n     * @deprecated replaced by `engine.detector`\n     * @property broadphase\n     * @type grid\n     * @default a Matter.Grid instance\n     */\n\n    /**\n     * The root `Matter.Composite` instance that will contain all bodies, constraints and other composites to be simulated by this engine.\n     *\n     * @property world\n     * @type composite\n     * @default a Matter.Composite instance\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * The gravity to apply on all bodies in `engine.world`.\n     *\n     * @property gravity\n     * @type object\n     */\n\n    /**\n     * The gravity x component.\n     *\n     * @property gravity.x\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * The gravity y component.\n     *\n     * @property gravity.y\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * The gravity scale factor.\n     *\n     * @property gravity.scale\n     * @type object\n     * @default 0.001\n     */\n\n})();\n\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Resolver` module contains methods for resolving collision pairs.\n*\n* @class Resolver\n*/\n\nvar Resolver = {};\n\nmodule.exports = Resolver;\n\nvar Vertices = __webpack_require__(3);\nvar Bounds = __webpack_require__(1);\n\n(function() {\n\n    Resolver._restingThresh = 4;\n    Resolver._restingThreshTangent = 6;\n    Resolver._positionDampen = 0.9;\n    Resolver._positionWarming = 0.8;\n    Resolver._frictionNormalMultiplier = 5;\n\n    /**\n     * Prepare pairs for position solving.\n     * @method preSolvePosition\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolvePosition = function(pairs) {\n        var i,\n            pair,\n            activeCount,\n            pairsLength = pairs.length;\n\n        // find total contacts on each body\n        for (i = 0; i < pairsLength; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive)\n                continue;\n            \n            activeCount = pair.activeContacts.length;\n            pair.collision.parentA.totalContacts += activeCount;\n            pair.collision.parentB.totalContacts += activeCount;\n        }\n    };\n\n    /**\n     * Find a solution for pair positions.\n     * @method solvePosition\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Resolver.solvePosition = function(pairs, timeScale) {\n        var i,\n            pair,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            contactShare,\n            positionImpulse,\n            positionDampen = Resolver._positionDampen,\n            pairsLength = pairs.length;\n\n        // find impulses required to resolve penetration\n        for (i = 0; i < pairsLength; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n\n            // get current separation between body edges involved in collision\n            pair.separation = \n                normal.x * (bodyB.positionImpulse.x + collision.penetration.x - bodyA.positionImpulse.x)\n                + normal.y * (bodyB.positionImpulse.y + collision.penetration.y - bodyA.positionImpulse.y);\n        }\n        \n        for (i = 0; i < pairsLength; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            positionImpulse = (pair.separation - pair.slop) * timeScale;\n\n            if (bodyA.isStatic || bodyB.isStatic)\n                positionImpulse *= 2;\n            \n            if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                contactShare = positionDampen / bodyA.totalContacts;\n                bodyA.positionImpulse.x += normal.x * positionImpulse * contactShare;\n                bodyA.positionImpulse.y += normal.y * positionImpulse * contactShare;\n            }\n\n            if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                contactShare = positionDampen / bodyB.totalContacts;\n                bodyB.positionImpulse.x -= normal.x * positionImpulse * contactShare;\n                bodyB.positionImpulse.y -= normal.y * positionImpulse * contactShare;\n            }\n        }\n    };\n\n    /**\n     * Apply position resolution.\n     * @method postSolvePosition\n     * @param {body[]} bodies\n     */\n    Resolver.postSolvePosition = function(bodies) {\n        var positionWarming = Resolver._positionWarming,\n            bodiesLength = bodies.length,\n            verticesTranslate = Vertices.translate,\n            boundsUpdate = Bounds.update;\n\n        for (var i = 0; i < bodiesLength; i++) {\n            var body = bodies[i],\n                positionImpulse = body.positionImpulse,\n                positionImpulseX = positionImpulse.x,\n                positionImpulseY = positionImpulse.y,\n                velocity = body.velocity;\n\n            // reset contact count\n            body.totalContacts = 0;\n\n            if (positionImpulseX !== 0 || positionImpulseY !== 0) {\n                // update body geometry\n                for (var j = 0; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n                    verticesTranslate(part.vertices, positionImpulse);\n                    boundsUpdate(part.bounds, part.vertices, velocity);\n                    part.position.x += positionImpulseX;\n                    part.position.y += positionImpulseY;\n                }\n\n                // move the body without changing velocity\n                body.positionPrev.x += positionImpulseX;\n                body.positionPrev.y += positionImpulseY;\n\n                if (positionImpulseX * velocity.x + positionImpulseY * velocity.y < 0) {\n                    // reset cached impulse if the body has velocity along it\n                    positionImpulse.x = 0;\n                    positionImpulse.y = 0;\n                } else {\n                    // warm the next iteration\n                    positionImpulse.x *= positionWarming;\n                    positionImpulse.y *= positionWarming;\n                }\n            }\n        }\n    };\n\n    /**\n     * Prepare pairs for velocity solving.\n     * @method preSolveVelocity\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolveVelocity = function(pairs) {\n        var pairsLength = pairs.length,\n            i,\n            j;\n        \n        for (i = 0; i < pairsLength; i++) {\n            var pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            var contacts = pair.activeContacts,\n                contactsLength = contacts.length,\n                collision = pair.collision,\n                bodyA = collision.parentA,\n                bodyB = collision.parentB,\n                normal = collision.normal,\n                tangent = collision.tangent;\n    \n            // resolve each contact\n            for (j = 0; j < contactsLength; j++) {\n                var contact = contacts[j],\n                    contactVertex = contact.vertex,\n                    normalImpulse = contact.normalImpulse,\n                    tangentImpulse = contact.tangentImpulse;\n    \n                if (normalImpulse !== 0 || tangentImpulse !== 0) {\n                    // total impulse from contact\n                    var impulseX = normal.x * normalImpulse + tangent.x * tangentImpulse,\n                        impulseY = normal.y * normalImpulse + tangent.y * tangentImpulse;\n                    \n                    // apply impulse from contact\n                    if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                        bodyA.positionPrev.x += impulseX * bodyA.inverseMass;\n                        bodyA.positionPrev.y += impulseY * bodyA.inverseMass;\n                        bodyA.anglePrev += bodyA.inverseInertia * (\n                            (contactVertex.x - bodyA.position.x) * impulseY\n                            - (contactVertex.y - bodyA.position.y) * impulseX\n                        );\n                    }\n    \n                    if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                        bodyB.positionPrev.x -= impulseX * bodyB.inverseMass;\n                        bodyB.positionPrev.y -= impulseY * bodyB.inverseMass;\n                        bodyB.anglePrev -= bodyB.inverseInertia * (\n                            (contactVertex.x - bodyB.position.x) * impulseY \n                            - (contactVertex.y - bodyB.position.y) * impulseX\n                        );\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Find a solution for pair velocities.\n     * @method solveVelocity\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Resolver.solveVelocity = function(pairs, timeScale) {\n        var timeScaleSquared = timeScale * timeScale,\n            restingThresh = Resolver._restingThresh * timeScaleSquared,\n            frictionNormalMultiplier = Resolver._frictionNormalMultiplier,\n            restingThreshTangent = Resolver._restingThreshTangent * timeScaleSquared,\n            NumberMaxValue = Number.MAX_VALUE,\n            pairsLength = pairs.length,\n            tangentImpulse,\n            maxFriction,\n            i,\n            j;\n\n        for (i = 0; i < pairsLength; i++) {\n            var pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            var collision = pair.collision,\n                bodyA = collision.parentA,\n                bodyB = collision.parentB,\n                bodyAVelocity = bodyA.velocity,\n                bodyBVelocity = bodyB.velocity,\n                normalX = collision.normal.x,\n                normalY = collision.normal.y,\n                tangentX = collision.tangent.x,\n                tangentY = collision.tangent.y,\n                contacts = pair.activeContacts,\n                contactsLength = contacts.length,\n                contactShare = 1 / contactsLength,\n                inverseMassTotal = bodyA.inverseMass + bodyB.inverseMass,\n                friction = pair.friction * pair.frictionStatic * frictionNormalMultiplier * timeScaleSquared;\n\n            // update body velocities\n            bodyAVelocity.x = bodyA.position.x - bodyA.positionPrev.x;\n            bodyAVelocity.y = bodyA.position.y - bodyA.positionPrev.y;\n            bodyBVelocity.x = bodyB.position.x - bodyB.positionPrev.x;\n            bodyBVelocity.y = bodyB.position.y - bodyB.positionPrev.y;\n            bodyA.angularVelocity = bodyA.angle - bodyA.anglePrev;\n            bodyB.angularVelocity = bodyB.angle - bodyB.anglePrev;\n\n            // resolve each contact\n            for (j = 0; j < contactsLength; j++) {\n                var contact = contacts[j],\n                    contactVertex = contact.vertex;\n\n                var offsetAX = contactVertex.x - bodyA.position.x,\n                    offsetAY = contactVertex.y - bodyA.position.y,\n                    offsetBX = contactVertex.x - bodyB.position.x,\n                    offsetBY = contactVertex.y - bodyB.position.y;\n \n                var velocityPointAX = bodyAVelocity.x - offsetAY * bodyA.angularVelocity,\n                    velocityPointAY = bodyAVelocity.y + offsetAX * bodyA.angularVelocity,\n                    velocityPointBX = bodyBVelocity.x - offsetBY * bodyB.angularVelocity,\n                    velocityPointBY = bodyBVelocity.y + offsetBX * bodyB.angularVelocity;\n\n                var relativeVelocityX = velocityPointAX - velocityPointBX,\n                    relativeVelocityY = velocityPointAY - velocityPointBY;\n\n                var normalVelocity = normalX * relativeVelocityX + normalY * relativeVelocityY,\n                    tangentVelocity = tangentX * relativeVelocityX + tangentY * relativeVelocityY;\n\n                // coulomb friction\n                var normalOverlap = pair.separation + normalVelocity;\n                var normalForce = Math.min(normalOverlap, 1);\n                normalForce = normalOverlap < 0 ? 0 : normalForce;\n                \n                var frictionLimit = normalForce * friction;\n\n                if (tangentVelocity > frictionLimit || -tangentVelocity > frictionLimit) {\n                    maxFriction = tangentVelocity > 0 ? tangentVelocity : -tangentVelocity;\n                    tangentImpulse = pair.friction * (tangentVelocity > 0 ? 1 : -1) * timeScaleSquared;\n                    \n                    if (tangentImpulse < -maxFriction) {\n                        tangentImpulse = -maxFriction;\n                    } else if (tangentImpulse > maxFriction) {\n                        tangentImpulse = maxFriction;\n                    }\n                } else {\n                    tangentImpulse = tangentVelocity;\n                    maxFriction = NumberMaxValue;\n                }\n\n                // account for mass, inertia and contact offset\n                var oAcN = offsetAX * normalY - offsetAY * normalX,\n                    oBcN = offsetBX * normalY - offsetBY * normalX,\n                    share = contactShare / (inverseMassTotal + bodyA.inverseInertia * oAcN * oAcN + bodyB.inverseInertia * oBcN * oBcN);\n\n                // raw impulses\n                var normalImpulse = (1 + pair.restitution) * normalVelocity * share;\n                tangentImpulse *= share;\n\n                // handle high velocity and resting collisions separately\n                if (normalVelocity * normalVelocity > restingThresh && normalVelocity < 0) {\n                    // high normal velocity so clear cached contact normal impulse\n                    contact.normalImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // impulse constraint tends to 0\n                    var contactNormalImpulse = contact.normalImpulse;\n                    contact.normalImpulse += normalImpulse;\n                    contact.normalImpulse = Math.min(contact.normalImpulse, 0);\n                    normalImpulse = contact.normalImpulse - contactNormalImpulse;\n                }\n\n                // handle high velocity and resting collisions separately\n                if (tangentVelocity * tangentVelocity > restingThreshTangent) {\n                    // high tangent velocity so clear cached contact tangent impulse\n                    contact.tangentImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // tangent impulse tends to -tangentSpeed or +tangentSpeed\n                    var contactTangentImpulse = contact.tangentImpulse;\n                    contact.tangentImpulse += tangentImpulse;\n                    if (contact.tangentImpulse < -maxFriction) contact.tangentImpulse = -maxFriction;\n                    if (contact.tangentImpulse > maxFriction) contact.tangentImpulse = maxFriction;\n                    tangentImpulse = contact.tangentImpulse - contactTangentImpulse;\n                }\n\n                // total impulse from contact\n                var impulseX = normalX * normalImpulse + tangentX * tangentImpulse,\n                    impulseY = normalY * normalImpulse + tangentY * tangentImpulse;\n                \n                // apply impulse from contact\n                if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                    bodyA.positionPrev.x += impulseX * bodyA.inverseMass;\n                    bodyA.positionPrev.y += impulseY * bodyA.inverseMass;\n                    bodyA.anglePrev += (offsetAX * impulseY - offsetAY * impulseX) * bodyA.inverseInertia;\n                }\n\n                if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                    bodyB.positionPrev.x -= impulseX * bodyB.inverseMass;\n                    bodyB.positionPrev.y -= impulseY * bodyB.inverseMass;\n                    bodyB.anglePrev -= (offsetBX * impulseY - offsetBY * impulseX) * bodyB.inverseInertia;\n                }\n            }\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Pairs` module contains methods for creating and manipulating collision pair sets.\n*\n* @class Pairs\n*/\n\nvar Pairs = {};\n\nmodule.exports = Pairs;\n\nvar Pair = __webpack_require__(9);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Creates a new pairs structure.\n     * @method create\n     * @param {object} options\n     * @return {pairs} A new pairs structure\n     */\n    Pairs.create = function(options) {\n        return Common.extend({ \n            table: {},\n            list: [],\n            collisionStart: [],\n            collisionActive: [],\n            collisionEnd: []\n        }, options);\n    };\n\n    /**\n     * Updates pairs given a list of collisions.\n     * @method update\n     * @param {object} pairs\n     * @param {collision[]} collisions\n     * @param {number} timestamp\n     */\n    Pairs.update = function(pairs, collisions, timestamp) {\n        var pairsList = pairs.list,\n            pairsListLength = pairsList.length,\n            pairsTable = pairs.table,\n            collisionsLength = collisions.length,\n            collisionStart = pairs.collisionStart,\n            collisionEnd = pairs.collisionEnd,\n            collisionActive = pairs.collisionActive,\n            collision,\n            pairIndex,\n            pair,\n            i;\n\n        // clear collision state arrays, but maintain old reference\n        collisionStart.length = 0;\n        collisionEnd.length = 0;\n        collisionActive.length = 0;\n\n        for (i = 0; i < pairsListLength; i++) {\n            pairsList[i].confirmedActive = false;\n        }\n\n        for (i = 0; i < collisionsLength; i++) {\n            collision = collisions[i];\n            pair = collision.pair;\n\n            if (pair) {\n                // pair already exists (but may or may not be active)\n                if (pair.isActive) {\n                    // pair exists and is active\n                    collisionActive.push(pair);\n                } else {\n                    // pair exists but was inactive, so a collision has just started again\n                    collisionStart.push(pair);\n                }\n\n                // update the pair\n                Pair.update(pair, collision, timestamp);\n                pair.confirmedActive = true;\n            } else {\n                // pair did not exist, create a new pair\n                pair = Pair.create(collision, timestamp);\n                pairsTable[pair.id] = pair;\n\n                // push the new pair\n                collisionStart.push(pair);\n                pairsList.push(pair);\n            }\n        }\n\n        // find pairs that are no longer active\n        var removePairIndex = [];\n        pairsListLength = pairsList.length;\n\n        for (i = 0; i < pairsListLength; i++) {\n            pair = pairsList[i];\n            \n            if (!pair.confirmedActive) {\n                Pair.setActive(pair, false, timestamp);\n                collisionEnd.push(pair);\n\n                if (!pair.collision.bodyA.isSleeping && !pair.collision.bodyB.isSleeping) {\n                    removePairIndex.push(i);\n                }\n            }\n        }\n\n        // remove inactive pairs\n        for (i = 0; i < removePairIndex.length; i++) {\n            pairIndex = removePairIndex[i] - i;\n            pair = pairsList[pairIndex];\n            pairsList.splice(pairIndex, 1);\n            delete pairsTable[pair.id];\n        }\n    };\n\n    /**\n     * Clears the given pairs structure.\n     * @method clear\n     * @param {pairs} pairs\n     * @return {pairs} pairs\n     */\n    Pairs.clear = function(pairs) {\n        pairs.table = {};\n        pairs.list.length = 0;\n        pairs.collisionStart.length = 0;\n        pairs.collisionActive.length = 0;\n        pairs.collisionEnd.length = 0;\n        return pairs;\n    };\n\n})();\n\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Matter = module.exports = __webpack_require__(22);\r\n\r\nMatter.Axes = __webpack_require__(11);\r\nMatter.Bodies = __webpack_require__(12);\r\nMatter.Body = __webpack_require__(6);\r\nMatter.Bounds = __webpack_require__(1);\r\nMatter.Collision = __webpack_require__(8);\r\nMatter.Common = __webpack_require__(0);\r\nMatter.Composite = __webpack_require__(5);\r\nMatter.Composites = __webpack_require__(23);\r\nMatter.Constraint = __webpack_require__(10);\r\nMatter.Contact = __webpack_require__(17);\r\nMatter.Detector = __webpack_require__(14);\r\nMatter.Engine = __webpack_require__(18);\r\nMatter.Events = __webpack_require__(4);\r\nMatter.Grid = __webpack_require__(24);\r\nMatter.Mouse = __webpack_require__(13);\r\nMatter.MouseConstraint = __webpack_require__(25);\r\nMatter.Pair = __webpack_require__(9);\r\nMatter.Pairs = __webpack_require__(20);\r\nMatter.Plugin = __webpack_require__(15);\r\nMatter.Query = __webpack_require__(26);\r\nMatter.Render = __webpack_require__(16);\r\nMatter.Resolver = __webpack_require__(19);\r\nMatter.Runner = __webpack_require__(27);\r\nMatter.SAT = __webpack_require__(28);\r\nMatter.Sleeping = __webpack_require__(7);\r\nMatter.Svg = __webpack_require__(29);\r\nMatter.Vector = __webpack_require__(2);\r\nMatter.Vertices = __webpack_require__(3);\r\nMatter.World = __webpack_require__(30);\r\n\r\n// temporary back compatibility\r\nMatter.Engine.run = Matter.Runner.run;\r\nMatter.Common.deprecated(Matter.Engine, 'run', 'Engine.run ➤ use Matter.Runner.run(engine) instead');\r\n\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\r\n* The `Matter` module is the top level namespace. It also includes a function for installing plugins on top of the library.\r\n*\r\n* @class Matter\r\n*/\r\n\r\nvar Matter = {};\r\n\r\nmodule.exports = Matter;\r\n\r\nvar Plugin = __webpack_require__(15);\r\nvar Common = __webpack_require__(0);\r\n\r\n(function() {\r\n\r\n    /**\r\n     * The library name.\r\n     * @property name\r\n     * @readOnly\r\n     * @type {String}\r\n     */\r\n    Matter.name = 'matter-js';\r\n\r\n    /**\r\n     * The library version.\r\n     * @property version\r\n     * @readOnly\r\n     * @type {String}\r\n     */\r\n    Matter.version =  true ? \"0.18.0\" : undefined;\r\n\r\n    /**\r\n     * A list of plugin dependencies to be installed. These are normally set and installed through `Matter.use`.\r\n     * Alternatively you may set `Matter.uses` manually and install them by calling `Plugin.use(Matter)`.\r\n     * @property uses\r\n     * @type {Array}\r\n     */\r\n    Matter.uses = [];\r\n\r\n    /**\r\n     * The plugins that have been installed through `Matter.Plugin.install`. Read only.\r\n     * @property used\r\n     * @readOnly\r\n     * @type {Array}\r\n     */\r\n    Matter.used = [];\r\n\r\n    /**\r\n     * Installs the given plugins on the `Matter` namespace.\r\n     * This is a short-hand for `Plugin.use`, see it for more information.\r\n     * Call this function once at the start of your code, with all of the plugins you wish to install as arguments.\r\n     * Avoid calling this function multiple times unless you intend to manually control installation order.\r\n     * @method use\r\n     * @param ...plugin {Function} The plugin(s) to install on `base` (multi-argument).\r\n     */\r\n    Matter.use = function() {\r\n        Plugin.use(Matter, Array.prototype.slice.call(arguments));\r\n    };\r\n\r\n    /**\r\n     * Chains a function to excute before the original function on the given `path` relative to `Matter`.\r\n     * See also docs for `Common.chain`.\r\n     * @method before\r\n     * @param {string} path The path relative to `Matter`\r\n     * @param {function} func The function to chain before the original\r\n     * @return {function} The chained function that replaced the original\r\n     */\r\n    Matter.before = function(path, func) {\r\n        path = path.replace(/^Matter./, '');\r\n        return Common.chainPathBefore(Matter, path, func);\r\n    };\r\n\r\n    /**\r\n     * Chains a function to excute after the original function on the given `path` relative to `Matter`.\r\n     * See also docs for `Common.chain`.\r\n     * @method after\r\n     * @param {string} path The path relative to `Matter`\r\n     * @param {function} func The function to chain after the original\r\n     * @return {function} The chained function that replaced the original\r\n     */\r\n    Matter.after = function(path, func) {\r\n        path = path.replace(/^Matter./, '');\r\n        return Common.chainPathAfter(Matter, path, func);\r\n    };\r\n\r\n})();\r\n\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Composites` module contains factory methods for creating composite bodies\n* with commonly used configurations (such as stacks and chains).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composites\n*/\n\nvar Composites = {};\n\nmodule.exports = Composites;\n\nvar Composite = __webpack_require__(5);\nvar Constraint = __webpack_require__(10);\nvar Common = __webpack_require__(0);\nvar Body = __webpack_require__(6);\nvar Bodies = __webpack_require__(12);\nvar deprecated = Common.deprecated;\n\n(function() {\n\n    /**\n     * Create a new composite containing bodies created in the callback in a grid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method stack\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.stack = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        var stack = Composite.create({ label: 'Stack' }),\n            x = xx,\n            y = yy,\n            lastBody,\n            i = 0;\n\n        for (var row = 0; row < rows; row++) {\n            var maxHeight = 0;\n            \n            for (var column = 0; column < columns; column++) {\n                var body = callback(x, y, column, row, lastBody, i);\n                    \n                if (body) {\n                    var bodyHeight = body.bounds.max.y - body.bounds.min.y,\n                        bodyWidth = body.bounds.max.x - body.bounds.min.x; \n\n                    if (bodyHeight > maxHeight)\n                        maxHeight = bodyHeight;\n                    \n                    Body.translate(body, { x: bodyWidth * 0.5, y: bodyHeight * 0.5 });\n\n                    x = body.bounds.max.x + columnGap;\n\n                    Composite.addBody(stack, body);\n                    \n                    lastBody = body;\n                    i += 1;\n                } else {\n                    x += columnGap;\n                }\n            }\n            \n            y += maxHeight + rowGap;\n            x = xx;\n        }\n\n        return stack;\n    };\n    \n    /**\n     * Chains all bodies in the given composite together using constraints.\n     * @method chain\n     * @param {composite} composite\n     * @param {number} xOffsetA\n     * @param {number} yOffsetA\n     * @param {number} xOffsetB\n     * @param {number} yOffsetB\n     * @param {object} options\n     * @return {composite} A new composite containing objects chained together with constraints\n     */\n    Composites.chain = function(composite, xOffsetA, yOffsetA, xOffsetB, yOffsetB, options) {\n        var bodies = composite.bodies;\n        \n        for (var i = 1; i < bodies.length; i++) {\n            var bodyA = bodies[i - 1],\n                bodyB = bodies[i],\n                bodyAHeight = bodyA.bounds.max.y - bodyA.bounds.min.y,\n                bodyAWidth = bodyA.bounds.max.x - bodyA.bounds.min.x, \n                bodyBHeight = bodyB.bounds.max.y - bodyB.bounds.min.y,\n                bodyBWidth = bodyB.bounds.max.x - bodyB.bounds.min.x;\n        \n            var defaults = {\n                bodyA: bodyA,\n                pointA: { x: bodyAWidth * xOffsetA, y: bodyAHeight * yOffsetA },\n                bodyB: bodyB,\n                pointB: { x: bodyBWidth * xOffsetB, y: bodyBHeight * yOffsetB }\n            };\n            \n            var constraint = Common.extend(defaults, options);\n        \n            Composite.addConstraint(composite, Constraint.create(constraint));\n        }\n\n        composite.label += ' Chain';\n        \n        return composite;\n    };\n\n    /**\n     * Connects bodies in the composite with constraints in a grid pattern, with optional cross braces.\n     * @method mesh\n     * @param {composite} composite\n     * @param {number} columns\n     * @param {number} rows\n     * @param {boolean} crossBrace\n     * @param {object} options\n     * @return {composite} The composite containing objects meshed together with constraints\n     */\n    Composites.mesh = function(composite, columns, rows, crossBrace, options) {\n        var bodies = composite.bodies,\n            row,\n            col,\n            bodyA,\n            bodyB,\n            bodyC;\n        \n        for (row = 0; row < rows; row++) {\n            for (col = 1; col < columns; col++) {\n                bodyA = bodies[(col - 1) + (row * columns)];\n                bodyB = bodies[col + (row * columns)];\n                Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n            }\n\n            if (row > 0) {\n                for (col = 0; col < columns; col++) {\n                    bodyA = bodies[col + ((row - 1) * columns)];\n                    bodyB = bodies[col + (row * columns)];\n                    Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n\n                    if (crossBrace && col > 0) {\n                        bodyC = bodies[(col - 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n\n                    if (crossBrace && col < columns - 1) {\n                        bodyC = bodies[(col + 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n                }\n            }\n        }\n\n        composite.label += ' Mesh';\n        \n        return composite;\n    };\n    \n    /**\n     * Create a new composite containing bodies created in the callback in a pyramid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method pyramid\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.pyramid = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        return Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y, column, row, lastBody, i) {\n            var actualRows = Math.min(rows, Math.ceil(columns / 2)),\n                lastBodyWidth = lastBody ? lastBody.bounds.max.x - lastBody.bounds.min.x : 0;\n            \n            if (row > actualRows)\n                return;\n            \n            // reverse row order\n            row = actualRows - row;\n            \n            var start = row,\n                end = columns - 1 - row;\n\n            if (column < start || column > end)\n                return;\n            \n            // retroactively fix the first body's position, since width was unknown\n            if (i === 1) {\n                Body.translate(lastBody, { x: (column + (columns % 2 === 1 ? 1 : -1)) * lastBodyWidth, y: 0 });\n            }\n\n            var xOffset = lastBody ? column * lastBodyWidth : 0;\n            \n            return callback(xx + xOffset + column * columnGap, y, column, row, lastBody, i);\n        });\n    };\n\n    /**\n     * This has now moved to the [newtonsCradle example](https://github.com/liabru/matter-js/blob/master/examples/newtonsCradle.js), follow that instead as this function is deprecated here.\n     * @deprecated moved to newtonsCradle example\n     * @method newtonsCradle\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} number\n     * @param {number} size\n     * @param {number} length\n     * @return {composite} A new composite newtonsCradle body\n     */\n    Composites.newtonsCradle = function(xx, yy, number, size, length) {\n        var newtonsCradle = Composite.create({ label: 'Newtons Cradle' });\n\n        for (var i = 0; i < number; i++) {\n            var separation = 1.9,\n                circle = Bodies.circle(xx + i * (size * separation), yy + length, size, \n                    { inertia: Infinity, restitution: 1, friction: 0, frictionAir: 0.0001, slop: 1 }),\n                constraint = Constraint.create({ pointA: { x: xx + i * (size * separation), y: yy }, bodyB: circle });\n\n            Composite.addBody(newtonsCradle, circle);\n            Composite.addConstraint(newtonsCradle, constraint);\n        }\n\n        return newtonsCradle;\n    };\n\n    deprecated(Composites, 'newtonsCradle', 'Composites.newtonsCradle ➤ moved to newtonsCradle example');\n    \n    /**\n     * This has now moved to the [car example](https://github.com/liabru/matter-js/blob/master/examples/car.js), follow that instead as this function is deprecated here.\n     * @deprecated moved to car example\n     * @method car\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} width\n     * @param {number} height\n     * @param {number} wheelSize\n     * @return {composite} A new composite car body\n     */\n    Composites.car = function(xx, yy, width, height, wheelSize) {\n        var group = Body.nextGroup(true),\n            wheelBase = 20,\n            wheelAOffset = -width * 0.5 + wheelBase,\n            wheelBOffset = width * 0.5 - wheelBase,\n            wheelYOffset = 0;\n    \n        var car = Composite.create({ label: 'Car' }),\n            body = Bodies.rectangle(xx, yy, width, height, { \n                collisionFilter: {\n                    group: group\n                },\n                chamfer: {\n                    radius: height * 0.5\n                },\n                density: 0.0002\n            });\n    \n        var wheelA = Bodies.circle(xx + wheelAOffset, yy + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var wheelB = Bodies.circle(xx + wheelBOffset, yy + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var axelA = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelAOffset, y: wheelYOffset },\n            bodyA: wheelA,\n            stiffness: 1,\n            length: 0\n        });\n                        \n        var axelB = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelBOffset, y: wheelYOffset },\n            bodyA: wheelB,\n            stiffness: 1,\n            length: 0\n        });\n        \n        Composite.addBody(car, body);\n        Composite.addBody(car, wheelA);\n        Composite.addBody(car, wheelB);\n        Composite.addConstraint(car, axelA);\n        Composite.addConstraint(car, axelB);\n\n        return car;\n    };\n\n    deprecated(Composites, 'car', 'Composites.car ➤ moved to car example');\n\n    /**\n     * This has now moved to the [softBody example](https://github.com/liabru/matter-js/blob/master/examples/softBody.js)\n     * and the [cloth example](https://github.com/liabru/matter-js/blob/master/examples/cloth.js), follow those instead as this function is deprecated here.\n     * @deprecated moved to softBody and cloth examples\n     * @method softBody\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {boolean} crossBrace\n     * @param {number} particleRadius\n     * @param {} particleOptions\n     * @param {} constraintOptions\n     * @return {composite} A new composite softBody\n     */\n    Composites.softBody = function(xx, yy, columns, rows, columnGap, rowGap, crossBrace, particleRadius, particleOptions, constraintOptions) {\n        particleOptions = Common.extend({ inertia: Infinity }, particleOptions);\n        constraintOptions = Common.extend({ stiffness: 0.2, render: { type: 'line', anchors: false } }, constraintOptions);\n\n        var softBody = Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y) {\n            return Bodies.circle(x, y, particleRadius, particleOptions);\n        });\n\n        Composites.mesh(softBody, columns, rows, crossBrace, constraintOptions);\n\n        softBody.label = 'Soft Body';\n\n        return softBody;\n    };\n\n    deprecated(Composites, 'softBody', 'Composites.softBody ➤ moved to softBody and cloth examples');\n})();\n\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* This module has now been replaced by `Matter.Detector`.\n*\n* All usage should be migrated to `Matter.Detector` or another alternative.\n* For back-compatibility purposes this module will remain for a short term and then later removed in a future release.\n*\n* The `Matter.Grid` module contains methods for creating and manipulating collision broadphase grid structures.\n*\n* @class Grid\n* @deprecated\n*/\n\nvar Grid = {};\n\nmodule.exports = Grid;\n\nvar Pair = __webpack_require__(9);\nvar Common = __webpack_require__(0);\nvar deprecated = Common.deprecated;\n\n(function() {\n\n    /**\n     * Creates a new grid.\n     * @deprecated replaced by Matter.Detector\n     * @method create\n     * @param {} options\n     * @return {grid} A new grid\n     */\n    Grid.create = function(options) {\n        var defaults = {\n            buckets: {},\n            pairs: {},\n            pairsList: [],\n            bucketWidth: 48,\n            bucketHeight: 48\n        };\n\n        return Common.extend(defaults, options);\n    };\n\n    /**\n     * The width of a single grid bucket.\n     *\n     * @property bucketWidth\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * The height of a single grid bucket.\n     *\n     * @property bucketHeight\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * Updates the grid.\n     * @deprecated replaced by Matter.Detector\n     * @method update\n     * @param {grid} grid\n     * @param {body[]} bodies\n     * @param {engine} engine\n     * @param {boolean} forceUpdate\n     */\n    Grid.update = function(grid, bodies, engine, forceUpdate) {\n        var i, col, row,\n            world = engine.world,\n            buckets = grid.buckets,\n            bucket,\n            bucketId,\n            gridChanged = false;\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isSleeping && !forceUpdate)\n                continue;\n\n            // temporary back compatibility bounds check\n            if (world.bounds && (body.bounds.max.x < world.bounds.min.x || body.bounds.min.x > world.bounds.max.x\n                || body.bounds.max.y < world.bounds.min.y || body.bounds.min.y > world.bounds.max.y))\n                continue;\n\n            var newRegion = Grid._getRegion(grid, body);\n\n            // if the body has changed grid region\n            if (!body.region || newRegion.id !== body.region.id || forceUpdate) {\n\n                if (!body.region || forceUpdate)\n                    body.region = newRegion;\n\n                var union = Grid._regionUnion(newRegion, body.region);\n\n                // update grid buckets affected by region change\n                // iterate over the union of both regions\n                for (col = union.startCol; col <= union.endCol; col++) {\n                    for (row = union.startRow; row <= union.endRow; row++) {\n                        bucketId = Grid._getBucketId(col, row);\n                        bucket = buckets[bucketId];\n\n                        var isInsideNewRegion = (col >= newRegion.startCol && col <= newRegion.endCol\n                                                && row >= newRegion.startRow && row <= newRegion.endRow);\n\n                        var isInsideOldRegion = (col >= body.region.startCol && col <= body.region.endCol\n                                                && row >= body.region.startRow && row <= body.region.endRow);\n\n                        // remove from old region buckets\n                        if (!isInsideNewRegion && isInsideOldRegion) {\n                            if (isInsideOldRegion) {\n                                if (bucket)\n                                    Grid._bucketRemoveBody(grid, bucket, body);\n                            }\n                        }\n\n                        // add to new region buckets\n                        if (body.region === newRegion || (isInsideNewRegion && !isInsideOldRegion) || forceUpdate) {\n                            if (!bucket)\n                                bucket = Grid._createBucket(buckets, bucketId);\n                            Grid._bucketAddBody(grid, bucket, body);\n                        }\n                    }\n                }\n\n                // set the new region\n                body.region = newRegion;\n\n                // flag changes so we can update pairs\n                gridChanged = true;\n            }\n        }\n\n        // update pairs list only if pairs changed (i.e. a body changed region)\n        if (gridChanged)\n            grid.pairsList = Grid._createActivePairsList(grid);\n    };\n\n    deprecated(Grid, 'update', 'Grid.update ➤ replaced by Matter.Detector');\n\n    /**\n     * Clears the grid.\n     * @deprecated replaced by Matter.Detector\n     * @method clear\n     * @param {grid} grid\n     */\n    Grid.clear = function(grid) {\n        grid.buckets = {};\n        grid.pairs = {};\n        grid.pairsList = [];\n    };\n\n    deprecated(Grid, 'clear', 'Grid.clear ➤ replaced by Matter.Detector');\n\n    /**\n     * Finds the union of two regions.\n     * @method _regionUnion\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} regionA\n     * @param {} regionB\n     * @return {} region\n     */\n    Grid._regionUnion = function(regionA, regionB) {\n        var startCol = Math.min(regionA.startCol, regionB.startCol),\n            endCol = Math.max(regionA.endCol, regionB.endCol),\n            startRow = Math.min(regionA.startRow, regionB.startRow),\n            endRow = Math.max(regionA.endRow, regionB.endRow);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Gets the region a given body falls in for a given grid.\n     * @method _getRegion\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} grid\n     * @param {} body\n     * @return {} region\n     */\n    Grid._getRegion = function(grid, body) {\n        var bounds = body.bounds,\n            startCol = Math.floor(bounds.min.x / grid.bucketWidth),\n            endCol = Math.floor(bounds.max.x / grid.bucketWidth),\n            startRow = Math.floor(bounds.min.y / grid.bucketHeight),\n            endRow = Math.floor(bounds.max.y / grid.bucketHeight);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Creates a region.\n     * @method _createRegion\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} startCol\n     * @param {} endCol\n     * @param {} startRow\n     * @param {} endRow\n     * @return {} region\n     */\n    Grid._createRegion = function(startCol, endCol, startRow, endRow) {\n        return { \n            id: startCol + ',' + endCol + ',' + startRow + ',' + endRow,\n            startCol: startCol, \n            endCol: endCol, \n            startRow: startRow, \n            endRow: endRow \n        };\n    };\n\n    /**\n     * Gets the bucket id at the given position.\n     * @method _getBucketId\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} column\n     * @param {} row\n     * @return {string} bucket id\n     */\n    Grid._getBucketId = function(column, row) {\n        return 'C' + column + 'R' + row;\n    };\n\n    /**\n     * Creates a bucket.\n     * @method _createBucket\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} buckets\n     * @param {} bucketId\n     * @return {} bucket\n     */\n    Grid._createBucket = function(buckets, bucketId) {\n        var bucket = buckets[bucketId] = [];\n        return bucket;\n    };\n\n    /**\n     * Adds a body to a bucket.\n     * @method _bucketAddBody\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketAddBody = function(grid, bucket, body) {\n        var gridPairs = grid.pairs,\n            pairId = Pair.id,\n            bucketLength = bucket.length,\n            i;\n\n        // add new pairs\n        for (i = 0; i < bucketLength; i++) {\n            var bodyB = bucket[i];\n\n            if (body.id === bodyB.id || (body.isStatic && bodyB.isStatic))\n                continue;\n\n            // keep track of the number of buckets the pair exists in\n            // important for Grid.update to work\n            var id = pairId(body, bodyB),\n                pair = gridPairs[id];\n\n            if (pair) {\n                pair[2] += 1;\n            } else {\n                gridPairs[id] = [body, bodyB, 1];\n            }\n        }\n\n        // add to bodies (after pairs, otherwise pairs with self)\n        bucket.push(body);\n    };\n\n    /**\n     * Removes a body from a bucket.\n     * @method _bucketRemoveBody\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketRemoveBody = function(grid, bucket, body) {\n        var gridPairs = grid.pairs,\n            pairId = Pair.id,\n            i;\n\n        // remove from bucket\n        bucket.splice(Common.indexOf(bucket, body), 1);\n\n        var bucketLength = bucket.length;\n\n        // update pair counts\n        for (i = 0; i < bucketLength; i++) {\n            // keep track of the number of buckets the pair exists in\n            // important for _createActivePairsList to work\n            var pair = gridPairs[pairId(body, bucket[i])];\n\n            if (pair)\n                pair[2] -= 1;\n        }\n    };\n\n    /**\n     * Generates a list of the active pairs in the grid.\n     * @method _createActivePairsList\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} grid\n     * @return [] pairs\n     */\n    Grid._createActivePairsList = function(grid) {\n        var pair,\n            gridPairs = grid.pairs,\n            pairKeys = Common.keys(gridPairs),\n            pairKeysLength = pairKeys.length,\n            pairs = [],\n            k;\n\n        // iterate over grid.pairs\n        for (k = 0; k < pairKeysLength; k++) {\n            pair = gridPairs[pairKeys[k]];\n\n            // if pair exists in at least one bucket\n            // it is a pair that needs further collision testing so push it\n            if (pair[2] > 0) {\n                pairs.push(pair);\n            } else {\n                delete gridPairs[pairKeys[k]];\n            }\n        }\n\n        return pairs;\n    };\n    \n})();\n\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.MouseConstraint` module contains methods for creating mouse constraints.\n* Mouse constraints are used for allowing user interaction, providing the ability to move bodies via the mouse or touch.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class MouseConstraint\n*/\n\nvar MouseConstraint = {};\n\nmodule.exports = MouseConstraint;\n\nvar Vertices = __webpack_require__(3);\nvar Sleeping = __webpack_require__(7);\nvar Mouse = __webpack_require__(13);\nvar Events = __webpack_require__(4);\nvar Detector = __webpack_require__(14);\nvar Constraint = __webpack_require__(10);\nvar Composite = __webpack_require__(5);\nvar Common = __webpack_require__(0);\nvar Bounds = __webpack_require__(1);\n\n(function() {\n\n    /**\n     * Creates a new mouse constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {engine} engine\n     * @param {} options\n     * @return {MouseConstraint} A new MouseConstraint\n     */\n    MouseConstraint.create = function(engine, options) {\n        var mouse = (engine ? engine.mouse : null) || (options ? options.mouse : null);\n\n        if (!mouse) {\n            if (engine && engine.render && engine.render.canvas) {\n                mouse = Mouse.create(engine.render.canvas);\n            } else if (options && options.element) {\n                mouse = Mouse.create(options.element);\n            } else {\n                mouse = Mouse.create();\n                Common.warn('MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected');\n            }\n        }\n\n        var constraint = Constraint.create({ \n            label: 'Mouse Constraint',\n            pointA: mouse.position,\n            pointB: { x: 0, y: 0 },\n            length: 0.01, \n            stiffness: 0.1,\n            angularStiffness: 1,\n            render: {\n                strokeStyle: '#90EE90',\n                lineWidth: 3\n            }\n        });\n\n        var defaults = {\n            type: 'mouseConstraint',\n            mouse: mouse,\n            element: null,\n            body: null,\n            constraint: constraint,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            }\n        };\n\n        var mouseConstraint = Common.extend(defaults, options);\n\n        Events.on(engine, 'beforeUpdate', function() {\n            var allBodies = Composite.allBodies(engine.world);\n            MouseConstraint.update(mouseConstraint, allBodies);\n            MouseConstraint._triggerEvents(mouseConstraint);\n        });\n\n        return mouseConstraint;\n    };\n\n    /**\n     * Updates the given mouse constraint.\n     * @private\n     * @method update\n     * @param {MouseConstraint} mouseConstraint\n     * @param {body[]} bodies\n     */\n    MouseConstraint.update = function(mouseConstraint, bodies) {\n        var mouse = mouseConstraint.mouse,\n            constraint = mouseConstraint.constraint,\n            body = mouseConstraint.body;\n\n        if (mouse.button === 0) {\n            if (!constraint.bodyB) {\n                for (var i = 0; i < bodies.length; i++) {\n                    body = bodies[i];\n                    if (Bounds.contains(body.bounds, mouse.position) \n                            && Detector.canCollide(body.collisionFilter, mouseConstraint.collisionFilter)) {\n                        for (var j = body.parts.length > 1 ? 1 : 0; j < body.parts.length; j++) {\n                            var part = body.parts[j];\n                            if (Vertices.contains(part.vertices, mouse.position)) {\n                                constraint.pointA = mouse.position;\n                                constraint.bodyB = mouseConstraint.body = body;\n                                constraint.pointB = { x: mouse.position.x - body.position.x, y: mouse.position.y - body.position.y };\n                                constraint.angleB = body.angle;\n\n                                Sleeping.set(body, false);\n                                Events.trigger(mouseConstraint, 'startdrag', { mouse: mouse, body: body });\n\n                                break;\n                            }\n                        }\n                    }\n                }\n            } else {\n                Sleeping.set(constraint.bodyB, false);\n                constraint.pointA = mouse.position;\n            }\n        } else {\n            constraint.bodyB = mouseConstraint.body = null;\n            constraint.pointB = null;\n\n            if (body)\n                Events.trigger(mouseConstraint, 'enddrag', { mouse: mouse, body: body });\n        }\n    };\n\n    /**\n     * Triggers mouse constraint events.\n     * @method _triggerEvents\n     * @private\n     * @param {mouse} mouseConstraint\n     */\n    MouseConstraint._triggerEvents = function(mouseConstraint) {\n        var mouse = mouseConstraint.mouse,\n            mouseEvents = mouse.sourceEvents;\n\n        if (mouseEvents.mousemove)\n            Events.trigger(mouseConstraint, 'mousemove', { mouse: mouse });\n\n        if (mouseEvents.mousedown)\n            Events.trigger(mouseConstraint, 'mousedown', { mouse: mouse });\n\n        if (mouseEvents.mouseup)\n            Events.trigger(mouseConstraint, 'mouseup', { mouse: mouse });\n\n        // reset the mouse state ready for the next step\n        Mouse.clearSourceEvents(mouse);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when the mouse has moved (or a touch moves) during the last step\n    *\n    * @event mousemove\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is down (or a touch has started) during the last step\n    *\n    * @event mousedown\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is up (or a touch has ended) during the last step\n    *\n    * @event mouseup\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user starts dragging a body\n    *\n    * @event startdrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user ends dragging a body\n    *\n    * @event enddrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body that has stopped being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * The `Mouse` instance in use. If not supplied in `MouseConstraint.create`, one will be created.\n     *\n     * @property mouse\n     * @type mouse\n     * @default mouse\n     */\n\n    /**\n     * The `Body` that is currently being moved by the user, or `null` if no body.\n     *\n     * @property body\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The `Constraint` object that is used to move the body during interaction.\n     *\n     * @property constraint\n     * @type constraint\n     */\n\n    /**\n     * An `Object` that specifies the collision filter properties.\n     * The collision filter allows the user to define which types of body this mouse constraint can interact with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n})();\n\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Query` module contains methods for performing collision queries.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Query\n*/\n\nvar Query = {};\n\nmodule.exports = Query;\n\nvar Vector = __webpack_require__(2);\nvar Collision = __webpack_require__(8);\nvar Bounds = __webpack_require__(1);\nvar Bodies = __webpack_require__(12);\nvar Vertices = __webpack_require__(3);\n\n(function() {\n\n    /**\n     * Returns a list of collisions between `body` and `bodies`.\n     * @method collides\n     * @param {body} body\n     * @param {body[]} bodies\n     * @return {collision[]} Collisions\n     */\n    Query.collides = function(body, bodies) {\n        var collisions = [],\n            bodiesLength = bodies.length,\n            bounds = body.bounds,\n            collides = Collision.collides,\n            overlaps = Bounds.overlaps;\n\n        for (var i = 0; i < bodiesLength; i++) {\n            var bodyA = bodies[i],\n                partsALength = bodyA.parts.length,\n                partsAStart = partsALength === 1 ? 0 : 1;\n            \n            if (overlaps(bodyA.bounds, bounds)) {\n                for (var j = partsAStart; j < partsALength; j++) {\n                    var part = bodyA.parts[j];\n\n                    if (overlaps(part.bounds, bounds)) {\n                        var collision = collides(part, body);\n\n                        if (collision) {\n                            collisions.push(collision);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Casts a ray segment against a set of bodies and returns all collisions, ray width is optional. Intersection points are not provided.\n     * @method ray\n     * @param {body[]} bodies\n     * @param {vector} startPoint\n     * @param {vector} endPoint\n     * @param {number} [rayWidth]\n     * @return {collision[]} Collisions\n     */\n    Query.ray = function(bodies, startPoint, endPoint, rayWidth) {\n        rayWidth = rayWidth || 1e-100;\n\n        var rayAngle = Vector.angle(startPoint, endPoint),\n            rayLength = Vector.magnitude(Vector.sub(startPoint, endPoint)),\n            rayX = (endPoint.x + startPoint.x) * 0.5,\n            rayY = (endPoint.y + startPoint.y) * 0.5,\n            ray = Bodies.rectangle(rayX, rayY, rayLength, rayWidth, { angle: rayAngle }),\n            collisions = Query.collides(ray, bodies);\n\n        for (var i = 0; i < collisions.length; i += 1) {\n            var collision = collisions[i];\n            collision.body = collision.bodyB = collision.bodyA;            \n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns all bodies whose bounds are inside (or outside if set) the given set of bounds, from the given set of bodies.\n     * @method region\n     * @param {body[]} bodies\n     * @param {bounds} bounds\n     * @param {bool} [outside=false]\n     * @return {body[]} The bodies matching the query\n     */\n    Query.region = function(bodies, bounds, outside) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                overlaps = Bounds.overlaps(body.bounds, bounds);\n            if ((overlaps && !outside) || (!overlaps && outside))\n                result.push(body);\n        }\n\n        return result;\n    };\n\n    /**\n     * Returns all bodies whose vertices contain the given point, from the given set of bodies.\n     * @method point\n     * @param {body[]} bodies\n     * @param {vector} point\n     * @return {body[]} The bodies matching the query\n     */\n    Query.point = function(bodies, point) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            \n            if (Bounds.contains(body.bounds, point)) {\n                for (var j = body.parts.length === 1 ? 0 : 1; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n\n                    if (Bounds.contains(part.bounds, point)\n                        && Vertices.contains(part.vertices, point)) {\n                        result.push(body);\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n})();\n\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Runner` module is an optional utility which provides a game loop, \n* that handles continuously updating a `Matter.Engine` for you within a browser.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* If you are using your own game loop instead, then you do not need the `Matter.Runner` module.\n* Instead just call `Engine.update(engine, delta)` in your own loop.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Runner\n*/\n\nvar Runner = {};\n\nmodule.exports = Runner;\n\nvar Events = __webpack_require__(4);\nvar Engine = __webpack_require__(18);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame;\n   \n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame \n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    if (!_requestAnimationFrame) {\n        var _frameTimeout;\n\n        _requestAnimationFrame = function(callback){ \n            _frameTimeout = setTimeout(function() { \n                callback(Common.now()); \n            }, 1000 / 60);\n        };\n\n        _cancelAnimationFrame = function() {\n            clearTimeout(_frameTimeout);\n        };\n    }\n\n    /**\n     * Creates a new Runner. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * @method create\n     * @param {} options\n     */\n    Runner.create = function(options) {\n        var defaults = {\n            fps: 60,\n            correction: 1,\n            deltaSampleSize: 60,\n            counterTimestamp: 0,\n            frameCounter: 0,\n            deltaHistory: [],\n            timePrev: null,\n            timeScalePrev: 1,\n            frameRequestId: null,\n            isFixed: false,\n            enabled: true\n        };\n\n        var runner = Common.extend(defaults, options);\n\n        runner.delta = runner.delta || 1000 / runner.fps;\n        runner.deltaMin = runner.deltaMin || 1000 / runner.fps;\n        runner.deltaMax = runner.deltaMax || 1000 / (runner.fps * 0.5);\n        runner.fps = 1000 / runner.delta;\n\n        return runner;\n    };\n\n    /**\n     * Continuously ticks a `Matter.Engine` by calling `Runner.tick` on the `requestAnimationFrame` event.\n     * @method run\n     * @param {engine} engine\n     */\n    Runner.run = function(runner, engine) {\n        // create runner if engine is first argument\n        if (typeof runner.positionIterations !== 'undefined') {\n            engine = runner;\n            runner = Runner.create();\n        }\n\n        (function render(time){\n            runner.frameRequestId = _requestAnimationFrame(render);\n\n            if (time && runner.enabled) {\n                Runner.tick(runner, engine, time);\n            }\n        })();\n\n        return runner;\n    };\n\n    /**\n     * A game loop utility that updates the engine and renderer by one step (a 'tick').\n     * Features delta smoothing, time correction and fixed or dynamic timing.\n     * Consider just `Engine.update(engine, delta)` if you're using your own loop.\n     * @method tick\n     * @param {runner} runner\n     * @param {engine} engine\n     * @param {number} time\n     */\n    Runner.tick = function(runner, engine, time) {\n        var timing = engine.timing,\n            correction = 1,\n            delta;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(runner, 'beforeTick', event);\n\n        if (runner.isFixed) {\n            // fixed timestep\n            delta = runner.delta;\n        } else {\n            // dynamic timestep based on wall clock between calls\n            delta = (time - runner.timePrev) || runner.delta;\n            runner.timePrev = time;\n\n            // optimistically filter delta over a few frames, to improve stability\n            runner.deltaHistory.push(delta);\n            runner.deltaHistory = runner.deltaHistory.slice(-runner.deltaSampleSize);\n            delta = Math.min.apply(null, runner.deltaHistory);\n            \n            // limit delta\n            delta = delta < runner.deltaMin ? runner.deltaMin : delta;\n            delta = delta > runner.deltaMax ? runner.deltaMax : delta;\n\n            // correction for delta\n            correction = delta / runner.delta;\n\n            // update engine timing object\n            runner.delta = delta;\n        }\n\n        // time correction for time scaling\n        if (runner.timeScalePrev !== 0)\n            correction *= timing.timeScale / runner.timeScalePrev;\n\n        if (timing.timeScale === 0)\n            correction = 0;\n\n        runner.timeScalePrev = timing.timeScale;\n        runner.correction = correction;\n\n        // fps counter\n        runner.frameCounter += 1;\n        if (time - runner.counterTimestamp >= 1000) {\n            runner.fps = runner.frameCounter * ((time - runner.counterTimestamp) / 1000);\n            runner.counterTimestamp = time;\n            runner.frameCounter = 0;\n        }\n\n        Events.trigger(runner, 'tick', event);\n\n        // update\n        Events.trigger(runner, 'beforeUpdate', event);\n        Engine.update(engine, delta, correction);\n        Events.trigger(runner, 'afterUpdate', event);\n\n        Events.trigger(runner, 'afterTick', event);\n    };\n\n    /**\n     * Ends execution of `Runner.run` on the given `runner`, by canceling the animation frame request event loop.\n     * If you wish to only temporarily pause the engine, see `engine.enabled` instead.\n     * @method stop\n     * @param {runner} runner\n     */\n    Runner.stop = function(runner) {\n        _cancelAnimationFrame(runner.frameRequestId);\n    };\n\n    /**\n     * Alias for `Runner.run`.\n     * @method start\n     * @param {runner} runner\n     * @param {engine} engine\n     */\n    Runner.start = function(runner, engine) {\n        Runner.run(runner, engine);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired at the start of a tick, before any updates to the engine or timing\n    *\n    * @event beforeTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine timing updated, but just before update\n    *\n    * @event tick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired at the end of a tick, after engine update and after rendering\n    *\n    * @event afterTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired before update\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after update\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A flag that specifies whether the runner is running or not.\n     *\n     * @property enabled\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Boolean` that specifies if the runner should use a fixed timestep (otherwise it is variable).\n     * If timing is fixed, then the apparent simulation speed will change depending on the frame rate (but behaviour will be deterministic).\n     * If the timing is variable, then the apparent simulation speed will be constant (approximately, but at the cost of determininism).\n     *\n     * @property isFixed\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that specifies the time step between updates in milliseconds.\n     * If `engine.timing.isFixed` is set to `true`, then `delta` is fixed.\n     * If it is `false`, then `delta` can dynamically change to maintain the correct apparent simulation speed.\n     *\n     * @property delta\n     * @type number\n     * @default 1000 / 60\n     */\n\n})();\n\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* This module has now been replaced by `Matter.Collision`.\n*\n* All usage should be migrated to `Matter.Collision`.\n* For back-compatibility purposes this module will remain for a short term and then later removed in a future release.\n*\n* The `Matter.SAT` module contains methods for detecting collisions using the Separating Axis Theorem.\n*\n* @class SAT\n* @deprecated\n*/\n\nvar SAT = {};\n\nmodule.exports = SAT;\n\nvar Collision = __webpack_require__(8);\nvar Common = __webpack_require__(0);\nvar deprecated = Common.deprecated;\n\n(function() {\n\n    /**\n     * Detect collision between two bodies using the Separating Axis Theorem.\n     * @deprecated replaced by Collision.collides\n     * @method collides\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {collision} collision\n     */\n    SAT.collides = function(bodyA, bodyB) {\n        return Collision.collides(bodyA, bodyB);\n    };\n\n    deprecated(SAT, 'collides', 'SAT.collides ➤ replaced by Collision.collides');\n\n})();\n\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Svg` module contains methods for converting SVG images into an array of vector points.\n*\n* To use this module you also need the SVGPathSeg polyfill: https://github.com/progers/pathseg\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Svg\n*/\n\nvar Svg = {};\n\nmodule.exports = Svg;\n\nvar Bounds = __webpack_require__(1);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Converts an SVG path into an array of vector points.\n     * If the input path forms a concave shape, you must decompose the result into convex parts before use.\n     * See `Bodies.fromVertices` which provides support for this.\n     * Note that this function is not guaranteed to support complex paths (such as those with holes).\n     * You must load the `pathseg.js` polyfill on newer browsers.\n     * @method pathToVertices\n     * @param {SVGPathElement} path\n     * @param {Number} [sampleLength=15]\n     * @return {Vector[]} points\n     */\n    Svg.pathToVertices = function(path, sampleLength) {\n        if (typeof window !== 'undefined' && !('SVGPathSeg' in window)) {\n            Common.warn('Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.');\n        }\n\n        // https://github.com/wout/svg.topoly.js/blob/master/svg.topoly.js\n        var i, il, total, point, segment, segments, \n            segmentsQueue, lastSegment, \n            lastPoint, segmentIndex, points = [],\n            lx, ly, length = 0, x = 0, y = 0;\n\n        sampleLength = sampleLength || 15;\n\n        var addPoint = function(px, py, pathSegType) {\n            // all odd-numbered path types are relative except PATHSEG_CLOSEPATH (1)\n            var isRelative = pathSegType % 2 === 1 && pathSegType > 1;\n\n            // when the last point doesn't equal the current point add the current point\n            if (!lastPoint || px != lastPoint.x || py != lastPoint.y) {\n                if (lastPoint && isRelative) {\n                    lx = lastPoint.x;\n                    ly = lastPoint.y;\n                } else {\n                    lx = 0;\n                    ly = 0;\n                }\n\n                var point = {\n                    x: lx + px,\n                    y: ly + py\n                };\n\n                // set last point\n                if (isRelative || !lastPoint) {\n                    lastPoint = point;\n                }\n\n                points.push(point);\n\n                x = lx + px;\n                y = ly + py;\n            }\n        };\n\n        var addSegmentPoint = function(segment) {\n            var segType = segment.pathSegTypeAsLetter.toUpperCase();\n\n            // skip path ends\n            if (segType === 'Z') \n                return;\n\n            // map segment to x and y\n            switch (segType) {\n\n            case 'M':\n            case 'L':\n            case 'T':\n            case 'C':\n            case 'S':\n            case 'Q':\n                x = segment.x;\n                y = segment.y;\n                break;\n            case 'H':\n                x = segment.x;\n                break;\n            case 'V':\n                y = segment.y;\n                break;\n            }\n\n            addPoint(x, y, segment.pathSegType);\n        };\n\n        // ensure path is absolute\n        Svg._svgPathToAbsolute(path);\n\n        // get total length\n        total = path.getTotalLength();\n\n        // queue segments\n        segments = [];\n        for (i = 0; i < path.pathSegList.numberOfItems; i += 1)\n            segments.push(path.pathSegList.getItem(i));\n\n        segmentsQueue = segments.concat();\n\n        // sample through path\n        while (length < total) {\n            // get segment at position\n            segmentIndex = path.getPathSegAtLength(length);\n            segment = segments[segmentIndex];\n\n            // new segment\n            if (segment != lastSegment) {\n                while (segmentsQueue.length && segmentsQueue[0] != segment)\n                    addSegmentPoint(segmentsQueue.shift());\n\n                lastSegment = segment;\n            }\n\n            // add points in between when curving\n            // TODO: adaptive sampling\n            switch (segment.pathSegTypeAsLetter.toUpperCase()) {\n\n            case 'C':\n            case 'T':\n            case 'S':\n            case 'Q':\n            case 'A':\n                point = path.getPointAtLength(length);\n                addPoint(point.x, point.y, 0);\n                break;\n\n            }\n\n            // increment by sample value\n            length += sampleLength;\n        }\n\n        // add remaining segments not passed by sampling\n        for (i = 0, il = segmentsQueue.length; i < il; ++i)\n            addSegmentPoint(segmentsQueue[i]);\n\n        return points;\n    };\n\n    Svg._svgPathToAbsolute = function(path) {\n        // http://phrogz.net/convert-svg-path-to-all-absolute-commands\n        // Copyright (c) Gavin Kistner\n        // http://phrogz.net/js/_ReuseLicense.txt\n        // Modifications: tidy formatting and naming\n        var x0, y0, x1, y1, x2, y2, segs = path.pathSegList,\n            x = 0, y = 0, len = segs.numberOfItems;\n\n        for (var i = 0; i < len; ++i) {\n            var seg = segs.getItem(i),\n                segType = seg.pathSegTypeAsLetter;\n\n            if (/[MLHVCSQTA]/.test(segType)) {\n                if ('x' in seg) x = seg.x;\n                if ('y' in seg) y = seg.y;\n            } else {\n                if ('x1' in seg) x1 = x + seg.x1;\n                if ('x2' in seg) x2 = x + seg.x2;\n                if ('y1' in seg) y1 = y + seg.y1;\n                if ('y2' in seg) y2 = y + seg.y2;\n                if ('x' in seg) x += seg.x;\n                if ('y' in seg) y += seg.y;\n\n                switch (segType) {\n\n                case 'm':\n                    segs.replaceItem(path.createSVGPathSegMovetoAbs(x, y), i);\n                    break;\n                case 'l':\n                    segs.replaceItem(path.createSVGPathSegLinetoAbs(x, y), i);\n                    break;\n                case 'h':\n                    segs.replaceItem(path.createSVGPathSegLinetoHorizontalAbs(x), i);\n                    break;\n                case 'v':\n                    segs.replaceItem(path.createSVGPathSegLinetoVerticalAbs(y), i);\n                    break;\n                case 'c':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicAbs(x, y, x1, y1, x2, y2), i);\n                    break;\n                case 's':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicSmoothAbs(x, y, x2, y2), i);\n                    break;\n                case 'q':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticAbs(x, y, x1, y1), i);\n                    break;\n                case 't':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticSmoothAbs(x, y), i);\n                    break;\n                case 'a':\n                    segs.replaceItem(path.createSVGPathSegArcAbs(x, y, seg.r1, seg.r2, seg.angle, seg.largeArcFlag, seg.sweepFlag), i);\n                    break;\n                case 'z':\n                case 'Z':\n                    x = x0;\n                    y = y0;\n                    break;\n\n                }\n            }\n\n            if (segType == 'M' || segType == 'm') {\n                x0 = x;\n                y0 = y;\n            }\n        }\n    };\n\n})();\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* This module has now been replaced by `Matter.Composite`.\n*\n* All usage should be migrated to the equivalent functions found on `Matter.Composite`.\n* For example `World.add(world, body)` now becomes `Composite.add(world, body)`.\n*\n* The property `world.gravity` has been moved to `engine.gravity`.\n*\n* For back-compatibility purposes this module will remain as a direct alias to `Matter.Composite` in the short term during migration.\n* Eventually this alias module will be marked as deprecated and then later removed in a future release.\n*\n* @class World\n*/\n\nvar World = {};\n\nmodule.exports = World;\n\nvar Composite = __webpack_require__(5);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * See above, aliases for back compatibility only\n     */\n    World.create = Composite.create;\n    World.add = Composite.add;\n    World.remove = Composite.remove;\n    World.clear = Composite.clear;\n    World.addComposite = Composite.addComposite;\n    World.addBody = Composite.addBody;\n    World.addConstraint = Composite.addConstraint;\n\n})();\n\n\n/***/ })\n/******/ ]);\n});"],"names":["$parcel$interopDefault","a","__esModule","default","$parcel$global","globalThis","self","window","global","$5cd67e1a674bf254$exports","$15908c238ece17d0$var$isTouchDevice","navigator","maxTouchPoints","msMaxTouchPoints","$15908c238ece17d0$var$Engine","modules","installedModules","__webpack_require__","moduleId","exports","module1","i","l","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_seededRandom","Common","_nextId","_seed","_nowStartTime","Date","_warnedOnce","_decomp","extend","obj","deep","argsStart","deepClone","arguments","length","source","prop","constructor","clone","keys","push","values","path","begin","end","split","slice","set","val","parts","shuffle","array","j","Math","floor","random","temp","choose","choices","isElement","HTMLElement","nodeType","nodeName","isArray","toString","isFunction","isPlainObject","isString","clamp","min","max","sign","now","performance","webkitNow","colorToNumber","colorString","replace","charAt","parseInt","logLevel","log","console","apply","concat","Array","info","warn","warnOnce","message","join","deprecated","warning","chain","nextId","indexOf","haystack","needle","map","list","func","mapped","topologicalSort","graph","result","visited","node","_topologicalSort","neighbors","neighbor","funcs","_chained","lastResult","args","chainPathBefore","base","chainPathAfter","setDecomp","decomp","getDecomp","e","Bounds","vertices","bounds","x","y","update","velocity","Infinity","vertex","contains","point","overlaps","boundsA","boundsB","translate","vector","shift","position","deltaX","deltaY","Vector","magnitude","sqrt","magnitudeSquared","rotate","angle","output","cos","sin","rotateAbout","normalise","dot","vectorA","vectorB","cross","cross3","vectorC","add","sub","mult","scalar","div","perp","negate","neg","atan2","_temp","Vertices","points","body","index","isInternal","fromPath","match","parseFloat","centre","area","mean","average","signed","abs","inertia","mass","numerator","denominator","v","verticesLength","translateX","translateY","dx","dy","pointX","pointY","nextVertex","scale","scaleX","scaleY","delta","chamfer","radius","quality","qualityMin","qualityMax","newVertices","prevVertex","currentRadius","prevNormal","nextNormal","diagonalRadius","pow","radiusVector","midNormal","scaledVertex","precision","theta","alpha","acos","clockwiseSort","sort","vertexA","vertexB","isConvex","k","z","flag","hull","upper","lower","pop","Events","on","eventNames","callback","names","events","off","callbacks","newCallbacks","trigger","event","eventClone","Composite","Body","options","id","type","parent","isModified","bodies","constraints","composites","label","plugin","cache","allBodies","allConstraints","allComposites","setModified","composite","updateParents","updateChildren","childComposite","objects","addBody","addConstraint","addComposite","constraint","remove","removeBody","removeConstraint","removeComposite","compositeA","compositeB","removeCompositeAt","splice","removeBodyAt","removeConstraintAt","clear","keepStatic","filter","isStatic","move","rebase","translation","recursive","rotation","setPosition","_initProperties","Sleeping","Axes","_inertiaScale","_nextCollidingGroupId","_nextNonCollidingGroupId","_nextCategory","defaults","force","torque","positionImpulse","constraintImpulse","totalContacts","speed","angularSpeed","angularVelocity","isSensor","isSleeping","motion","sleepThreshold","density","restitution","friction","frictionStatic","frictionAir","collisionFilter","category","mask","group","slop","timeScale","render","visible","opacity","strokeStyle","fillStyle","lineWidth","sprite","xScale","yScale","xOffset","yOffset","circleRadius","positionPrev","anglePrev","axes","_original","nextGroup","isNonColliding","nextCategory","defaultFillStyle","defaultStrokeStyle","defaultLineWidth","settings","setStatic","setMass","setDensity","setInertia","setVertices","setAngle","setVelocity","setAngularVelocity","setParts","setCentre","part","inverseMass","inverseInertia","moment","fromVertices","autoHull","hullCentre","total","_totalProperties","relative","totalArea","totalInertia","deltaTime","correction","deltaTimeSquared","velocityPrevX","velocityPrevY","applyForce","offset","properties","_motionWakeThreshold","_motionSleepThreshold","_minBias","timeFactor","minMotion","maxMotion","sleepCounter","afterCollisions","pairs","pair","isActive","collision","bodyA","bodyB","sleepingBody","movingBody","wasSleeping","_supports","_overlapAB","_overlapBA","Collision","Pair","overlap","axis","collided","parentA","parentB","depth","normal","tangent","penetration","supports","collides","_overlapAxes","minOverlap","table","minAxis","minAxisX","minAxisY","supportsB","_findSupports","supportCount","supportsA","verticesA","verticesB","overlapAB","overlapBA","verticesALength","verticesBLength","verticesAX","verticesAY","verticesBX","verticesBY","axesLength","overlapMin","Number","MAX_VALUE","overlapAxisNumber","axisX","axisY","minA","minB","maxA","maxB","_projectToAxis","projection","direction","vertexC","distance","bodyAPositionX","bodyAPositionY","normalX","normalY","nearestDistance","Contact","timestamp","contacts","activeContacts","separation","confirmedActive","timeCreated","timeUpdated","parentAVerticesLength","support","contactId","contact","setActive","Constraint","_warming","_torqueDampen","_minLength","pointA","pointB","initialPointA","initialPointB","stiffness","damping","angularStiffness","angleA","angleB","anchors","preSolveAll","impulse","solveAll","fixedA","fixedB","solve","pointAWorld","pointBWorld","currentLength","share","normalVelocity","relativeVelocity","difference","massTotal","resistanceTotal","zero","postSolveAll","gradient","toFixed","xx","Bodies","rectangle","width","height","trapezoid","slope","verticesPath","roof","x1","x2","x3","circle","maxSides","sides","ceil","polygon","PI","yy","vertexSets","flagInternal","removeCollinear","minimumArea","removeDuplicatePoints","canDecomp","Boolean","quickDecomp","concave","makeCCW","removeCollinearPoints","decomposed","chunkVertices","chunk","partA","partB","pav","pbv","da","db","Mouse","element","mouse","document","absolute","mousedownPosition","mouseupPosition","wheelDelta","button","pixelRatio","getAttribute","sourceEvents","mousemove","mousedown","mouseup","mousewheel","_getRelativeMousePosition","changedTouches","preventDefault","detail","setElement","addEventListener","clearSourceEvents","setOffset","setScale","elementBounds","getBoundingClientRect","rootNode","documentElement","parentNode","scrollX","undefined","pageXOffset","scrollLeft","scrollY","pageYOffset","scrollTop","touches","pageX","left","pageY","top","clientWidth","clientHeight","Detector","setBodies","detector","collisions","bodiesLength","canCollide","_compareBoundsX","boundXMax","boundYMax","boundYMin","bodyAStatic","partsALength","partsASingle","partsBLength","partsAStart","partsBStart","filterA","filterB","Plugin","_registry","register","isPlugin","registered","pluginVersion","versionParse","version","number","registeredVersion","resolve","dependency","dependencyParse","range","install","isUsed","used","isFor","parsed","for","versionSatisfies","use","plugins","uses","dependencies","sortedDependencies","status","_warned","tracked","parsedBase","resolved","pattern","test","exec","major","minor","patch","isRange","operator","prerelease","_requestAnimationFrame","_cancelAnimationFrame","_updateTiming","_mean","_createCanvas","_getPixelRatio","_getTexture","_applyBackground","Render","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","msRequestAnimationFrame","setTimeout","cancelAnimationFrame","mozCancelAnimationFrame","webkitCancelAnimationFrame","msCancelAnimationFrame","_goodFps","_goodDelta","controller","engine","canvas","frameRequestId","timing","historySize","deltaHistory","lastTime","lastTimestamp","lastElapsed","timestampElapsed","timestampElapsedHistory","engineDeltaHistory","engineElapsedHistory","elapsedHistory","background","wireframeBackground","hasBounds","enabled","wireframes","showSleeping","showDebug","showStats","showPerformance","showBounds","showVelocity","showCollisions","showSeparations","showAxes","showPositions","showAngleIndicator","showIds","showVertexNumbers","showConvexHulls","showInternalEdges","showMousePosition","context","getContext","textures","showBroadphase","setPixelRatio","appendChild","run","loop","time","world","stats","stop","setAttribute","style","lookAt","padding","center","viewHeight","outerRatio","viewWidth","innerRatio","startViewTransform","boundsWidth","boundsHeight","boundsScaleX","boundsScaleY","setTransform","endViewTransform","startTime","currentBackground","globalCompositeOperation","fillRect","enableSleeping","bodyConvexHulls","bodyWireframes","bodyBounds","bodyAxes","bodyPositions","bodyVelocity","bodyIds","separations","vertexNumbers","mousePosition","sections","font","textBaseline","textAlign","section","fillText","lastEngineDelta","lastDelta","deltaMean","elapsedMean","engineDeltaMean","engineElapsedMean","rateMean","timestampElapsedMean","fps","gap","round","count","indicator","plotY","beginPath","moveTo","lineTo","stroke","start","arc","closePath","coils","fill","globalAlpha","texture","drawImage","rect","normalPosX","normalPosY","inspector","selected","item","data","setLineDash","selectStart","selectBounds","unshift","createElement","oncontextmenu","onselectstart","devicePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","imagePath","image","Image","src","cssBackground","backgroundSize","normalImpulse","tangentImpulse","Engine","Resolver","Pairs","positionIterations","velocityIterations","constraintIterations","gravity","grid","buckets","broadphase","metrics","_bodiesApplyGravity","_bodiesUpdate","collisionStart","preSolvePosition","solvePosition","postSolvePosition","preSolveVelocity","solveVelocity","collisionActive","collisionEnd","_bodiesClearForces","merge","engineA","engineB","gravityScale","worldBounds","_restingThresh","_restingThreshTangent","_positionDampen","_positionWarming","_frictionNormalMultiplier","activeCount","pairsLength","contactShare","positionDampen","positionWarming","verticesTranslate","boundsUpdate","positionImpulseX","positionImpulseY","contactsLength","contactVertex","impulseX","impulseY","maxFriction","timeScaleSquared","restingThresh","frictionNormalMultiplier","restingThreshTangent","NumberMaxValue","bodyAVelocity","bodyBVelocity","tangentX","tangentY","inverseMassTotal","offsetAX","offsetAY","offsetBX","offsetBY","velocityPointAX","velocityPointAY","velocityPointBX","velocityPointBY","relativeVelocityX","relativeVelocityY","tangentVelocity","normalOverlap","normalForce","frictionLimit","oAcN","oBcN","contactNormalImpulse","contactTangentImpulse","pairIndex","pairsList","pairsListLength","pairsTable","collisionsLength","removePairIndex","Matter","Composites","Grid","MouseConstraint","Query","Runner","SAT","Svg","World","before","after","stack","columns","rows","columnGap","rowGap","lastBody","row","maxHeight","column","bodyHeight","bodyWidth","xOffsetA","yOffsetA","xOffsetB","yOffsetB","bodyAHeight","bodyAWidth","bodyBHeight","bodyBWidth","mesh","crossBrace","col","bodyC","pyramid","actualRows","lastBodyWidth","newtonsCradle","size","car","wheelSize","wheelAOffset","wheelBOffset","wheelA","wheelB","axelA","axelB","softBody","particleRadius","particleOptions","constraintOptions","bucketWidth","bucketHeight","forceUpdate","bucket","bucketId","gridChanged","newRegion","_getRegion","region","union","_regionUnion","startCol","endCol","startRow","endRow","_getBucketId","isInsideNewRegion","isInsideOldRegion","_bucketRemoveBody","_createBucket","_bucketAddBody","_createActivePairsList","regionA","regionB","_createRegion","gridPairs","pairId","bucketLength","pairKeys","pairKeysLength","mouseConstraint","_triggerEvents","mouseEvents","ray","startPoint","endPoint","rayWidth","rayAngle","rayLength","rayX","rayY","outside","_frameTimeout","clearTimeout","runner","deltaSampleSize","counterTimestamp","frameCounter","timePrev","timeScalePrev","isFixed","deltaMin","deltaMax","tick","pathToVertices","sampleLength","il","segment","segments","segmentsQueue","lastSegment","lastPoint","lx","ly","addPoint","px","py","pathSegType","isRelative","addSegmentPoint","segType","pathSegTypeAsLetter","toUpperCase","_svgPathToAbsolute","getTotalLength","pathSegList","numberOfItems","getItem","getPathSegAtLength","getPointAtLength","x0","y0","y1","y2","segs","len","seg","replaceItem","createSVGPathSegMovetoAbs","createSVGPathSegLinetoAbs","createSVGPathSegLinetoHorizontalAbs","createSVGPathSegLinetoVerticalAbs","createSVGPathSegCurvetoCubicAbs","createSVGPathSegCurvetoCubicSmoothAbs","createSVGPathSegCurvetoQuadraticAbs","createSVGPathSegCurvetoQuadraticSmoothAbs","createSVGPathSegArcAbs","r1","r2","largeArcFlag","sweepFlag","$15908c238ece17d0$var$Render","$15908c238ece17d0$var$Runner","$15908c238ece17d0$var$Bodies","$15908c238ece17d0$var$Composite","$15908c238ece17d0$var$MouseConstraint","$15908c238ece17d0$var$Mouse","$15908c238ece17d0$var$World","$15908c238ece17d0$var$engine","$15908c238ece17d0$var$engineWrap","getElementById","$15908c238ece17d0$var$render","$15908c238ece17d0$var$cursor","$15908c238ece17d0$var$world","$15908c238ece17d0$var$runner","$15908c238ece17d0$var$canvas","querySelector","$15908c238ece17d0$var$canvasMouse","$15908c238ece17d0$var$mConstraint","removeEventListener","$15908c238ece17d0$var$timesFired","$15908c238ece17d0$var$spawnRate","$15908c238ece17d0$var$initSpawn","$15908c238ece17d0$var$startBoxes","setInterval","hidden","spawnPosY","box","bodiesArray","excessBodies","$15908c238ece17d0$var$lotsOfBoxes","once","$15908c238ece17d0$var$main","$15908c238ece17d0$var$prevTop","amountMoved","$15908c238ece17d0$var$parallaxSpeed","classList","from","elementsFromPoint","includes"],"version":3,"file":"index.b4bd9a05.js.map"}